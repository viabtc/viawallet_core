// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Bitcoin.proto

package wallet.core.jni.proto;

public final class Bitcoin {
  private Bitcoin() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface TransactionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TW.Bitcoin.Proto.Transaction)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Transaction data format version.
     * </pre>
     *
     * <code>sint32 version = 1;</code>
     * @return The version.
     */
    int getVersion();

    /**
     * <pre>
     * The block number or timestamp at which this transaction is unlocked.
     * </pre>
     *
     * <code>uint32 lockTime = 2;</code>
     * @return The lockTime.
     */
    int getLockTime();

    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    java.util.List<wallet.core.jni.proto.Bitcoin.TransactionInput> 
        getInputsList();
    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    wallet.core.jni.proto.Bitcoin.TransactionInput getInputs(int index);
    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    int getInputsCount();

    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    java.util.List<wallet.core.jni.proto.Bitcoin.TransactionOutput> 
        getOutputsList();
    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    wallet.core.jni.proto.Bitcoin.TransactionOutput getOutputs(int index);
    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    int getOutputsCount();
  }
  /**
   * <pre>
   * A transaction, with its inputs and outputs
   * </pre>
   *
   * Protobuf type {@code TW.Bitcoin.Proto.Transaction}
   */
  public  static final class Transaction extends
      com.google.protobuf.GeneratedMessageLite<
          Transaction, Transaction.Builder> implements
      // @@protoc_insertion_point(message_implements:TW.Bitcoin.Proto.Transaction)
      TransactionOrBuilder {
    private Transaction() {
      inputs_ = emptyProtobufList();
      outputs_ = emptyProtobufList();
    }
    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_;
    /**
     * <pre>
     * Transaction data format version.
     * </pre>
     *
     * <code>sint32 version = 1;</code>
     * @return The version.
     */
    @java.lang.Override
    public int getVersion() {
      return version_;
    }
    /**
     * <pre>
     * Transaction data format version.
     * </pre>
     *
     * <code>sint32 version = 1;</code>
     * @param value The version to set.
     */
    private void setVersion(int value) {
      
      version_ = value;
    }
    /**
     * <pre>
     * Transaction data format version.
     * </pre>
     *
     * <code>sint32 version = 1;</code>
     */
    private void clearVersion() {
      
      version_ = 0;
    }

    public static final int LOCKTIME_FIELD_NUMBER = 2;
    private int lockTime_;
    /**
     * <pre>
     * The block number or timestamp at which this transaction is unlocked.
     * </pre>
     *
     * <code>uint32 lockTime = 2;</code>
     * @return The lockTime.
     */
    @java.lang.Override
    public int getLockTime() {
      return lockTime_;
    }
    /**
     * <pre>
     * The block number or timestamp at which this transaction is unlocked.
     * </pre>
     *
     * <code>uint32 lockTime = 2;</code>
     * @param value The lockTime to set.
     */
    private void setLockTime(int value) {
      
      lockTime_ = value;
    }
    /**
     * <pre>
     * The block number or timestamp at which this transaction is unlocked.
     * </pre>
     *
     * <code>uint32 lockTime = 2;</code>
     */
    private void clearLockTime() {
      
      lockTime_ = 0;
    }

    public static final int INPUTS_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<wallet.core.jni.proto.Bitcoin.TransactionInput> inputs_;
    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    @java.lang.Override
    public java.util.List<wallet.core.jni.proto.Bitcoin.TransactionInput> getInputsList() {
      return inputs_;
    }
    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    public java.util.List<? extends wallet.core.jni.proto.Bitcoin.TransactionInputOrBuilder> 
        getInputsOrBuilderList() {
      return inputs_;
    }
    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    @java.lang.Override
    public int getInputsCount() {
      return inputs_.size();
    }
    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    @java.lang.Override
    public wallet.core.jni.proto.Bitcoin.TransactionInput getInputs(int index) {
      return inputs_.get(index);
    }
    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    public wallet.core.jni.proto.Bitcoin.TransactionInputOrBuilder getInputsOrBuilder(
        int index) {
      return inputs_.get(index);
    }
    private void ensureInputsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<wallet.core.jni.proto.Bitcoin.TransactionInput> tmp = inputs_;
      if (!tmp.isModifiable()) {
        inputs_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    private void setInputs(
        int index, wallet.core.jni.proto.Bitcoin.TransactionInput value) {
      value.getClass();
  ensureInputsIsMutable();
      inputs_.set(index, value);
    }
    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    private void addInputs(wallet.core.jni.proto.Bitcoin.TransactionInput value) {
      value.getClass();
  ensureInputsIsMutable();
      inputs_.add(value);
    }
    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    private void addInputs(
        int index, wallet.core.jni.proto.Bitcoin.TransactionInput value) {
      value.getClass();
  ensureInputsIsMutable();
      inputs_.add(index, value);
    }
    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    private void addAllInputs(
        java.lang.Iterable<? extends wallet.core.jni.proto.Bitcoin.TransactionInput> values) {
      ensureInputsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, inputs_);
    }
    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    private void clearInputs() {
      inputs_ = emptyProtobufList();
    }
    /**
     * <pre>
     * A list of 1 or more transaction inputs or sources for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
     */
    private void removeInputs(int index) {
      ensureInputsIsMutable();
      inputs_.remove(index);
    }

    public static final int OUTPUTS_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.ProtobufList<wallet.core.jni.proto.Bitcoin.TransactionOutput> outputs_;
    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    @java.lang.Override
    public java.util.List<wallet.core.jni.proto.Bitcoin.TransactionOutput> getOutputsList() {
      return outputs_;
    }
    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    public java.util.List<? extends wallet.core.jni.proto.Bitcoin.TransactionOutputOrBuilder> 
        getOutputsOrBuilderList() {
      return outputs_;
    }
    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    @java.lang.Override
    public int getOutputsCount() {
      return outputs_.size();
    }
    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    @java.lang.Override
    public wallet.core.jni.proto.Bitcoin.TransactionOutput getOutputs(int index) {
      return outputs_.get(index);
    }
    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    public wallet.core.jni.proto.Bitcoin.TransactionOutputOrBuilder getOutputsOrBuilder(
        int index) {
      return outputs_.get(index);
    }
    private void ensureOutputsIsMutable() {
      com.google.protobuf.Internal.ProtobufList<wallet.core.jni.proto.Bitcoin.TransactionOutput> tmp = outputs_;
      if (!tmp.isModifiable()) {
        outputs_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    private void setOutputs(
        int index, wallet.core.jni.proto.Bitcoin.TransactionOutput value) {
      value.getClass();
  ensureOutputsIsMutable();
      outputs_.set(index, value);
    }
    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    private void addOutputs(wallet.core.jni.proto.Bitcoin.TransactionOutput value) {
      value.getClass();
  ensureOutputsIsMutable();
      outputs_.add(value);
    }
    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    private void addOutputs(
        int index, wallet.core.jni.proto.Bitcoin.TransactionOutput value) {
      value.getClass();
  ensureOutputsIsMutable();
      outputs_.add(index, value);
    }
    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    private void addAllOutputs(
        java.lang.Iterable<? extends wallet.core.jni.proto.Bitcoin.TransactionOutput> values) {
      ensureOutputsIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, outputs_);
    }
    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    private void clearOutputs() {
      outputs_ = emptyProtobufList();
    }
    /**
     * <pre>
     * A list of 1 or more transaction outputs or destinations for coins.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
     */
    private void removeOutputs(int index) {
      ensureOutputsIsMutable();
      outputs_.remove(index);
    }

    public static wallet.core.jni.proto.Bitcoin.Transaction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.Transaction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.Transaction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.Transaction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.Transaction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.Transaction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.Transaction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.Transaction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.Transaction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.Transaction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.Transaction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.Transaction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(wallet.core.jni.proto.Bitcoin.Transaction prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * A transaction, with its inputs and outputs
     * </pre>
     *
     * Protobuf type {@code TW.Bitcoin.Proto.Transaction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          wallet.core.jni.proto.Bitcoin.Transaction, Builder> implements
        // @@protoc_insertion_point(builder_implements:TW.Bitcoin.Proto.Transaction)
        wallet.core.jni.proto.Bitcoin.TransactionOrBuilder {
      // Construct using wallet.core.jni.proto.Bitcoin.Transaction.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Transaction data format version.
       * </pre>
       *
       * <code>sint32 version = 1;</code>
       * @return The version.
       */
      @java.lang.Override
      public int getVersion() {
        return instance.getVersion();
      }
      /**
       * <pre>
       * Transaction data format version.
       * </pre>
       *
       * <code>sint32 version = 1;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(int value) {
        copyOnWrite();
        instance.setVersion(value);
        return this;
      }
      /**
       * <pre>
       * Transaction data format version.
       * </pre>
       *
       * <code>sint32 version = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        copyOnWrite();
        instance.clearVersion();
        return this;
      }

      /**
       * <pre>
       * The block number or timestamp at which this transaction is unlocked.
       * </pre>
       *
       * <code>uint32 lockTime = 2;</code>
       * @return The lockTime.
       */
      @java.lang.Override
      public int getLockTime() {
        return instance.getLockTime();
      }
      /**
       * <pre>
       * The block number or timestamp at which this transaction is unlocked.
       * </pre>
       *
       * <code>uint32 lockTime = 2;</code>
       * @param value The lockTime to set.
       * @return This builder for chaining.
       */
      public Builder setLockTime(int value) {
        copyOnWrite();
        instance.setLockTime(value);
        return this;
      }
      /**
       * <pre>
       * The block number or timestamp at which this transaction is unlocked.
       * </pre>
       *
       * <code>uint32 lockTime = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLockTime() {
        copyOnWrite();
        instance.clearLockTime();
        return this;
      }

      /**
       * <pre>
       * A list of 1 or more transaction inputs or sources for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
       */
      @java.lang.Override
      public java.util.List<wallet.core.jni.proto.Bitcoin.TransactionInput> getInputsList() {
        return java.util.Collections.unmodifiableList(
            instance.getInputsList());
      }
      /**
       * <pre>
       * A list of 1 or more transaction inputs or sources for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
       */
      @java.lang.Override
      public int getInputsCount() {
        return instance.getInputsCount();
      }/**
       * <pre>
       * A list of 1 or more transaction inputs or sources for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
       */
      @java.lang.Override
      public wallet.core.jni.proto.Bitcoin.TransactionInput getInputs(int index) {
        return instance.getInputs(index);
      }
      /**
       * <pre>
       * A list of 1 or more transaction inputs or sources for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
       */
      public Builder setInputs(
          int index, wallet.core.jni.proto.Bitcoin.TransactionInput value) {
        copyOnWrite();
        instance.setInputs(index, value);
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction inputs or sources for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
       */
      public Builder setInputs(
          int index, wallet.core.jni.proto.Bitcoin.TransactionInput.Builder builderForValue) {
        copyOnWrite();
        instance.setInputs(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction inputs or sources for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
       */
      public Builder addInputs(wallet.core.jni.proto.Bitcoin.TransactionInput value) {
        copyOnWrite();
        instance.addInputs(value);
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction inputs or sources for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
       */
      public Builder addInputs(
          int index, wallet.core.jni.proto.Bitcoin.TransactionInput value) {
        copyOnWrite();
        instance.addInputs(index, value);
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction inputs or sources for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
       */
      public Builder addInputs(
          wallet.core.jni.proto.Bitcoin.TransactionInput.Builder builderForValue) {
        copyOnWrite();
        instance.addInputs(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction inputs or sources for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
       */
      public Builder addInputs(
          int index, wallet.core.jni.proto.Bitcoin.TransactionInput.Builder builderForValue) {
        copyOnWrite();
        instance.addInputs(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction inputs or sources for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
       */
      public Builder addAllInputs(
          java.lang.Iterable<? extends wallet.core.jni.proto.Bitcoin.TransactionInput> values) {
        copyOnWrite();
        instance.addAllInputs(values);
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction inputs or sources for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
       */
      public Builder clearInputs() {
        copyOnWrite();
        instance.clearInputs();
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction inputs or sources for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionInput inputs = 3;</code>
       */
      public Builder removeInputs(int index) {
        copyOnWrite();
        instance.removeInputs(index);
        return this;
      }

      /**
       * <pre>
       * A list of 1 or more transaction outputs or destinations for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
       */
      @java.lang.Override
      public java.util.List<wallet.core.jni.proto.Bitcoin.TransactionOutput> getOutputsList() {
        return java.util.Collections.unmodifiableList(
            instance.getOutputsList());
      }
      /**
       * <pre>
       * A list of 1 or more transaction outputs or destinations for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
       */
      @java.lang.Override
      public int getOutputsCount() {
        return instance.getOutputsCount();
      }/**
       * <pre>
       * A list of 1 or more transaction outputs or destinations for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
       */
      @java.lang.Override
      public wallet.core.jni.proto.Bitcoin.TransactionOutput getOutputs(int index) {
        return instance.getOutputs(index);
      }
      /**
       * <pre>
       * A list of 1 or more transaction outputs or destinations for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
       */
      public Builder setOutputs(
          int index, wallet.core.jni.proto.Bitcoin.TransactionOutput value) {
        copyOnWrite();
        instance.setOutputs(index, value);
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction outputs or destinations for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
       */
      public Builder setOutputs(
          int index, wallet.core.jni.proto.Bitcoin.TransactionOutput.Builder builderForValue) {
        copyOnWrite();
        instance.setOutputs(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction outputs or destinations for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
       */
      public Builder addOutputs(wallet.core.jni.proto.Bitcoin.TransactionOutput value) {
        copyOnWrite();
        instance.addOutputs(value);
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction outputs or destinations for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
       */
      public Builder addOutputs(
          int index, wallet.core.jni.proto.Bitcoin.TransactionOutput value) {
        copyOnWrite();
        instance.addOutputs(index, value);
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction outputs or destinations for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
       */
      public Builder addOutputs(
          wallet.core.jni.proto.Bitcoin.TransactionOutput.Builder builderForValue) {
        copyOnWrite();
        instance.addOutputs(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction outputs or destinations for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
       */
      public Builder addOutputs(
          int index, wallet.core.jni.proto.Bitcoin.TransactionOutput.Builder builderForValue) {
        copyOnWrite();
        instance.addOutputs(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction outputs or destinations for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
       */
      public Builder addAllOutputs(
          java.lang.Iterable<? extends wallet.core.jni.proto.Bitcoin.TransactionOutput> values) {
        copyOnWrite();
        instance.addAllOutputs(values);
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction outputs or destinations for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
       */
      public Builder clearOutputs() {
        copyOnWrite();
        instance.clearOutputs();
        return this;
      }
      /**
       * <pre>
       * A list of 1 or more transaction outputs or destinations for coins.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.TransactionOutput outputs = 4;</code>
       */
      public Builder removeOutputs(int index) {
        copyOnWrite();
        instance.removeOutputs(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TW.Bitcoin.Proto.Transaction)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new wallet.core.jni.proto.Bitcoin.Transaction();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "version_",
              "lockTime_",
              "inputs_",
              wallet.core.jni.proto.Bitcoin.TransactionInput.class,
              "outputs_",
              wallet.core.jni.proto.Bitcoin.TransactionOutput.class,
            };
            java.lang.String info =
                "\u0000\u0004\u0000\u0000\u0001\u0004\u0004\u0000\u0002\u0000\u0001\u000f\u0002\u000b" +
                "\u0003\u001b\u0004\u001b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<wallet.core.jni.proto.Bitcoin.Transaction> parser = PARSER;
          if (parser == null) {
            synchronized (wallet.core.jni.proto.Bitcoin.Transaction.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<wallet.core.jni.proto.Bitcoin.Transaction>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.Transaction)
    private static final wallet.core.jni.proto.Bitcoin.Transaction DEFAULT_INSTANCE;
    static {
      Transaction defaultInstance = new Transaction();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        Transaction.class, defaultInstance);
    }

    public static wallet.core.jni.proto.Bitcoin.Transaction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Transaction> PARSER;

    public static com.google.protobuf.Parser<Transaction> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TransactionInputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TW.Bitcoin.Proto.TransactionInput)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Reference to the previous transaction's output.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
     * @return Whether the previousOutput field is set.
     */
    boolean hasPreviousOutput();
    /**
     * <pre>
     * Reference to the previous transaction's output.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
     * @return The previousOutput.
     */
    wallet.core.jni.proto.Bitcoin.OutPoint getPreviousOutput();

    /**
     * <pre>
     * Transaction version as defined by the sender.
     * </pre>
     *
     * <code>uint32 sequence = 2;</code>
     * @return The sequence.
     */
    int getSequence();

    /**
     * <pre>
     * Computational script for confirming transaction authorization.
     * </pre>
     *
     * <code>bytes script = 3;</code>
     * @return The script.
     */
    com.google.protobuf.ByteString getScript();
  }
  /**
   * <pre>
   * Bitcoin transaction input.
   * </pre>
   *
   * Protobuf type {@code TW.Bitcoin.Proto.TransactionInput}
   */
  public  static final class TransactionInput extends
      com.google.protobuf.GeneratedMessageLite<
          TransactionInput, TransactionInput.Builder> implements
      // @@protoc_insertion_point(message_implements:TW.Bitcoin.Proto.TransactionInput)
      TransactionInputOrBuilder {
    private TransactionInput() {
      script_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int PREVIOUSOUTPUT_FIELD_NUMBER = 1;
    private wallet.core.jni.proto.Bitcoin.OutPoint previousOutput_;
    /**
     * <pre>
     * Reference to the previous transaction's output.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
     */
    @java.lang.Override
    public boolean hasPreviousOutput() {
      return previousOutput_ != null;
    }
    /**
     * <pre>
     * Reference to the previous transaction's output.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
     */
    @java.lang.Override
    public wallet.core.jni.proto.Bitcoin.OutPoint getPreviousOutput() {
      return previousOutput_ == null ? wallet.core.jni.proto.Bitcoin.OutPoint.getDefaultInstance() : previousOutput_;
    }
    /**
     * <pre>
     * Reference to the previous transaction's output.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
     */
    private void setPreviousOutput(wallet.core.jni.proto.Bitcoin.OutPoint value) {
      value.getClass();
  previousOutput_ = value;
      
      }
    /**
     * <pre>
     * Reference to the previous transaction's output.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergePreviousOutput(wallet.core.jni.proto.Bitcoin.OutPoint value) {
      value.getClass();
  if (previousOutput_ != null &&
          previousOutput_ != wallet.core.jni.proto.Bitcoin.OutPoint.getDefaultInstance()) {
        previousOutput_ =
          wallet.core.jni.proto.Bitcoin.OutPoint.newBuilder(previousOutput_).mergeFrom(value).buildPartial();
      } else {
        previousOutput_ = value;
      }
      
    }
    /**
     * <pre>
     * Reference to the previous transaction's output.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
     */
    private void clearPreviousOutput() {  previousOutput_ = null;
      
    }

    public static final int SEQUENCE_FIELD_NUMBER = 2;
    private int sequence_;
    /**
     * <pre>
     * Transaction version as defined by the sender.
     * </pre>
     *
     * <code>uint32 sequence = 2;</code>
     * @return The sequence.
     */
    @java.lang.Override
    public int getSequence() {
      return sequence_;
    }
    /**
     * <pre>
     * Transaction version as defined by the sender.
     * </pre>
     *
     * <code>uint32 sequence = 2;</code>
     * @param value The sequence to set.
     */
    private void setSequence(int value) {
      
      sequence_ = value;
    }
    /**
     * <pre>
     * Transaction version as defined by the sender.
     * </pre>
     *
     * <code>uint32 sequence = 2;</code>
     */
    private void clearSequence() {
      
      sequence_ = 0;
    }

    public static final int SCRIPT_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString script_;
    /**
     * <pre>
     * Computational script for confirming transaction authorization.
     * </pre>
     *
     * <code>bytes script = 3;</code>
     * @return The script.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getScript() {
      return script_;
    }
    /**
     * <pre>
     * Computational script for confirming transaction authorization.
     * </pre>
     *
     * <code>bytes script = 3;</code>
     * @param value The script to set.
     */
    private void setScript(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      script_ = value;
    }
    /**
     * <pre>
     * Computational script for confirming transaction authorization.
     * </pre>
     *
     * <code>bytes script = 3;</code>
     */
    private void clearScript() {
      
      script_ = getDefaultInstance().getScript();
    }

    public static wallet.core.jni.proto.Bitcoin.TransactionInput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionInput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionInput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionInput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionInput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionInput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionInput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionInput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionInput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionInput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionInput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionInput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(wallet.core.jni.proto.Bitcoin.TransactionInput prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Bitcoin transaction input.
     * </pre>
     *
     * Protobuf type {@code TW.Bitcoin.Proto.TransactionInput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          wallet.core.jni.proto.Bitcoin.TransactionInput, Builder> implements
        // @@protoc_insertion_point(builder_implements:TW.Bitcoin.Proto.TransactionInput)
        wallet.core.jni.proto.Bitcoin.TransactionInputOrBuilder {
      // Construct using wallet.core.jni.proto.Bitcoin.TransactionInput.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Reference to the previous transaction's output.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
       */
      @java.lang.Override
      public boolean hasPreviousOutput() {
        return instance.hasPreviousOutput();
      }
      /**
       * <pre>
       * Reference to the previous transaction's output.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
       */
      @java.lang.Override
      public wallet.core.jni.proto.Bitcoin.OutPoint getPreviousOutput() {
        return instance.getPreviousOutput();
      }
      /**
       * <pre>
       * Reference to the previous transaction's output.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
       */
      public Builder setPreviousOutput(wallet.core.jni.proto.Bitcoin.OutPoint value) {
        copyOnWrite();
        instance.setPreviousOutput(value);
        return this;
        }
      /**
       * <pre>
       * Reference to the previous transaction's output.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
       */
      public Builder setPreviousOutput(
          wallet.core.jni.proto.Bitcoin.OutPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setPreviousOutput(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Reference to the previous transaction's output.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
       */
      public Builder mergePreviousOutput(wallet.core.jni.proto.Bitcoin.OutPoint value) {
        copyOnWrite();
        instance.mergePreviousOutput(value);
        return this;
      }
      /**
       * <pre>
       * Reference to the previous transaction's output.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.OutPoint previousOutput = 1;</code>
       */
      public Builder clearPreviousOutput() {  copyOnWrite();
        instance.clearPreviousOutput();
        return this;
      }

      /**
       * <pre>
       * Transaction version as defined by the sender.
       * </pre>
       *
       * <code>uint32 sequence = 2;</code>
       * @return The sequence.
       */
      @java.lang.Override
      public int getSequence() {
        return instance.getSequence();
      }
      /**
       * <pre>
       * Transaction version as defined by the sender.
       * </pre>
       *
       * <code>uint32 sequence = 2;</code>
       * @param value The sequence to set.
       * @return This builder for chaining.
       */
      public Builder setSequence(int value) {
        copyOnWrite();
        instance.setSequence(value);
        return this;
      }
      /**
       * <pre>
       * Transaction version as defined by the sender.
       * </pre>
       *
       * <code>uint32 sequence = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSequence() {
        copyOnWrite();
        instance.clearSequence();
        return this;
      }

      /**
       * <pre>
       * Computational script for confirming transaction authorization.
       * </pre>
       *
       * <code>bytes script = 3;</code>
       * @return The script.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getScript() {
        return instance.getScript();
      }
      /**
       * <pre>
       * Computational script for confirming transaction authorization.
       * </pre>
       *
       * <code>bytes script = 3;</code>
       * @param value The script to set.
       * @return This builder for chaining.
       */
      public Builder setScript(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setScript(value);
        return this;
      }
      /**
       * <pre>
       * Computational script for confirming transaction authorization.
       * </pre>
       *
       * <code>bytes script = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearScript() {
        copyOnWrite();
        instance.clearScript();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TW.Bitcoin.Proto.TransactionInput)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new wallet.core.jni.proto.Bitcoin.TransactionInput();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "previousOutput_",
              "sequence_",
              "script_",
            };
            java.lang.String info =
                "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001\t\u0002\u000b" +
                "\u0003\n";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<wallet.core.jni.proto.Bitcoin.TransactionInput> parser = PARSER;
          if (parser == null) {
            synchronized (wallet.core.jni.proto.Bitcoin.TransactionInput.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<wallet.core.jni.proto.Bitcoin.TransactionInput>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.TransactionInput)
    private static final wallet.core.jni.proto.Bitcoin.TransactionInput DEFAULT_INSTANCE;
    static {
      TransactionInput defaultInstance = new TransactionInput();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TransactionInput.class, defaultInstance);
    }

    public static wallet.core.jni.proto.Bitcoin.TransactionInput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TransactionInput> PARSER;

    public static com.google.protobuf.Parser<TransactionInput> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface OutPointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TW.Bitcoin.Proto.OutPoint)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The hash of the referenced transaction (network byte order, usually needs to be reversed).
     * </pre>
     *
     * <code>bytes hash = 1;</code>
     * @return The hash.
     */
    com.google.protobuf.ByteString getHash();

    /**
     * <pre>
     * The index of the specific output in the transaction.
     * </pre>
     *
     * <code>uint32 index = 2;</code>
     * @return The index.
     */
    int getIndex();

    /**
     * <pre>
     * Transaction version as defined by the sender.
     * </pre>
     *
     * <code>uint32 sequence = 3;</code>
     * @return The sequence.
     */
    int getSequence();
  }
  /**
   * <pre>
   * Bitcoin transaction out-point reference.
   * </pre>
   *
   * Protobuf type {@code TW.Bitcoin.Proto.OutPoint}
   */
  public  static final class OutPoint extends
      com.google.protobuf.GeneratedMessageLite<
          OutPoint, OutPoint.Builder> implements
      // @@protoc_insertion_point(message_implements:TW.Bitcoin.Proto.OutPoint)
      OutPointOrBuilder {
    private OutPoint() {
      hash_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int HASH_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString hash_;
    /**
     * <pre>
     * The hash of the referenced transaction (network byte order, usually needs to be reversed).
     * </pre>
     *
     * <code>bytes hash = 1;</code>
     * @return The hash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getHash() {
      return hash_;
    }
    /**
     * <pre>
     * The hash of the referenced transaction (network byte order, usually needs to be reversed).
     * </pre>
     *
     * <code>bytes hash = 1;</code>
     * @param value The hash to set.
     */
    private void setHash(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      hash_ = value;
    }
    /**
     * <pre>
     * The hash of the referenced transaction (network byte order, usually needs to be reversed).
     * </pre>
     *
     * <code>bytes hash = 1;</code>
     */
    private void clearHash() {
      
      hash_ = getDefaultInstance().getHash();
    }

    public static final int INDEX_FIELD_NUMBER = 2;
    private int index_;
    /**
     * <pre>
     * The index of the specific output in the transaction.
     * </pre>
     *
     * <code>uint32 index = 2;</code>
     * @return The index.
     */
    @java.lang.Override
    public int getIndex() {
      return index_;
    }
    /**
     * <pre>
     * The index of the specific output in the transaction.
     * </pre>
     *
     * <code>uint32 index = 2;</code>
     * @param value The index to set.
     */
    private void setIndex(int value) {
      
      index_ = value;
    }
    /**
     * <pre>
     * The index of the specific output in the transaction.
     * </pre>
     *
     * <code>uint32 index = 2;</code>
     */
    private void clearIndex() {
      
      index_ = 0;
    }

    public static final int SEQUENCE_FIELD_NUMBER = 3;
    private int sequence_;
    /**
     * <pre>
     * Transaction version as defined by the sender.
     * </pre>
     *
     * <code>uint32 sequence = 3;</code>
     * @return The sequence.
     */
    @java.lang.Override
    public int getSequence() {
      return sequence_;
    }
    /**
     * <pre>
     * Transaction version as defined by the sender.
     * </pre>
     *
     * <code>uint32 sequence = 3;</code>
     * @param value The sequence to set.
     */
    private void setSequence(int value) {
      
      sequence_ = value;
    }
    /**
     * <pre>
     * Transaction version as defined by the sender.
     * </pre>
     *
     * <code>uint32 sequence = 3;</code>
     */
    private void clearSequence() {
      
      sequence_ = 0;
    }

    public static wallet.core.jni.proto.Bitcoin.OutPoint parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.OutPoint parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.OutPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.OutPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.OutPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.OutPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.OutPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.OutPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.OutPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.OutPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.OutPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.OutPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(wallet.core.jni.proto.Bitcoin.OutPoint prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Bitcoin transaction out-point reference.
     * </pre>
     *
     * Protobuf type {@code TW.Bitcoin.Proto.OutPoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          wallet.core.jni.proto.Bitcoin.OutPoint, Builder> implements
        // @@protoc_insertion_point(builder_implements:TW.Bitcoin.Proto.OutPoint)
        wallet.core.jni.proto.Bitcoin.OutPointOrBuilder {
      // Construct using wallet.core.jni.proto.Bitcoin.OutPoint.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The hash of the referenced transaction (network byte order, usually needs to be reversed).
       * </pre>
       *
       * <code>bytes hash = 1;</code>
       * @return The hash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getHash() {
        return instance.getHash();
      }
      /**
       * <pre>
       * The hash of the referenced transaction (network byte order, usually needs to be reversed).
       * </pre>
       *
       * <code>bytes hash = 1;</code>
       * @param value The hash to set.
       * @return This builder for chaining.
       */
      public Builder setHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setHash(value);
        return this;
      }
      /**
       * <pre>
       * The hash of the referenced transaction (network byte order, usually needs to be reversed).
       * </pre>
       *
       * <code>bytes hash = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearHash() {
        copyOnWrite();
        instance.clearHash();
        return this;
      }

      /**
       * <pre>
       * The index of the specific output in the transaction.
       * </pre>
       *
       * <code>uint32 index = 2;</code>
       * @return The index.
       */
      @java.lang.Override
      public int getIndex() {
        return instance.getIndex();
      }
      /**
       * <pre>
       * The index of the specific output in the transaction.
       * </pre>
       *
       * <code>uint32 index = 2;</code>
       * @param value The index to set.
       * @return This builder for chaining.
       */
      public Builder setIndex(int value) {
        copyOnWrite();
        instance.setIndex(value);
        return this;
      }
      /**
       * <pre>
       * The index of the specific output in the transaction.
       * </pre>
       *
       * <code>uint32 index = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearIndex() {
        copyOnWrite();
        instance.clearIndex();
        return this;
      }

      /**
       * <pre>
       * Transaction version as defined by the sender.
       * </pre>
       *
       * <code>uint32 sequence = 3;</code>
       * @return The sequence.
       */
      @java.lang.Override
      public int getSequence() {
        return instance.getSequence();
      }
      /**
       * <pre>
       * Transaction version as defined by the sender.
       * </pre>
       *
       * <code>uint32 sequence = 3;</code>
       * @param value The sequence to set.
       * @return This builder for chaining.
       */
      public Builder setSequence(int value) {
        copyOnWrite();
        instance.setSequence(value);
        return this;
      }
      /**
       * <pre>
       * Transaction version as defined by the sender.
       * </pre>
       *
       * <code>uint32 sequence = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSequence() {
        copyOnWrite();
        instance.clearSequence();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TW.Bitcoin.Proto.OutPoint)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new wallet.core.jni.proto.Bitcoin.OutPoint();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "hash_",
              "index_",
              "sequence_",
            };
            java.lang.String info =
                "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001\n\u0002\u000b" +
                "\u0003\u000b";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<wallet.core.jni.proto.Bitcoin.OutPoint> parser = PARSER;
          if (parser == null) {
            synchronized (wallet.core.jni.proto.Bitcoin.OutPoint.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<wallet.core.jni.proto.Bitcoin.OutPoint>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.OutPoint)
    private static final wallet.core.jni.proto.Bitcoin.OutPoint DEFAULT_INSTANCE;
    static {
      OutPoint defaultInstance = new OutPoint();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        OutPoint.class, defaultInstance);
    }

    public static wallet.core.jni.proto.Bitcoin.OutPoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<OutPoint> PARSER;

    public static com.google.protobuf.Parser<OutPoint> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TransactionOutputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TW.Bitcoin.Proto.TransactionOutput)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Transaction amount.
     * </pre>
     *
     * <code>int64 value = 1;</code>
     * @return The value.
     */
    long getValue();

    /**
     * <pre>
     * Usually contains the public key as a Bitcoin script setting up conditions to claim this output.
     * </pre>
     *
     * <code>bytes script = 2;</code>
     * @return The script.
     */
    com.google.protobuf.ByteString getScript();
  }
  /**
   * <pre>
   * Bitcoin transaction output.
   * </pre>
   *
   * Protobuf type {@code TW.Bitcoin.Proto.TransactionOutput}
   */
  public  static final class TransactionOutput extends
      com.google.protobuf.GeneratedMessageLite<
          TransactionOutput, TransactionOutput.Builder> implements
      // @@protoc_insertion_point(message_implements:TW.Bitcoin.Proto.TransactionOutput)
      TransactionOutputOrBuilder {
    private TransactionOutput() {
      script_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int VALUE_FIELD_NUMBER = 1;
    private long value_;
    /**
     * <pre>
     * Transaction amount.
     * </pre>
     *
     * <code>int64 value = 1;</code>
     * @return The value.
     */
    @java.lang.Override
    public long getValue() {
      return value_;
    }
    /**
     * <pre>
     * Transaction amount.
     * </pre>
     *
     * <code>int64 value = 1;</code>
     * @param value The value to set.
     */
    private void setValue(long value) {
      
      value_ = value;
    }
    /**
     * <pre>
     * Transaction amount.
     * </pre>
     *
     * <code>int64 value = 1;</code>
     */
    private void clearValue() {
      
      value_ = 0L;
    }

    public static final int SCRIPT_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString script_;
    /**
     * <pre>
     * Usually contains the public key as a Bitcoin script setting up conditions to claim this output.
     * </pre>
     *
     * <code>bytes script = 2;</code>
     * @return The script.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getScript() {
      return script_;
    }
    /**
     * <pre>
     * Usually contains the public key as a Bitcoin script setting up conditions to claim this output.
     * </pre>
     *
     * <code>bytes script = 2;</code>
     * @param value The script to set.
     */
    private void setScript(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      script_ = value;
    }
    /**
     * <pre>
     * Usually contains the public key as a Bitcoin script setting up conditions to claim this output.
     * </pre>
     *
     * <code>bytes script = 2;</code>
     */
    private void clearScript() {
      
      script_ = getDefaultInstance().getScript();
    }

    public static wallet.core.jni.proto.Bitcoin.TransactionOutput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionOutput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionOutput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionOutput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionOutput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionOutput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionOutput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionOutput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionOutput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionOutput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionOutput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionOutput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(wallet.core.jni.proto.Bitcoin.TransactionOutput prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Bitcoin transaction output.
     * </pre>
     *
     * Protobuf type {@code TW.Bitcoin.Proto.TransactionOutput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          wallet.core.jni.proto.Bitcoin.TransactionOutput, Builder> implements
        // @@protoc_insertion_point(builder_implements:TW.Bitcoin.Proto.TransactionOutput)
        wallet.core.jni.proto.Bitcoin.TransactionOutputOrBuilder {
      // Construct using wallet.core.jni.proto.Bitcoin.TransactionOutput.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Transaction amount.
       * </pre>
       *
       * <code>int64 value = 1;</code>
       * @return The value.
       */
      @java.lang.Override
      public long getValue() {
        return instance.getValue();
      }
      /**
       * <pre>
       * Transaction amount.
       * </pre>
       *
       * <code>int64 value = 1;</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(long value) {
        copyOnWrite();
        instance.setValue(value);
        return this;
      }
      /**
       * <pre>
       * Transaction amount.
       * </pre>
       *
       * <code>int64 value = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        copyOnWrite();
        instance.clearValue();
        return this;
      }

      /**
       * <pre>
       * Usually contains the public key as a Bitcoin script setting up conditions to claim this output.
       * </pre>
       *
       * <code>bytes script = 2;</code>
       * @return The script.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getScript() {
        return instance.getScript();
      }
      /**
       * <pre>
       * Usually contains the public key as a Bitcoin script setting up conditions to claim this output.
       * </pre>
       *
       * <code>bytes script = 2;</code>
       * @param value The script to set.
       * @return This builder for chaining.
       */
      public Builder setScript(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setScript(value);
        return this;
      }
      /**
       * <pre>
       * Usually contains the public key as a Bitcoin script setting up conditions to claim this output.
       * </pre>
       *
       * <code>bytes script = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearScript() {
        copyOnWrite();
        instance.clearScript();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TW.Bitcoin.Proto.TransactionOutput)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new wallet.core.jni.proto.Bitcoin.TransactionOutput();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "value_",
              "script_",
            };
            java.lang.String info =
                "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\u0002\u0002\n" +
                "";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<wallet.core.jni.proto.Bitcoin.TransactionOutput> parser = PARSER;
          if (parser == null) {
            synchronized (wallet.core.jni.proto.Bitcoin.TransactionOutput.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<wallet.core.jni.proto.Bitcoin.TransactionOutput>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.TransactionOutput)
    private static final wallet.core.jni.proto.Bitcoin.TransactionOutput DEFAULT_INSTANCE;
    static {
      TransactionOutput defaultInstance = new TransactionOutput();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TransactionOutput.class, defaultInstance);
    }

    public static wallet.core.jni.proto.Bitcoin.TransactionOutput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TransactionOutput> PARSER;

    public static com.google.protobuf.Parser<TransactionOutput> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface UnspentTransactionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TW.Bitcoin.Proto.UnspentTransaction)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The unspent output
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
     * @return Whether the outPoint field is set.
     */
    boolean hasOutPoint();
    /**
     * <pre>
     * The unspent output
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
     * @return The outPoint.
     */
    wallet.core.jni.proto.Bitcoin.OutPoint getOutPoint();

    /**
     * <pre>
     * Script for claiming this UTXO
     * </pre>
     *
     * <code>bytes script = 2;</code>
     * @return The script.
     */
    com.google.protobuf.ByteString getScript();

    /**
     * <pre>
     * Amount of the UTXO
     * </pre>
     *
     * <code>int64 amount = 3;</code>
     * @return The amount.
     */
    long getAmount();
  }
  /**
   * <pre>
   * An unspent transaction output, that can serve as input to a transaction
   * </pre>
   *
   * Protobuf type {@code TW.Bitcoin.Proto.UnspentTransaction}
   */
  public  static final class UnspentTransaction extends
      com.google.protobuf.GeneratedMessageLite<
          UnspentTransaction, UnspentTransaction.Builder> implements
      // @@protoc_insertion_point(message_implements:TW.Bitcoin.Proto.UnspentTransaction)
      UnspentTransactionOrBuilder {
    private UnspentTransaction() {
      script_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int OUT_POINT_FIELD_NUMBER = 1;
    private wallet.core.jni.proto.Bitcoin.OutPoint outPoint_;
    /**
     * <pre>
     * The unspent output
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
     */
    @java.lang.Override
    public boolean hasOutPoint() {
      return outPoint_ != null;
    }
    /**
     * <pre>
     * The unspent output
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
     */
    @java.lang.Override
    public wallet.core.jni.proto.Bitcoin.OutPoint getOutPoint() {
      return outPoint_ == null ? wallet.core.jni.proto.Bitcoin.OutPoint.getDefaultInstance() : outPoint_;
    }
    /**
     * <pre>
     * The unspent output
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
     */
    private void setOutPoint(wallet.core.jni.proto.Bitcoin.OutPoint value) {
      value.getClass();
  outPoint_ = value;
      
      }
    /**
     * <pre>
     * The unspent output
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeOutPoint(wallet.core.jni.proto.Bitcoin.OutPoint value) {
      value.getClass();
  if (outPoint_ != null &&
          outPoint_ != wallet.core.jni.proto.Bitcoin.OutPoint.getDefaultInstance()) {
        outPoint_ =
          wallet.core.jni.proto.Bitcoin.OutPoint.newBuilder(outPoint_).mergeFrom(value).buildPartial();
      } else {
        outPoint_ = value;
      }
      
    }
    /**
     * <pre>
     * The unspent output
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
     */
    private void clearOutPoint() {  outPoint_ = null;
      
    }

    public static final int SCRIPT_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString script_;
    /**
     * <pre>
     * Script for claiming this UTXO
     * </pre>
     *
     * <code>bytes script = 2;</code>
     * @return The script.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getScript() {
      return script_;
    }
    /**
     * <pre>
     * Script for claiming this UTXO
     * </pre>
     *
     * <code>bytes script = 2;</code>
     * @param value The script to set.
     */
    private void setScript(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      script_ = value;
    }
    /**
     * <pre>
     * Script for claiming this UTXO
     * </pre>
     *
     * <code>bytes script = 2;</code>
     */
    private void clearScript() {
      
      script_ = getDefaultInstance().getScript();
    }

    public static final int AMOUNT_FIELD_NUMBER = 3;
    private long amount_;
    /**
     * <pre>
     * Amount of the UTXO
     * </pre>
     *
     * <code>int64 amount = 3;</code>
     * @return The amount.
     */
    @java.lang.Override
    public long getAmount() {
      return amount_;
    }
    /**
     * <pre>
     * Amount of the UTXO
     * </pre>
     *
     * <code>int64 amount = 3;</code>
     * @param value The amount to set.
     */
    private void setAmount(long value) {
      
      amount_ = value;
    }
    /**
     * <pre>
     * Amount of the UTXO
     * </pre>
     *
     * <code>int64 amount = 3;</code>
     */
    private void clearAmount() {
      
      amount_ = 0L;
    }

    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(wallet.core.jni.proto.Bitcoin.UnspentTransaction prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * An unspent transaction output, that can serve as input to a transaction
     * </pre>
     *
     * Protobuf type {@code TW.Bitcoin.Proto.UnspentTransaction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          wallet.core.jni.proto.Bitcoin.UnspentTransaction, Builder> implements
        // @@protoc_insertion_point(builder_implements:TW.Bitcoin.Proto.UnspentTransaction)
        wallet.core.jni.proto.Bitcoin.UnspentTransactionOrBuilder {
      // Construct using wallet.core.jni.proto.Bitcoin.UnspentTransaction.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The unspent output
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
       */
      @java.lang.Override
      public boolean hasOutPoint() {
        return instance.hasOutPoint();
      }
      /**
       * <pre>
       * The unspent output
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
       */
      @java.lang.Override
      public wallet.core.jni.proto.Bitcoin.OutPoint getOutPoint() {
        return instance.getOutPoint();
      }
      /**
       * <pre>
       * The unspent output
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
       */
      public Builder setOutPoint(wallet.core.jni.proto.Bitcoin.OutPoint value) {
        copyOnWrite();
        instance.setOutPoint(value);
        return this;
        }
      /**
       * <pre>
       * The unspent output
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
       */
      public Builder setOutPoint(
          wallet.core.jni.proto.Bitcoin.OutPoint.Builder builderForValue) {
        copyOnWrite();
        instance.setOutPoint(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * The unspent output
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
       */
      public Builder mergeOutPoint(wallet.core.jni.proto.Bitcoin.OutPoint value) {
        copyOnWrite();
        instance.mergeOutPoint(value);
        return this;
      }
      /**
       * <pre>
       * The unspent output
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.OutPoint out_point = 1;</code>
       */
      public Builder clearOutPoint() {  copyOnWrite();
        instance.clearOutPoint();
        return this;
      }

      /**
       * <pre>
       * Script for claiming this UTXO
       * </pre>
       *
       * <code>bytes script = 2;</code>
       * @return The script.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getScript() {
        return instance.getScript();
      }
      /**
       * <pre>
       * Script for claiming this UTXO
       * </pre>
       *
       * <code>bytes script = 2;</code>
       * @param value The script to set.
       * @return This builder for chaining.
       */
      public Builder setScript(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setScript(value);
        return this;
      }
      /**
       * <pre>
       * Script for claiming this UTXO
       * </pre>
       *
       * <code>bytes script = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearScript() {
        copyOnWrite();
        instance.clearScript();
        return this;
      }

      /**
       * <pre>
       * Amount of the UTXO
       * </pre>
       *
       * <code>int64 amount = 3;</code>
       * @return The amount.
       */
      @java.lang.Override
      public long getAmount() {
        return instance.getAmount();
      }
      /**
       * <pre>
       * Amount of the UTXO
       * </pre>
       *
       * <code>int64 amount = 3;</code>
       * @param value The amount to set.
       * @return This builder for chaining.
       */
      public Builder setAmount(long value) {
        copyOnWrite();
        instance.setAmount(value);
        return this;
      }
      /**
       * <pre>
       * Amount of the UTXO
       * </pre>
       *
       * <code>int64 amount = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearAmount() {
        copyOnWrite();
        instance.clearAmount();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TW.Bitcoin.Proto.UnspentTransaction)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new wallet.core.jni.proto.Bitcoin.UnspentTransaction();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "outPoint_",
              "script_",
              "amount_",
            };
            java.lang.String info =
                "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0000\u0000\u0001\t\u0002\n\u0003" +
                "\u0002";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<wallet.core.jni.proto.Bitcoin.UnspentTransaction> parser = PARSER;
          if (parser == null) {
            synchronized (wallet.core.jni.proto.Bitcoin.UnspentTransaction.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<wallet.core.jni.proto.Bitcoin.UnspentTransaction>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.UnspentTransaction)
    private static final wallet.core.jni.proto.Bitcoin.UnspentTransaction DEFAULT_INSTANCE;
    static {
      UnspentTransaction defaultInstance = new UnspentTransaction();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        UnspentTransaction.class, defaultInstance);
    }

    public static wallet.core.jni.proto.Bitcoin.UnspentTransaction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<UnspentTransaction> PARSER;

    public static com.google.protobuf.Parser<UnspentTransaction> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SigningInputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TW.Bitcoin.Proto.SigningInput)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Hash type to use when signing.
     * </pre>
     *
     * <code>uint32 hash_type = 1;</code>
     * @return The hashType.
     */
    int getHashType();

    /**
     * <pre>
     * Amount to send.  Transaction created will have this amount in its output, 
     * except when use_max_amount is set, in that case this amount is not relevant, maximum possible amount will be used (max avail less fee).
     * If amount is equal or more than the available amount, also max amount will be used.
     * </pre>
     *
     * <code>int64 amount = 2;</code>
     * @return The amount.
     */
    long getAmount();

    /**
     * <pre>
     * Transaction fee rate, satoshis per byte, used to compute required fee (when planning)
     * </pre>
     *
     * <code>int64 byte_fee = 3;</code>
     * @return The byteFee.
     */
    long getByteFee();

    /**
     * <pre>
     * Recipient's address, as string.
     * </pre>
     *
     * <code>string to_address = 4;</code>
     * @return The toAddress.
     */
    java.lang.String getToAddress();
    /**
     * <pre>
     * Recipient's address, as string.
     * </pre>
     *
     * <code>string to_address = 4;</code>
     * @return The bytes for toAddress.
     */
    com.google.protobuf.ByteString
        getToAddressBytes();

    /**
     * <pre>
     * Change address, as string.
     * </pre>
     *
     * <code>string change_address = 5;</code>
     * @return The changeAddress.
     */
    java.lang.String getChangeAddress();
    /**
     * <pre>
     * Change address, as string.
     * </pre>
     *
     * <code>string change_address = 5;</code>
     * @return The bytes for changeAddress.
     */
    com.google.protobuf.ByteString
        getChangeAddressBytes();

    /**
     * <pre>
     * The available secret private key or keys required for signing (32 bytes each).
     * </pre>
     *
     * <code>repeated bytes private_key = 6;</code>
     * @return A list containing the privateKey.
     */
    java.util.List<com.google.protobuf.ByteString> getPrivateKeyList();
    /**
     * <pre>
     * The available secret private key or keys required for signing (32 bytes each).
     * </pre>
     *
     * <code>repeated bytes private_key = 6;</code>
     * @return The count of privateKey.
     */
    int getPrivateKeyCount();
    /**
     * <pre>
     * The available secret private key or keys required for signing (32 bytes each).
     * </pre>
     *
     * <code>repeated bytes private_key = 6;</code>
     * @param index The index of the element to return.
     * @return The privateKey at the given index.
     */
    com.google.protobuf.ByteString getPrivateKey(int index);

    /**
     * <pre>
     * Available redeem scripts indexed by script hash.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; scripts = 7;</code>
     */
    int getScriptsCount();
    /**
     * <pre>
     * Available redeem scripts indexed by script hash.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; scripts = 7;</code>
     */
    boolean containsScripts(
        java.lang.String key);
    /**
     * Use {@link #getScriptsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getScripts();
    /**
     * <pre>
     * Available redeem scripts indexed by script hash.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; scripts = 7;</code>
     */
    java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getScriptsMap();
    /**
     * <pre>
     * Available redeem scripts indexed by script hash.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; scripts = 7;</code>
     */

    com.google.protobuf.ByteString getScriptsOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue);
    /**
     * <pre>
     * Available redeem scripts indexed by script hash.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; scripts = 7;</code>
     */

    com.google.protobuf.ByteString getScriptsOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    java.util.List<wallet.core.jni.proto.Bitcoin.UnspentTransaction> 
        getUtxoList();
    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    wallet.core.jni.proto.Bitcoin.UnspentTransaction getUtxo(int index);
    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    int getUtxoCount();

    /**
     * <pre>
     * Set if sending max amount is requested.
     * </pre>
     *
     * <code>bool use_max_amount = 9;</code>
     * @return The useMaxAmount.
     */
    boolean getUseMaxAmount();

    /**
     * <pre>
     * Coin type (used by forks).
     * </pre>
     *
     * <code>uint32 coin_type = 10;</code>
     * @return The coinType.
     */
    int getCoinType();

    /**
     * <pre>
     * Optional transaction plan. If missing, plan will be computed.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
     * @return Whether the plan field is set.
     */
    boolean hasPlan();
    /**
     * <pre>
     * Optional transaction plan. If missing, plan will be computed.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
     * @return The plan.
     */
    wallet.core.jni.proto.Bitcoin.TransactionPlan getPlan();

    /**
     * <pre>
     * Optional lockTime, default value 0 means no time locking.
     * If all inputs have final (`0xffffffff`) sequence numbers then `lockTime` is irrelevant.
     * Otherwise, the transaction may not be added to a block until after `lockTime`.
     *  value  &lt; 500000000 : Block number at which this transaction is unlocked
     *  value &gt;= 500000000 : UNIX timestamp at which this transaction is unlocked
     * </pre>
     *
     * <code>uint32 lock_time = 12;</code>
     * @return The lockTime.
     */
    int getLockTime();

    /**
     * <pre>
     * Optional zero-amount, OP_RETURN output
     * </pre>
     *
     * <code>bytes output_op_return = 13;</code>
     * @return The outputOpReturn.
     */
    com.google.protobuf.ByteString getOutputOpReturn();
  }
  /**
   * <pre>
   * Input data necessary to create a signed transaction.
   * </pre>
   *
   * Protobuf type {@code TW.Bitcoin.Proto.SigningInput}
   */
  public  static final class SigningInput extends
      com.google.protobuf.GeneratedMessageLite<
          SigningInput, SigningInput.Builder> implements
      // @@protoc_insertion_point(message_implements:TW.Bitcoin.Proto.SigningInput)
      SigningInputOrBuilder {
    private SigningInput() {
      toAddress_ = "";
      changeAddress_ = "";
      privateKey_ = emptyProtobufList();
      utxo_ = emptyProtobufList();
      outputOpReturn_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int HASH_TYPE_FIELD_NUMBER = 1;
    private int hashType_;
    /**
     * <pre>
     * Hash type to use when signing.
     * </pre>
     *
     * <code>uint32 hash_type = 1;</code>
     * @return The hashType.
     */
    @java.lang.Override
    public int getHashType() {
      return hashType_;
    }
    /**
     * <pre>
     * Hash type to use when signing.
     * </pre>
     *
     * <code>uint32 hash_type = 1;</code>
     * @param value The hashType to set.
     */
    private void setHashType(int value) {
      
      hashType_ = value;
    }
    /**
     * <pre>
     * Hash type to use when signing.
     * </pre>
     *
     * <code>uint32 hash_type = 1;</code>
     */
    private void clearHashType() {
      
      hashType_ = 0;
    }

    public static final int AMOUNT_FIELD_NUMBER = 2;
    private long amount_;
    /**
     * <pre>
     * Amount to send.  Transaction created will have this amount in its output, 
     * except when use_max_amount is set, in that case this amount is not relevant, maximum possible amount will be used (max avail less fee).
     * If amount is equal or more than the available amount, also max amount will be used.
     * </pre>
     *
     * <code>int64 amount = 2;</code>
     * @return The amount.
     */
    @java.lang.Override
    public long getAmount() {
      return amount_;
    }
    /**
     * <pre>
     * Amount to send.  Transaction created will have this amount in its output, 
     * except when use_max_amount is set, in that case this amount is not relevant, maximum possible amount will be used (max avail less fee).
     * If amount is equal or more than the available amount, also max amount will be used.
     * </pre>
     *
     * <code>int64 amount = 2;</code>
     * @param value The amount to set.
     */
    private void setAmount(long value) {
      
      amount_ = value;
    }
    /**
     * <pre>
     * Amount to send.  Transaction created will have this amount in its output, 
     * except when use_max_amount is set, in that case this amount is not relevant, maximum possible amount will be used (max avail less fee).
     * If amount is equal or more than the available amount, also max amount will be used.
     * </pre>
     *
     * <code>int64 amount = 2;</code>
     */
    private void clearAmount() {
      
      amount_ = 0L;
    }

    public static final int BYTE_FEE_FIELD_NUMBER = 3;
    private long byteFee_;
    /**
     * <pre>
     * Transaction fee rate, satoshis per byte, used to compute required fee (when planning)
     * </pre>
     *
     * <code>int64 byte_fee = 3;</code>
     * @return The byteFee.
     */
    @java.lang.Override
    public long getByteFee() {
      return byteFee_;
    }
    /**
     * <pre>
     * Transaction fee rate, satoshis per byte, used to compute required fee (when planning)
     * </pre>
     *
     * <code>int64 byte_fee = 3;</code>
     * @param value The byteFee to set.
     */
    private void setByteFee(long value) {
      
      byteFee_ = value;
    }
    /**
     * <pre>
     * Transaction fee rate, satoshis per byte, used to compute required fee (when planning)
     * </pre>
     *
     * <code>int64 byte_fee = 3;</code>
     */
    private void clearByteFee() {
      
      byteFee_ = 0L;
    }

    public static final int TO_ADDRESS_FIELD_NUMBER = 4;
    private java.lang.String toAddress_;
    /**
     * <pre>
     * Recipient's address, as string.
     * </pre>
     *
     * <code>string to_address = 4;</code>
     * @return The toAddress.
     */
    @java.lang.Override
    public java.lang.String getToAddress() {
      return toAddress_;
    }
    /**
     * <pre>
     * Recipient's address, as string.
     * </pre>
     *
     * <code>string to_address = 4;</code>
     * @return The bytes for toAddress.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getToAddressBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(toAddress_);
    }
    /**
     * <pre>
     * Recipient's address, as string.
     * </pre>
     *
     * <code>string to_address = 4;</code>
     * @param value The toAddress to set.
     */
    private void setToAddress(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      toAddress_ = value;
    }
    /**
     * <pre>
     * Recipient's address, as string.
     * </pre>
     *
     * <code>string to_address = 4;</code>
     */
    private void clearToAddress() {
      
      toAddress_ = getDefaultInstance().getToAddress();
    }
    /**
     * <pre>
     * Recipient's address, as string.
     * </pre>
     *
     * <code>string to_address = 4;</code>
     * @param value The bytes for toAddress to set.
     */
    private void setToAddressBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      toAddress_ = value.toStringUtf8();
      
    }

    public static final int CHANGE_ADDRESS_FIELD_NUMBER = 5;
    private java.lang.String changeAddress_;
    /**
     * <pre>
     * Change address, as string.
     * </pre>
     *
     * <code>string change_address = 5;</code>
     * @return The changeAddress.
     */
    @java.lang.Override
    public java.lang.String getChangeAddress() {
      return changeAddress_;
    }
    /**
     * <pre>
     * Change address, as string.
     * </pre>
     *
     * <code>string change_address = 5;</code>
     * @return The bytes for changeAddress.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getChangeAddressBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(changeAddress_);
    }
    /**
     * <pre>
     * Change address, as string.
     * </pre>
     *
     * <code>string change_address = 5;</code>
     * @param value The changeAddress to set.
     */
    private void setChangeAddress(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      changeAddress_ = value;
    }
    /**
     * <pre>
     * Change address, as string.
     * </pre>
     *
     * <code>string change_address = 5;</code>
     */
    private void clearChangeAddress() {
      
      changeAddress_ = getDefaultInstance().getChangeAddress();
    }
    /**
     * <pre>
     * Change address, as string.
     * </pre>
     *
     * <code>string change_address = 5;</code>
     * @param value The bytes for changeAddress to set.
     */
    private void setChangeAddressBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      changeAddress_ = value.toStringUtf8();
      
    }

    public static final int PRIVATE_KEY_FIELD_NUMBER = 6;
    private com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> privateKey_;
    /**
     * <pre>
     * The available secret private key or keys required for signing (32 bytes each).
     * </pre>
     *
     * <code>repeated bytes private_key = 6;</code>
     * @return A list containing the privateKey.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.ByteString>
        getPrivateKeyList() {
      return privateKey_;
    }
    /**
     * <pre>
     * The available secret private key or keys required for signing (32 bytes each).
     * </pre>
     *
     * <code>repeated bytes private_key = 6;</code>
     * @return The count of privateKey.
     */
    @java.lang.Override
    public int getPrivateKeyCount() {
      return privateKey_.size();
    }
    /**
     * <pre>
     * The available secret private key or keys required for signing (32 bytes each).
     * </pre>
     *
     * <code>repeated bytes private_key = 6;</code>
     * @param index The index of the element to return.
     * @return The privateKey at the given index.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPrivateKey(int index) {
      return privateKey_.get(index);
    }
    private void ensurePrivateKeyIsMutable() {
      com.google.protobuf.Internal.ProtobufList<com.google.protobuf.ByteString> tmp = privateKey_;
      if (!tmp.isModifiable()) {
        privateKey_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }
    /**
     * <pre>
     * The available secret private key or keys required for signing (32 bytes each).
     * </pre>
     *
     * <code>repeated bytes private_key = 6;</code>
     * @param index The index to set the value at.
     * @param value The privateKey to set.
     */
    private void setPrivateKey(
        int index, com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  ensurePrivateKeyIsMutable();
      privateKey_.set(index, value);
    }
    /**
     * <pre>
     * The available secret private key or keys required for signing (32 bytes each).
     * </pre>
     *
     * <code>repeated bytes private_key = 6;</code>
     * @param value The privateKey to add.
     */
    private void addPrivateKey(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  ensurePrivateKeyIsMutable();
      privateKey_.add(value);
    }
    /**
     * <pre>
     * The available secret private key or keys required for signing (32 bytes each).
     * </pre>
     *
     * <code>repeated bytes private_key = 6;</code>
     * @param values The privateKey to add.
     */
    private void addAllPrivateKey(
        java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
      ensurePrivateKeyIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, privateKey_);
    }
    /**
     * <pre>
     * The available secret private key or keys required for signing (32 bytes each).
     * </pre>
     *
     * <code>repeated bytes private_key = 6;</code>
     */
    private void clearPrivateKey() {
      privateKey_ = emptyProtobufList();
    }

    public static final int SCRIPTS_FIELD_NUMBER = 7;
    private static final class ScriptsDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, com.google.protobuf.ByteString> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, com.google.protobuf.ByteString>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.BYTES,
                  com.google.protobuf.ByteString.EMPTY);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, com.google.protobuf.ByteString> scripts_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.ByteString>
    internalGetScripts() {
      return scripts_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, com.google.protobuf.ByteString>
    internalGetMutableScripts() {
      if (!scripts_.isMutable()) {
        scripts_ = scripts_.mutableCopy();
      }
      return scripts_;
    }
    @java.lang.Override

    public int getScriptsCount() {
      return internalGetScripts().size();
    }
    /**
     * <pre>
     * Available redeem scripts indexed by script hash.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; scripts = 7;</code>
     */
    @java.lang.Override

    public boolean containsScripts(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      return internalGetScripts().containsKey(key);
    }
    /**
     * Use {@link #getScriptsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getScripts() {
      return getScriptsMap();
    }
    /**
     * <pre>
     * Available redeem scripts indexed by script hash.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; scripts = 7;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getScriptsMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetScripts());
    }
    /**
     * <pre>
     * Available redeem scripts indexed by script hash.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; scripts = 7;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getScriptsOrDefault(
        java.lang.String key,
        com.google.protobuf.ByteString defaultValue) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetScripts();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Available redeem scripts indexed by script hash.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; scripts = 7;</code>
     */
    @java.lang.Override

    public com.google.protobuf.ByteString getScriptsOrThrow(
        java.lang.String key) {
      java.lang.Class<?> keyClass = key.getClass();
      java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
          internalGetScripts();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * Available redeem scripts indexed by script hash.
     * </pre>
     *
     * <code>map&lt;string, bytes&gt; scripts = 7;</code>
     */
    private java.util.Map<java.lang.String, com.google.protobuf.ByteString>
    getMutableScriptsMap() {
      return internalGetMutableScripts();
    }

    public static final int UTXO_FIELD_NUMBER = 8;
    private com.google.protobuf.Internal.ProtobufList<wallet.core.jni.proto.Bitcoin.UnspentTransaction> utxo_;
    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    @java.lang.Override
    public java.util.List<wallet.core.jni.proto.Bitcoin.UnspentTransaction> getUtxoList() {
      return utxo_;
    }
    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    public java.util.List<? extends wallet.core.jni.proto.Bitcoin.UnspentTransactionOrBuilder> 
        getUtxoOrBuilderList() {
      return utxo_;
    }
    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    @java.lang.Override
    public int getUtxoCount() {
      return utxo_.size();
    }
    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    @java.lang.Override
    public wallet.core.jni.proto.Bitcoin.UnspentTransaction getUtxo(int index) {
      return utxo_.get(index);
    }
    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    public wallet.core.jni.proto.Bitcoin.UnspentTransactionOrBuilder getUtxoOrBuilder(
        int index) {
      return utxo_.get(index);
    }
    private void ensureUtxoIsMutable() {
      com.google.protobuf.Internal.ProtobufList<wallet.core.jni.proto.Bitcoin.UnspentTransaction> tmp = utxo_;
      if (!tmp.isModifiable()) {
        utxo_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    private void setUtxo(
        int index, wallet.core.jni.proto.Bitcoin.UnspentTransaction value) {
      value.getClass();
  ensureUtxoIsMutable();
      utxo_.set(index, value);
    }
    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    private void addUtxo(wallet.core.jni.proto.Bitcoin.UnspentTransaction value) {
      value.getClass();
  ensureUtxoIsMutable();
      utxo_.add(value);
    }
    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    private void addUtxo(
        int index, wallet.core.jni.proto.Bitcoin.UnspentTransaction value) {
      value.getClass();
  ensureUtxoIsMutable();
      utxo_.add(index, value);
    }
    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    private void addAllUtxo(
        java.lang.Iterable<? extends wallet.core.jni.proto.Bitcoin.UnspentTransaction> values) {
      ensureUtxoIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, utxo_);
    }
    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    private void clearUtxo() {
      utxo_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Available input unspent transaction outputs.
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
     */
    private void removeUtxo(int index) {
      ensureUtxoIsMutable();
      utxo_.remove(index);
    }

    public static final int USE_MAX_AMOUNT_FIELD_NUMBER = 9;
    private boolean useMaxAmount_;
    /**
     * <pre>
     * Set if sending max amount is requested.
     * </pre>
     *
     * <code>bool use_max_amount = 9;</code>
     * @return The useMaxAmount.
     */
    @java.lang.Override
    public boolean getUseMaxAmount() {
      return useMaxAmount_;
    }
    /**
     * <pre>
     * Set if sending max amount is requested.
     * </pre>
     *
     * <code>bool use_max_amount = 9;</code>
     * @param value The useMaxAmount to set.
     */
    private void setUseMaxAmount(boolean value) {
      
      useMaxAmount_ = value;
    }
    /**
     * <pre>
     * Set if sending max amount is requested.
     * </pre>
     *
     * <code>bool use_max_amount = 9;</code>
     */
    private void clearUseMaxAmount() {
      
      useMaxAmount_ = false;
    }

    public static final int COIN_TYPE_FIELD_NUMBER = 10;
    private int coinType_;
    /**
     * <pre>
     * Coin type (used by forks).
     * </pre>
     *
     * <code>uint32 coin_type = 10;</code>
     * @return The coinType.
     */
    @java.lang.Override
    public int getCoinType() {
      return coinType_;
    }
    /**
     * <pre>
     * Coin type (used by forks).
     * </pre>
     *
     * <code>uint32 coin_type = 10;</code>
     * @param value The coinType to set.
     */
    private void setCoinType(int value) {
      
      coinType_ = value;
    }
    /**
     * <pre>
     * Coin type (used by forks).
     * </pre>
     *
     * <code>uint32 coin_type = 10;</code>
     */
    private void clearCoinType() {
      
      coinType_ = 0;
    }

    public static final int PLAN_FIELD_NUMBER = 11;
    private wallet.core.jni.proto.Bitcoin.TransactionPlan plan_;
    /**
     * <pre>
     * Optional transaction plan. If missing, plan will be computed.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
     */
    @java.lang.Override
    public boolean hasPlan() {
      return plan_ != null;
    }
    /**
     * <pre>
     * Optional transaction plan. If missing, plan will be computed.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
     */
    @java.lang.Override
    public wallet.core.jni.proto.Bitcoin.TransactionPlan getPlan() {
      return plan_ == null ? wallet.core.jni.proto.Bitcoin.TransactionPlan.getDefaultInstance() : plan_;
    }
    /**
     * <pre>
     * Optional transaction plan. If missing, plan will be computed.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
     */
    private void setPlan(wallet.core.jni.proto.Bitcoin.TransactionPlan value) {
      value.getClass();
  plan_ = value;
      
      }
    /**
     * <pre>
     * Optional transaction plan. If missing, plan will be computed.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergePlan(wallet.core.jni.proto.Bitcoin.TransactionPlan value) {
      value.getClass();
  if (plan_ != null &&
          plan_ != wallet.core.jni.proto.Bitcoin.TransactionPlan.getDefaultInstance()) {
        plan_ =
          wallet.core.jni.proto.Bitcoin.TransactionPlan.newBuilder(plan_).mergeFrom(value).buildPartial();
      } else {
        plan_ = value;
      }
      
    }
    /**
     * <pre>
     * Optional transaction plan. If missing, plan will be computed.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
     */
    private void clearPlan() {  plan_ = null;
      
    }

    public static final int LOCK_TIME_FIELD_NUMBER = 12;
    private int lockTime_;
    /**
     * <pre>
     * Optional lockTime, default value 0 means no time locking.
     * If all inputs have final (`0xffffffff`) sequence numbers then `lockTime` is irrelevant.
     * Otherwise, the transaction may not be added to a block until after `lockTime`.
     *  value  &lt; 500000000 : Block number at which this transaction is unlocked
     *  value &gt;= 500000000 : UNIX timestamp at which this transaction is unlocked
     * </pre>
     *
     * <code>uint32 lock_time = 12;</code>
     * @return The lockTime.
     */
    @java.lang.Override
    public int getLockTime() {
      return lockTime_;
    }
    /**
     * <pre>
     * Optional lockTime, default value 0 means no time locking.
     * If all inputs have final (`0xffffffff`) sequence numbers then `lockTime` is irrelevant.
     * Otherwise, the transaction may not be added to a block until after `lockTime`.
     *  value  &lt; 500000000 : Block number at which this transaction is unlocked
     *  value &gt;= 500000000 : UNIX timestamp at which this transaction is unlocked
     * </pre>
     *
     * <code>uint32 lock_time = 12;</code>
     * @param value The lockTime to set.
     */
    private void setLockTime(int value) {
      
      lockTime_ = value;
    }
    /**
     * <pre>
     * Optional lockTime, default value 0 means no time locking.
     * If all inputs have final (`0xffffffff`) sequence numbers then `lockTime` is irrelevant.
     * Otherwise, the transaction may not be added to a block until after `lockTime`.
     *  value  &lt; 500000000 : Block number at which this transaction is unlocked
     *  value &gt;= 500000000 : UNIX timestamp at which this transaction is unlocked
     * </pre>
     *
     * <code>uint32 lock_time = 12;</code>
     */
    private void clearLockTime() {
      
      lockTime_ = 0;
    }

    public static final int OUTPUT_OP_RETURN_FIELD_NUMBER = 13;
    private com.google.protobuf.ByteString outputOpReturn_;
    /**
     * <pre>
     * Optional zero-amount, OP_RETURN output
     * </pre>
     *
     * <code>bytes output_op_return = 13;</code>
     * @return The outputOpReturn.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getOutputOpReturn() {
      return outputOpReturn_;
    }
    /**
     * <pre>
     * Optional zero-amount, OP_RETURN output
     * </pre>
     *
     * <code>bytes output_op_return = 13;</code>
     * @param value The outputOpReturn to set.
     */
    private void setOutputOpReturn(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      outputOpReturn_ = value;
    }
    /**
     * <pre>
     * Optional zero-amount, OP_RETURN output
     * </pre>
     *
     * <code>bytes output_op_return = 13;</code>
     */
    private void clearOutputOpReturn() {
      
      outputOpReturn_ = getDefaultInstance().getOutputOpReturn();
    }

    public static wallet.core.jni.proto.Bitcoin.SigningInput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningInput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningInput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningInput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningInput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningInput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningInput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningInput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningInput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningInput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningInput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningInput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(wallet.core.jni.proto.Bitcoin.SigningInput prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Input data necessary to create a signed transaction.
     * </pre>
     *
     * Protobuf type {@code TW.Bitcoin.Proto.SigningInput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          wallet.core.jni.proto.Bitcoin.SigningInput, Builder> implements
        // @@protoc_insertion_point(builder_implements:TW.Bitcoin.Proto.SigningInput)
        wallet.core.jni.proto.Bitcoin.SigningInputOrBuilder {
      // Construct using wallet.core.jni.proto.Bitcoin.SigningInput.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Hash type to use when signing.
       * </pre>
       *
       * <code>uint32 hash_type = 1;</code>
       * @return The hashType.
       */
      @java.lang.Override
      public int getHashType() {
        return instance.getHashType();
      }
      /**
       * <pre>
       * Hash type to use when signing.
       * </pre>
       *
       * <code>uint32 hash_type = 1;</code>
       * @param value The hashType to set.
       * @return This builder for chaining.
       */
      public Builder setHashType(int value) {
        copyOnWrite();
        instance.setHashType(value);
        return this;
      }
      /**
       * <pre>
       * Hash type to use when signing.
       * </pre>
       *
       * <code>uint32 hash_type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearHashType() {
        copyOnWrite();
        instance.clearHashType();
        return this;
      }

      /**
       * <pre>
       * Amount to send.  Transaction created will have this amount in its output, 
       * except when use_max_amount is set, in that case this amount is not relevant, maximum possible amount will be used (max avail less fee).
       * If amount is equal or more than the available amount, also max amount will be used.
       * </pre>
       *
       * <code>int64 amount = 2;</code>
       * @return The amount.
       */
      @java.lang.Override
      public long getAmount() {
        return instance.getAmount();
      }
      /**
       * <pre>
       * Amount to send.  Transaction created will have this amount in its output, 
       * except when use_max_amount is set, in that case this amount is not relevant, maximum possible amount will be used (max avail less fee).
       * If amount is equal or more than the available amount, also max amount will be used.
       * </pre>
       *
       * <code>int64 amount = 2;</code>
       * @param value The amount to set.
       * @return This builder for chaining.
       */
      public Builder setAmount(long value) {
        copyOnWrite();
        instance.setAmount(value);
        return this;
      }
      /**
       * <pre>
       * Amount to send.  Transaction created will have this amount in its output, 
       * except when use_max_amount is set, in that case this amount is not relevant, maximum possible amount will be used (max avail less fee).
       * If amount is equal or more than the available amount, also max amount will be used.
       * </pre>
       *
       * <code>int64 amount = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAmount() {
        copyOnWrite();
        instance.clearAmount();
        return this;
      }

      /**
       * <pre>
       * Transaction fee rate, satoshis per byte, used to compute required fee (when planning)
       * </pre>
       *
       * <code>int64 byte_fee = 3;</code>
       * @return The byteFee.
       */
      @java.lang.Override
      public long getByteFee() {
        return instance.getByteFee();
      }
      /**
       * <pre>
       * Transaction fee rate, satoshis per byte, used to compute required fee (when planning)
       * </pre>
       *
       * <code>int64 byte_fee = 3;</code>
       * @param value The byteFee to set.
       * @return This builder for chaining.
       */
      public Builder setByteFee(long value) {
        copyOnWrite();
        instance.setByteFee(value);
        return this;
      }
      /**
       * <pre>
       * Transaction fee rate, satoshis per byte, used to compute required fee (when planning)
       * </pre>
       *
       * <code>int64 byte_fee = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearByteFee() {
        copyOnWrite();
        instance.clearByteFee();
        return this;
      }

      /**
       * <pre>
       * Recipient's address, as string.
       * </pre>
       *
       * <code>string to_address = 4;</code>
       * @return The toAddress.
       */
      @java.lang.Override
      public java.lang.String getToAddress() {
        return instance.getToAddress();
      }
      /**
       * <pre>
       * Recipient's address, as string.
       * </pre>
       *
       * <code>string to_address = 4;</code>
       * @return The bytes for toAddress.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getToAddressBytes() {
        return instance.getToAddressBytes();
      }
      /**
       * <pre>
       * Recipient's address, as string.
       * </pre>
       *
       * <code>string to_address = 4;</code>
       * @param value The toAddress to set.
       * @return This builder for chaining.
       */
      public Builder setToAddress(
          java.lang.String value) {
        copyOnWrite();
        instance.setToAddress(value);
        return this;
      }
      /**
       * <pre>
       * Recipient's address, as string.
       * </pre>
       *
       * <code>string to_address = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearToAddress() {
        copyOnWrite();
        instance.clearToAddress();
        return this;
      }
      /**
       * <pre>
       * Recipient's address, as string.
       * </pre>
       *
       * <code>string to_address = 4;</code>
       * @param value The bytes for toAddress to set.
       * @return This builder for chaining.
       */
      public Builder setToAddressBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setToAddressBytes(value);
        return this;
      }

      /**
       * <pre>
       * Change address, as string.
       * </pre>
       *
       * <code>string change_address = 5;</code>
       * @return The changeAddress.
       */
      @java.lang.Override
      public java.lang.String getChangeAddress() {
        return instance.getChangeAddress();
      }
      /**
       * <pre>
       * Change address, as string.
       * </pre>
       *
       * <code>string change_address = 5;</code>
       * @return The bytes for changeAddress.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getChangeAddressBytes() {
        return instance.getChangeAddressBytes();
      }
      /**
       * <pre>
       * Change address, as string.
       * </pre>
       *
       * <code>string change_address = 5;</code>
       * @param value The changeAddress to set.
       * @return This builder for chaining.
       */
      public Builder setChangeAddress(
          java.lang.String value) {
        copyOnWrite();
        instance.setChangeAddress(value);
        return this;
      }
      /**
       * <pre>
       * Change address, as string.
       * </pre>
       *
       * <code>string change_address = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearChangeAddress() {
        copyOnWrite();
        instance.clearChangeAddress();
        return this;
      }
      /**
       * <pre>
       * Change address, as string.
       * </pre>
       *
       * <code>string change_address = 5;</code>
       * @param value The bytes for changeAddress to set.
       * @return This builder for chaining.
       */
      public Builder setChangeAddressBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setChangeAddressBytes(value);
        return this;
      }

      /**
       * <pre>
       * The available secret private key or keys required for signing (32 bytes each).
       * </pre>
       *
       * <code>repeated bytes private_key = 6;</code>
       * @return A list containing the privateKey.
       */
      @java.lang.Override
      public java.util.List<com.google.protobuf.ByteString>
          getPrivateKeyList() {
        return java.util.Collections.unmodifiableList(
            instance.getPrivateKeyList());
      }
      /**
       * <pre>
       * The available secret private key or keys required for signing (32 bytes each).
       * </pre>
       *
       * <code>repeated bytes private_key = 6;</code>
       * @return The count of privateKey.
       */
      @java.lang.Override
      public int getPrivateKeyCount() {
        return instance.getPrivateKeyCount();
      }
      /**
       * <pre>
       * The available secret private key or keys required for signing (32 bytes each).
       * </pre>
       *
       * <code>repeated bytes private_key = 6;</code>
       * @param index The index of the element to return.
       * @return The privateKey at the given index.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPrivateKey(int index) {
        return instance.getPrivateKey(index);
      }
      /**
       * <pre>
       * The available secret private key or keys required for signing (32 bytes each).
       * </pre>
       *
       * <code>repeated bytes private_key = 6;</code>
       * @param value The privateKey to set.
       * @return This builder for chaining.
       */
      public Builder setPrivateKey(
          int index, com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPrivateKey(index, value);
        return this;
      }
      /**
       * <pre>
       * The available secret private key or keys required for signing (32 bytes each).
       * </pre>
       *
       * <code>repeated bytes private_key = 6;</code>
       * @param value The privateKey to add.
       * @return This builder for chaining.
       */
      public Builder addPrivateKey(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.addPrivateKey(value);
        return this;
      }
      /**
       * <pre>
       * The available secret private key or keys required for signing (32 bytes each).
       * </pre>
       *
       * <code>repeated bytes private_key = 6;</code>
       * @param values The privateKey to add.
       * @return This builder for chaining.
       */
      public Builder addAllPrivateKey(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.addAllPrivateKey(values);
        return this;
      }
      /**
       * <pre>
       * The available secret private key or keys required for signing (32 bytes each).
       * </pre>
       *
       * <code>repeated bytes private_key = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrivateKey() {
        copyOnWrite();
        instance.clearPrivateKey();
        return this;
      }

      @java.lang.Override

      public int getScriptsCount() {
        return instance.getScriptsMap().size();
      }
      /**
       * <pre>
       * Available redeem scripts indexed by script hash.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; scripts = 7;</code>
       */
      @java.lang.Override

      public boolean containsScripts(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        return instance.getScriptsMap().containsKey(key);
      }

      public Builder clearScripts() {
        copyOnWrite();
        instance.getMutableScriptsMap().clear();
        return this;
      }
      /**
       * <pre>
       * Available redeem scripts indexed by script hash.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; scripts = 7;</code>
       */

      public Builder removeScripts(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        copyOnWrite();
        instance.getMutableScriptsMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getScriptsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getScripts() {
        return getScriptsMap();
      }
      /**
       * <pre>
       * Available redeem scripts indexed by script hash.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; scripts = 7;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, com.google.protobuf.ByteString> getScriptsMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getScriptsMap());
      }
      /**
       * <pre>
       * Available redeem scripts indexed by script hash.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; scripts = 7;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getScriptsOrDefault(
          java.lang.String key,
          com.google.protobuf.ByteString defaultValue) {
        java.lang.Class<?> keyClass = key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            instance.getScriptsMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Available redeem scripts indexed by script hash.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; scripts = 7;</code>
       */
      @java.lang.Override

      public com.google.protobuf.ByteString getScriptsOrThrow(
          java.lang.String key) {
        java.lang.Class<?> keyClass = key.getClass();
        java.util.Map<java.lang.String, com.google.protobuf.ByteString> map =
            instance.getScriptsMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * Available redeem scripts indexed by script hash.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; scripts = 7;</code>
       */
      public Builder putScripts(
          java.lang.String key,
          com.google.protobuf.ByteString value) {
        java.lang.Class<?> keyClass = key.getClass();
        java.lang.Class<?> valueClass = value.getClass();
        copyOnWrite();
        instance.getMutableScriptsMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * Available redeem scripts indexed by script hash.
       * </pre>
       *
       * <code>map&lt;string, bytes&gt; scripts = 7;</code>
       */
      public Builder putAllScripts(
          java.util.Map<java.lang.String, com.google.protobuf.ByteString> values) {
        copyOnWrite();
        instance.getMutableScriptsMap().putAll(values);
        return this;
      }

      /**
       * <pre>
       * Available input unspent transaction outputs.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
       */
      @java.lang.Override
      public java.util.List<wallet.core.jni.proto.Bitcoin.UnspentTransaction> getUtxoList() {
        return java.util.Collections.unmodifiableList(
            instance.getUtxoList());
      }
      /**
       * <pre>
       * Available input unspent transaction outputs.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
       */
      @java.lang.Override
      public int getUtxoCount() {
        return instance.getUtxoCount();
      }/**
       * <pre>
       * Available input unspent transaction outputs.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
       */
      @java.lang.Override
      public wallet.core.jni.proto.Bitcoin.UnspentTransaction getUtxo(int index) {
        return instance.getUtxo(index);
      }
      /**
       * <pre>
       * Available input unspent transaction outputs.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
       */
      public Builder setUtxo(
          int index, wallet.core.jni.proto.Bitcoin.UnspentTransaction value) {
        copyOnWrite();
        instance.setUtxo(index, value);
        return this;
      }
      /**
       * <pre>
       * Available input unspent transaction outputs.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
       */
      public Builder setUtxo(
          int index, wallet.core.jni.proto.Bitcoin.UnspentTransaction.Builder builderForValue) {
        copyOnWrite();
        instance.setUtxo(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Available input unspent transaction outputs.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
       */
      public Builder addUtxo(wallet.core.jni.proto.Bitcoin.UnspentTransaction value) {
        copyOnWrite();
        instance.addUtxo(value);
        return this;
      }
      /**
       * <pre>
       * Available input unspent transaction outputs.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
       */
      public Builder addUtxo(
          int index, wallet.core.jni.proto.Bitcoin.UnspentTransaction value) {
        copyOnWrite();
        instance.addUtxo(index, value);
        return this;
      }
      /**
       * <pre>
       * Available input unspent transaction outputs.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
       */
      public Builder addUtxo(
          wallet.core.jni.proto.Bitcoin.UnspentTransaction.Builder builderForValue) {
        copyOnWrite();
        instance.addUtxo(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Available input unspent transaction outputs.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
       */
      public Builder addUtxo(
          int index, wallet.core.jni.proto.Bitcoin.UnspentTransaction.Builder builderForValue) {
        copyOnWrite();
        instance.addUtxo(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Available input unspent transaction outputs.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
       */
      public Builder addAllUtxo(
          java.lang.Iterable<? extends wallet.core.jni.proto.Bitcoin.UnspentTransaction> values) {
        copyOnWrite();
        instance.addAllUtxo(values);
        return this;
      }
      /**
       * <pre>
       * Available input unspent transaction outputs.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
       */
      public Builder clearUtxo() {
        copyOnWrite();
        instance.clearUtxo();
        return this;
      }
      /**
       * <pre>
       * Available input unspent transaction outputs.
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxo = 8;</code>
       */
      public Builder removeUtxo(int index) {
        copyOnWrite();
        instance.removeUtxo(index);
        return this;
      }

      /**
       * <pre>
       * Set if sending max amount is requested.
       * </pre>
       *
       * <code>bool use_max_amount = 9;</code>
       * @return The useMaxAmount.
       */
      @java.lang.Override
      public boolean getUseMaxAmount() {
        return instance.getUseMaxAmount();
      }
      /**
       * <pre>
       * Set if sending max amount is requested.
       * </pre>
       *
       * <code>bool use_max_amount = 9;</code>
       * @param value The useMaxAmount to set.
       * @return This builder for chaining.
       */
      public Builder setUseMaxAmount(boolean value) {
        copyOnWrite();
        instance.setUseMaxAmount(value);
        return this;
      }
      /**
       * <pre>
       * Set if sending max amount is requested.
       * </pre>
       *
       * <code>bool use_max_amount = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearUseMaxAmount() {
        copyOnWrite();
        instance.clearUseMaxAmount();
        return this;
      }

      /**
       * <pre>
       * Coin type (used by forks).
       * </pre>
       *
       * <code>uint32 coin_type = 10;</code>
       * @return The coinType.
       */
      @java.lang.Override
      public int getCoinType() {
        return instance.getCoinType();
      }
      /**
       * <pre>
       * Coin type (used by forks).
       * </pre>
       *
       * <code>uint32 coin_type = 10;</code>
       * @param value The coinType to set.
       * @return This builder for chaining.
       */
      public Builder setCoinType(int value) {
        copyOnWrite();
        instance.setCoinType(value);
        return this;
      }
      /**
       * <pre>
       * Coin type (used by forks).
       * </pre>
       *
       * <code>uint32 coin_type = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearCoinType() {
        copyOnWrite();
        instance.clearCoinType();
        return this;
      }

      /**
       * <pre>
       * Optional transaction plan. If missing, plan will be computed.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
       */
      @java.lang.Override
      public boolean hasPlan() {
        return instance.hasPlan();
      }
      /**
       * <pre>
       * Optional transaction plan. If missing, plan will be computed.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
       */
      @java.lang.Override
      public wallet.core.jni.proto.Bitcoin.TransactionPlan getPlan() {
        return instance.getPlan();
      }
      /**
       * <pre>
       * Optional transaction plan. If missing, plan will be computed.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
       */
      public Builder setPlan(wallet.core.jni.proto.Bitcoin.TransactionPlan value) {
        copyOnWrite();
        instance.setPlan(value);
        return this;
        }
      /**
       * <pre>
       * Optional transaction plan. If missing, plan will be computed.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
       */
      public Builder setPlan(
          wallet.core.jni.proto.Bitcoin.TransactionPlan.Builder builderForValue) {
        copyOnWrite();
        instance.setPlan(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Optional transaction plan. If missing, plan will be computed.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
       */
      public Builder mergePlan(wallet.core.jni.proto.Bitcoin.TransactionPlan value) {
        copyOnWrite();
        instance.mergePlan(value);
        return this;
      }
      /**
       * <pre>
       * Optional transaction plan. If missing, plan will be computed.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.TransactionPlan plan = 11;</code>
       */
      public Builder clearPlan() {  copyOnWrite();
        instance.clearPlan();
        return this;
      }

      /**
       * <pre>
       * Optional lockTime, default value 0 means no time locking.
       * If all inputs have final (`0xffffffff`) sequence numbers then `lockTime` is irrelevant.
       * Otherwise, the transaction may not be added to a block until after `lockTime`.
       *  value  &lt; 500000000 : Block number at which this transaction is unlocked
       *  value &gt;= 500000000 : UNIX timestamp at which this transaction is unlocked
       * </pre>
       *
       * <code>uint32 lock_time = 12;</code>
       * @return The lockTime.
       */
      @java.lang.Override
      public int getLockTime() {
        return instance.getLockTime();
      }
      /**
       * <pre>
       * Optional lockTime, default value 0 means no time locking.
       * If all inputs have final (`0xffffffff`) sequence numbers then `lockTime` is irrelevant.
       * Otherwise, the transaction may not be added to a block until after `lockTime`.
       *  value  &lt; 500000000 : Block number at which this transaction is unlocked
       *  value &gt;= 500000000 : UNIX timestamp at which this transaction is unlocked
       * </pre>
       *
       * <code>uint32 lock_time = 12;</code>
       * @param value The lockTime to set.
       * @return This builder for chaining.
       */
      public Builder setLockTime(int value) {
        copyOnWrite();
        instance.setLockTime(value);
        return this;
      }
      /**
       * <pre>
       * Optional lockTime, default value 0 means no time locking.
       * If all inputs have final (`0xffffffff`) sequence numbers then `lockTime` is irrelevant.
       * Otherwise, the transaction may not be added to a block until after `lockTime`.
       *  value  &lt; 500000000 : Block number at which this transaction is unlocked
       *  value &gt;= 500000000 : UNIX timestamp at which this transaction is unlocked
       * </pre>
       *
       * <code>uint32 lock_time = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearLockTime() {
        copyOnWrite();
        instance.clearLockTime();
        return this;
      }

      /**
       * <pre>
       * Optional zero-amount, OP_RETURN output
       * </pre>
       *
       * <code>bytes output_op_return = 13;</code>
       * @return The outputOpReturn.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getOutputOpReturn() {
        return instance.getOutputOpReturn();
      }
      /**
       * <pre>
       * Optional zero-amount, OP_RETURN output
       * </pre>
       *
       * <code>bytes output_op_return = 13;</code>
       * @param value The outputOpReturn to set.
       * @return This builder for chaining.
       */
      public Builder setOutputOpReturn(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setOutputOpReturn(value);
        return this;
      }
      /**
       * <pre>
       * Optional zero-amount, OP_RETURN output
       * </pre>
       *
       * <code>bytes output_op_return = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputOpReturn() {
        copyOnWrite();
        instance.clearOutputOpReturn();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TW.Bitcoin.Proto.SigningInput)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new wallet.core.jni.proto.Bitcoin.SigningInput();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "hashType_",
              "amount_",
              "byteFee_",
              "toAddress_",
              "changeAddress_",
              "privateKey_",
              "scripts_",
              ScriptsDefaultEntryHolder.defaultEntry,
              "utxo_",
              wallet.core.jni.proto.Bitcoin.UnspentTransaction.class,
              "useMaxAmount_",
              "coinType_",
              "plan_",
              "lockTime_",
              "outputOpReturn_",
            };
            java.lang.String info =
                "\u0000\r\u0000\u0000\u0001\r\r\u0001\u0002\u0000\u0001\u000b\u0002\u0002\u0003\u0002" +
                "\u0004\u0208\u0005\u0208\u0006\u001c\u00072\b\u001b\t\u0007\n\u000b\u000b\t\f\u000b" +
                "\r\n";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<wallet.core.jni.proto.Bitcoin.SigningInput> parser = PARSER;
          if (parser == null) {
            synchronized (wallet.core.jni.proto.Bitcoin.SigningInput.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<wallet.core.jni.proto.Bitcoin.SigningInput>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.SigningInput)
    private static final wallet.core.jni.proto.Bitcoin.SigningInput DEFAULT_INSTANCE;
    static {
      SigningInput defaultInstance = new SigningInput();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        SigningInput.class, defaultInstance);
    }

    public static wallet.core.jni.proto.Bitcoin.SigningInput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SigningInput> PARSER;

    public static com.google.protobuf.Parser<SigningInput> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface TransactionPlanOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TW.Bitcoin.Proto.TransactionPlan)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Amount to be received at the other end.
     * </pre>
     *
     * <code>int64 amount = 1;</code>
     * @return The amount.
     */
    long getAmount();

    /**
     * <pre>
     * Maximum available amount in all the input UTXOs.
     * </pre>
     *
     * <code>int64 available_amount = 2;</code>
     * @return The availableAmount.
     */
    long getAvailableAmount();

    /**
     * <pre>
     * Estimated transaction fee.
     * </pre>
     *
     * <code>int64 fee = 3;</code>
     * @return The fee.
     */
    long getFee();

    /**
     * <pre>
     * Remaining change
     * </pre>
     *
     * <code>int64 change = 4;</code>
     * @return The change.
     */
    long getChange();

    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    java.util.List<wallet.core.jni.proto.Bitcoin.UnspentTransaction> 
        getUtxosList();
    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    wallet.core.jni.proto.Bitcoin.UnspentTransaction getUtxos(int index);
    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    int getUtxosCount();

    /**
     * <pre>
     * Zcash branch id
     * </pre>
     *
     * <code>bytes branch_id = 6;</code>
     * @return The branchId.
     */
    com.google.protobuf.ByteString getBranchId();

    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 7;</code>
     * @return The enum numeric value on the wire for error.
     */
    int getErrorValue();
    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 7;</code>
     * @return The error.
     */
    wallet.core.jni.proto.Common.SigningError getError();

    /**
     * <pre>
     * Optional zero-amount, OP_RETURN output
     * </pre>
     *
     * <code>bytes output_op_return = 8;</code>
     * @return The outputOpReturn.
     */
    com.google.protobuf.ByteString getOutputOpReturn();

    /**
     * <pre>
     * Horizen block height
     * </pre>
     *
     * <code>uint32 block_height = 9;</code>
     * @return The blockHeight.
     */
    int getBlockHeight();

    /**
     * <pre>
     * Horizen block hash
     * </pre>
     *
     * <code>string block_hash = 10;</code>
     * @return The blockHash.
     */
    java.lang.String getBlockHash();
    /**
     * <pre>
     * Horizen block hash
     * </pre>
     *
     * <code>string block_hash = 10;</code>
     * @return The bytes for blockHash.
     */
    com.google.protobuf.ByteString
        getBlockHashBytes();
  }
  /**
   * <pre>
   * Describes a preliminary transaction plan.
   * </pre>
   *
   * Protobuf type {@code TW.Bitcoin.Proto.TransactionPlan}
   */
  public  static final class TransactionPlan extends
      com.google.protobuf.GeneratedMessageLite<
          TransactionPlan, TransactionPlan.Builder> implements
      // @@protoc_insertion_point(message_implements:TW.Bitcoin.Proto.TransactionPlan)
      TransactionPlanOrBuilder {
    private TransactionPlan() {
      utxos_ = emptyProtobufList();
      branchId_ = com.google.protobuf.ByteString.EMPTY;
      outputOpReturn_ = com.google.protobuf.ByteString.EMPTY;
      blockHash_ = "";
    }
    public static final int AMOUNT_FIELD_NUMBER = 1;
    private long amount_;
    /**
     * <pre>
     * Amount to be received at the other end.
     * </pre>
     *
     * <code>int64 amount = 1;</code>
     * @return The amount.
     */
    @java.lang.Override
    public long getAmount() {
      return amount_;
    }
    /**
     * <pre>
     * Amount to be received at the other end.
     * </pre>
     *
     * <code>int64 amount = 1;</code>
     * @param value The amount to set.
     */
    private void setAmount(long value) {
      
      amount_ = value;
    }
    /**
     * <pre>
     * Amount to be received at the other end.
     * </pre>
     *
     * <code>int64 amount = 1;</code>
     */
    private void clearAmount() {
      
      amount_ = 0L;
    }

    public static final int AVAILABLE_AMOUNT_FIELD_NUMBER = 2;
    private long availableAmount_;
    /**
     * <pre>
     * Maximum available amount in all the input UTXOs.
     * </pre>
     *
     * <code>int64 available_amount = 2;</code>
     * @return The availableAmount.
     */
    @java.lang.Override
    public long getAvailableAmount() {
      return availableAmount_;
    }
    /**
     * <pre>
     * Maximum available amount in all the input UTXOs.
     * </pre>
     *
     * <code>int64 available_amount = 2;</code>
     * @param value The availableAmount to set.
     */
    private void setAvailableAmount(long value) {
      
      availableAmount_ = value;
    }
    /**
     * <pre>
     * Maximum available amount in all the input UTXOs.
     * </pre>
     *
     * <code>int64 available_amount = 2;</code>
     */
    private void clearAvailableAmount() {
      
      availableAmount_ = 0L;
    }

    public static final int FEE_FIELD_NUMBER = 3;
    private long fee_;
    /**
     * <pre>
     * Estimated transaction fee.
     * </pre>
     *
     * <code>int64 fee = 3;</code>
     * @return The fee.
     */
    @java.lang.Override
    public long getFee() {
      return fee_;
    }
    /**
     * <pre>
     * Estimated transaction fee.
     * </pre>
     *
     * <code>int64 fee = 3;</code>
     * @param value The fee to set.
     */
    private void setFee(long value) {
      
      fee_ = value;
    }
    /**
     * <pre>
     * Estimated transaction fee.
     * </pre>
     *
     * <code>int64 fee = 3;</code>
     */
    private void clearFee() {
      
      fee_ = 0L;
    }

    public static final int CHANGE_FIELD_NUMBER = 4;
    private long change_;
    /**
     * <pre>
     * Remaining change
     * </pre>
     *
     * <code>int64 change = 4;</code>
     * @return The change.
     */
    @java.lang.Override
    public long getChange() {
      return change_;
    }
    /**
     * <pre>
     * Remaining change
     * </pre>
     *
     * <code>int64 change = 4;</code>
     * @param value The change to set.
     */
    private void setChange(long value) {
      
      change_ = value;
    }
    /**
     * <pre>
     * Remaining change
     * </pre>
     *
     * <code>int64 change = 4;</code>
     */
    private void clearChange() {
      
      change_ = 0L;
    }

    public static final int UTXOS_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.ProtobufList<wallet.core.jni.proto.Bitcoin.UnspentTransaction> utxos_;
    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    @java.lang.Override
    public java.util.List<wallet.core.jni.proto.Bitcoin.UnspentTransaction> getUtxosList() {
      return utxos_;
    }
    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    public java.util.List<? extends wallet.core.jni.proto.Bitcoin.UnspentTransactionOrBuilder> 
        getUtxosOrBuilderList() {
      return utxos_;
    }
    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    @java.lang.Override
    public int getUtxosCount() {
      return utxos_.size();
    }
    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    @java.lang.Override
    public wallet.core.jni.proto.Bitcoin.UnspentTransaction getUtxos(int index) {
      return utxos_.get(index);
    }
    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    public wallet.core.jni.proto.Bitcoin.UnspentTransactionOrBuilder getUtxosOrBuilder(
        int index) {
      return utxos_.get(index);
    }
    private void ensureUtxosIsMutable() {
      com.google.protobuf.Internal.ProtobufList<wallet.core.jni.proto.Bitcoin.UnspentTransaction> tmp = utxos_;
      if (!tmp.isModifiable()) {
        utxos_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    private void setUtxos(
        int index, wallet.core.jni.proto.Bitcoin.UnspentTransaction value) {
      value.getClass();
  ensureUtxosIsMutable();
      utxos_.set(index, value);
    }
    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    private void addUtxos(wallet.core.jni.proto.Bitcoin.UnspentTransaction value) {
      value.getClass();
  ensureUtxosIsMutable();
      utxos_.add(value);
    }
    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    private void addUtxos(
        int index, wallet.core.jni.proto.Bitcoin.UnspentTransaction value) {
      value.getClass();
  ensureUtxosIsMutable();
      utxos_.add(index, value);
    }
    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    private void addAllUtxos(
        java.lang.Iterable<? extends wallet.core.jni.proto.Bitcoin.UnspentTransaction> values) {
      ensureUtxosIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, utxos_);
    }
    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    private void clearUtxos() {
      utxos_ = emptyProtobufList();
    }
    /**
     * <pre>
     * Selected unspent transaction outputs (subset of all input UTXOs)
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
     */
    private void removeUtxos(int index) {
      ensureUtxosIsMutable();
      utxos_.remove(index);
    }

    public static final int BRANCH_ID_FIELD_NUMBER = 6;
    private com.google.protobuf.ByteString branchId_;
    /**
     * <pre>
     * Zcash branch id
     * </pre>
     *
     * <code>bytes branch_id = 6;</code>
     * @return The branchId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getBranchId() {
      return branchId_;
    }
    /**
     * <pre>
     * Zcash branch id
     * </pre>
     *
     * <code>bytes branch_id = 6;</code>
     * @param value The branchId to set.
     */
    private void setBranchId(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      branchId_ = value;
    }
    /**
     * <pre>
     * Zcash branch id
     * </pre>
     *
     * <code>bytes branch_id = 6;</code>
     */
    private void clearBranchId() {
      
      branchId_ = getDefaultInstance().getBranchId();
    }

    public static final int ERROR_FIELD_NUMBER = 7;
    private int error_;
    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 7;</code>
     * @return The enum numeric value on the wire for error.
     */
    @java.lang.Override
    public int getErrorValue() {
      return error_;
    }
    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 7;</code>
     * @return The error.
     */
    @java.lang.Override
    public wallet.core.jni.proto.Common.SigningError getError() {
      wallet.core.jni.proto.Common.SigningError result = wallet.core.jni.proto.Common.SigningError.forNumber(error_);
      return result == null ? wallet.core.jni.proto.Common.SigningError.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 7;</code>
     * @param value The enum numeric value on the wire for error to set.
     */
    private void setErrorValue(int value) {
        error_ = value;
    }
    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 7;</code>
     * @param value The error to set.
     */
    private void setError(wallet.core.jni.proto.Common.SigningError value) {
      error_ = value.getNumber();
      
    }
    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 7;</code>
     */
    private void clearError() {
      
      error_ = 0;
    }

    public static final int OUTPUT_OP_RETURN_FIELD_NUMBER = 8;
    private com.google.protobuf.ByteString outputOpReturn_;
    /**
     * <pre>
     * Optional zero-amount, OP_RETURN output
     * </pre>
     *
     * <code>bytes output_op_return = 8;</code>
     * @return The outputOpReturn.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getOutputOpReturn() {
      return outputOpReturn_;
    }
    /**
     * <pre>
     * Optional zero-amount, OP_RETURN output
     * </pre>
     *
     * <code>bytes output_op_return = 8;</code>
     * @param value The outputOpReturn to set.
     */
    private void setOutputOpReturn(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      outputOpReturn_ = value;
    }
    /**
     * <pre>
     * Optional zero-amount, OP_RETURN output
     * </pre>
     *
     * <code>bytes output_op_return = 8;</code>
     */
    private void clearOutputOpReturn() {
      
      outputOpReturn_ = getDefaultInstance().getOutputOpReturn();
    }

    public static final int BLOCK_HEIGHT_FIELD_NUMBER = 9;
    private int blockHeight_;
    /**
     * <pre>
     * Horizen block height
     * </pre>
     *
     * <code>uint32 block_height = 9;</code>
     * @return The blockHeight.
     */
    @java.lang.Override
    public int getBlockHeight() {
      return blockHeight_;
    }
    /**
     * <pre>
     * Horizen block height
     * </pre>
     *
     * <code>uint32 block_height = 9;</code>
     * @param value The blockHeight to set.
     */
    private void setBlockHeight(int value) {
      
      blockHeight_ = value;
    }
    /**
     * <pre>
     * Horizen block height
     * </pre>
     *
     * <code>uint32 block_height = 9;</code>
     */
    private void clearBlockHeight() {
      
      blockHeight_ = 0;
    }

    public static final int BLOCK_HASH_FIELD_NUMBER = 10;
    private java.lang.String blockHash_;
    /**
     * <pre>
     * Horizen block hash
     * </pre>
     *
     * <code>string block_hash = 10;</code>
     * @return The blockHash.
     */
    @java.lang.Override
    public java.lang.String getBlockHash() {
      return blockHash_;
    }
    /**
     * <pre>
     * Horizen block hash
     * </pre>
     *
     * <code>string block_hash = 10;</code>
     * @return The bytes for blockHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getBlockHashBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(blockHash_);
    }
    /**
     * <pre>
     * Horizen block hash
     * </pre>
     *
     * <code>string block_hash = 10;</code>
     * @param value The blockHash to set.
     */
    private void setBlockHash(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      blockHash_ = value;
    }
    /**
     * <pre>
     * Horizen block hash
     * </pre>
     *
     * <code>string block_hash = 10;</code>
     */
    private void clearBlockHash() {
      
      blockHash_ = getDefaultInstance().getBlockHash();
    }
    /**
     * <pre>
     * Horizen block hash
     * </pre>
     *
     * <code>string block_hash = 10;</code>
     * @param value The bytes for blockHash to set.
     */
    private void setBlockHashBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      blockHash_ = value.toStringUtf8();
      
    }

    public static wallet.core.jni.proto.Bitcoin.TransactionPlan parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionPlan parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionPlan parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionPlan parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionPlan parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionPlan parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionPlan parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionPlan parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionPlan parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionPlan parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionPlan parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.TransactionPlan parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(wallet.core.jni.proto.Bitcoin.TransactionPlan prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Describes a preliminary transaction plan.
     * </pre>
     *
     * Protobuf type {@code TW.Bitcoin.Proto.TransactionPlan}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          wallet.core.jni.proto.Bitcoin.TransactionPlan, Builder> implements
        // @@protoc_insertion_point(builder_implements:TW.Bitcoin.Proto.TransactionPlan)
        wallet.core.jni.proto.Bitcoin.TransactionPlanOrBuilder {
      // Construct using wallet.core.jni.proto.Bitcoin.TransactionPlan.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Amount to be received at the other end.
       * </pre>
       *
       * <code>int64 amount = 1;</code>
       * @return The amount.
       */
      @java.lang.Override
      public long getAmount() {
        return instance.getAmount();
      }
      /**
       * <pre>
       * Amount to be received at the other end.
       * </pre>
       *
       * <code>int64 amount = 1;</code>
       * @param value The amount to set.
       * @return This builder for chaining.
       */
      public Builder setAmount(long value) {
        copyOnWrite();
        instance.setAmount(value);
        return this;
      }
      /**
       * <pre>
       * Amount to be received at the other end.
       * </pre>
       *
       * <code>int64 amount = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearAmount() {
        copyOnWrite();
        instance.clearAmount();
        return this;
      }

      /**
       * <pre>
       * Maximum available amount in all the input UTXOs.
       * </pre>
       *
       * <code>int64 available_amount = 2;</code>
       * @return The availableAmount.
       */
      @java.lang.Override
      public long getAvailableAmount() {
        return instance.getAvailableAmount();
      }
      /**
       * <pre>
       * Maximum available amount in all the input UTXOs.
       * </pre>
       *
       * <code>int64 available_amount = 2;</code>
       * @param value The availableAmount to set.
       * @return This builder for chaining.
       */
      public Builder setAvailableAmount(long value) {
        copyOnWrite();
        instance.setAvailableAmount(value);
        return this;
      }
      /**
       * <pre>
       * Maximum available amount in all the input UTXOs.
       * </pre>
       *
       * <code>int64 available_amount = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearAvailableAmount() {
        copyOnWrite();
        instance.clearAvailableAmount();
        return this;
      }

      /**
       * <pre>
       * Estimated transaction fee.
       * </pre>
       *
       * <code>int64 fee = 3;</code>
       * @return The fee.
       */
      @java.lang.Override
      public long getFee() {
        return instance.getFee();
      }
      /**
       * <pre>
       * Estimated transaction fee.
       * </pre>
       *
       * <code>int64 fee = 3;</code>
       * @param value The fee to set.
       * @return This builder for chaining.
       */
      public Builder setFee(long value) {
        copyOnWrite();
        instance.setFee(value);
        return this;
      }
      /**
       * <pre>
       * Estimated transaction fee.
       * </pre>
       *
       * <code>int64 fee = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFee() {
        copyOnWrite();
        instance.clearFee();
        return this;
      }

      /**
       * <pre>
       * Remaining change
       * </pre>
       *
       * <code>int64 change = 4;</code>
       * @return The change.
       */
      @java.lang.Override
      public long getChange() {
        return instance.getChange();
      }
      /**
       * <pre>
       * Remaining change
       * </pre>
       *
       * <code>int64 change = 4;</code>
       * @param value The change to set.
       * @return This builder for chaining.
       */
      public Builder setChange(long value) {
        copyOnWrite();
        instance.setChange(value);
        return this;
      }
      /**
       * <pre>
       * Remaining change
       * </pre>
       *
       * <code>int64 change = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearChange() {
        copyOnWrite();
        instance.clearChange();
        return this;
      }

      /**
       * <pre>
       * Selected unspent transaction outputs (subset of all input UTXOs)
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
       */
      @java.lang.Override
      public java.util.List<wallet.core.jni.proto.Bitcoin.UnspentTransaction> getUtxosList() {
        return java.util.Collections.unmodifiableList(
            instance.getUtxosList());
      }
      /**
       * <pre>
       * Selected unspent transaction outputs (subset of all input UTXOs)
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
       */
      @java.lang.Override
      public int getUtxosCount() {
        return instance.getUtxosCount();
      }/**
       * <pre>
       * Selected unspent transaction outputs (subset of all input UTXOs)
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
       */
      @java.lang.Override
      public wallet.core.jni.proto.Bitcoin.UnspentTransaction getUtxos(int index) {
        return instance.getUtxos(index);
      }
      /**
       * <pre>
       * Selected unspent transaction outputs (subset of all input UTXOs)
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
       */
      public Builder setUtxos(
          int index, wallet.core.jni.proto.Bitcoin.UnspentTransaction value) {
        copyOnWrite();
        instance.setUtxos(index, value);
        return this;
      }
      /**
       * <pre>
       * Selected unspent transaction outputs (subset of all input UTXOs)
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
       */
      public Builder setUtxos(
          int index, wallet.core.jni.proto.Bitcoin.UnspentTransaction.Builder builderForValue) {
        copyOnWrite();
        instance.setUtxos(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Selected unspent transaction outputs (subset of all input UTXOs)
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
       */
      public Builder addUtxos(wallet.core.jni.proto.Bitcoin.UnspentTransaction value) {
        copyOnWrite();
        instance.addUtxos(value);
        return this;
      }
      /**
       * <pre>
       * Selected unspent transaction outputs (subset of all input UTXOs)
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
       */
      public Builder addUtxos(
          int index, wallet.core.jni.proto.Bitcoin.UnspentTransaction value) {
        copyOnWrite();
        instance.addUtxos(index, value);
        return this;
      }
      /**
       * <pre>
       * Selected unspent transaction outputs (subset of all input UTXOs)
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
       */
      public Builder addUtxos(
          wallet.core.jni.proto.Bitcoin.UnspentTransaction.Builder builderForValue) {
        copyOnWrite();
        instance.addUtxos(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Selected unspent transaction outputs (subset of all input UTXOs)
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
       */
      public Builder addUtxos(
          int index, wallet.core.jni.proto.Bitcoin.UnspentTransaction.Builder builderForValue) {
        copyOnWrite();
        instance.addUtxos(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Selected unspent transaction outputs (subset of all input UTXOs)
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
       */
      public Builder addAllUtxos(
          java.lang.Iterable<? extends wallet.core.jni.proto.Bitcoin.UnspentTransaction> values) {
        copyOnWrite();
        instance.addAllUtxos(values);
        return this;
      }
      /**
       * <pre>
       * Selected unspent transaction outputs (subset of all input UTXOs)
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
       */
      public Builder clearUtxos() {
        copyOnWrite();
        instance.clearUtxos();
        return this;
      }
      /**
       * <pre>
       * Selected unspent transaction outputs (subset of all input UTXOs)
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.UnspentTransaction utxos = 5;</code>
       */
      public Builder removeUtxos(int index) {
        copyOnWrite();
        instance.removeUtxos(index);
        return this;
      }

      /**
       * <pre>
       * Zcash branch id
       * </pre>
       *
       * <code>bytes branch_id = 6;</code>
       * @return The branchId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getBranchId() {
        return instance.getBranchId();
      }
      /**
       * <pre>
       * Zcash branch id
       * </pre>
       *
       * <code>bytes branch_id = 6;</code>
       * @param value The branchId to set.
       * @return This builder for chaining.
       */
      public Builder setBranchId(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setBranchId(value);
        return this;
      }
      /**
       * <pre>
       * Zcash branch id
       * </pre>
       *
       * <code>bytes branch_id = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearBranchId() {
        copyOnWrite();
        instance.clearBranchId();
        return this;
      }

      /**
       * <pre>
       * Optional error
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 7;</code>
       * @return The enum numeric value on the wire for error.
       */
      @java.lang.Override
      public int getErrorValue() {
        return instance.getErrorValue();
      }
      /**
       * <pre>
       * Optional error
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 7;</code>
       * @param value The error to set.
       * @return This builder for chaining.
       */
      public Builder setErrorValue(int value) {
        copyOnWrite();
        instance.setErrorValue(value);
        return this;
      }
      /**
       * <pre>
       * Optional error
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 7;</code>
       * @return The error.
       */
      @java.lang.Override
      public wallet.core.jni.proto.Common.SigningError getError() {
        return instance.getError();
      }
      /**
       * <pre>
       * Optional error
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 7;</code>
       * @param value The enum numeric value on the wire for error to set.
       * @return This builder for chaining.
       */
      public Builder setError(wallet.core.jni.proto.Common.SigningError value) {
        copyOnWrite();
        instance.setError(value);
        return this;
      }
      /**
       * <pre>
       * Optional error
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearError() {
        copyOnWrite();
        instance.clearError();
        return this;
      }

      /**
       * <pre>
       * Optional zero-amount, OP_RETURN output
       * </pre>
       *
       * <code>bytes output_op_return = 8;</code>
       * @return The outputOpReturn.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getOutputOpReturn() {
        return instance.getOutputOpReturn();
      }
      /**
       * <pre>
       * Optional zero-amount, OP_RETURN output
       * </pre>
       *
       * <code>bytes output_op_return = 8;</code>
       * @param value The outputOpReturn to set.
       * @return This builder for chaining.
       */
      public Builder setOutputOpReturn(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setOutputOpReturn(value);
        return this;
      }
      /**
       * <pre>
       * Optional zero-amount, OP_RETURN output
       * </pre>
       *
       * <code>bytes output_op_return = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearOutputOpReturn() {
        copyOnWrite();
        instance.clearOutputOpReturn();
        return this;
      }

      /**
       * <pre>
       * Horizen block height
       * </pre>
       *
       * <code>uint32 block_height = 9;</code>
       * @return The blockHeight.
       */
      @java.lang.Override
      public int getBlockHeight() {
        return instance.getBlockHeight();
      }
      /**
       * <pre>
       * Horizen block height
       * </pre>
       *
       * <code>uint32 block_height = 9;</code>
       * @param value The blockHeight to set.
       * @return This builder for chaining.
       */
      public Builder setBlockHeight(int value) {
        copyOnWrite();
        instance.setBlockHeight(value);
        return this;
      }
      /**
       * <pre>
       * Horizen block height
       * </pre>
       *
       * <code>uint32 block_height = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearBlockHeight() {
        copyOnWrite();
        instance.clearBlockHeight();
        return this;
      }

      /**
       * <pre>
       * Horizen block hash
       * </pre>
       *
       * <code>string block_hash = 10;</code>
       * @return The blockHash.
       */
      @java.lang.Override
      public java.lang.String getBlockHash() {
        return instance.getBlockHash();
      }
      /**
       * <pre>
       * Horizen block hash
       * </pre>
       *
       * <code>string block_hash = 10;</code>
       * @return The bytes for blockHash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getBlockHashBytes() {
        return instance.getBlockHashBytes();
      }
      /**
       * <pre>
       * Horizen block hash
       * </pre>
       *
       * <code>string block_hash = 10;</code>
       * @param value The blockHash to set.
       * @return This builder for chaining.
       */
      public Builder setBlockHash(
          java.lang.String value) {
        copyOnWrite();
        instance.setBlockHash(value);
        return this;
      }
      /**
       * <pre>
       * Horizen block hash
       * </pre>
       *
       * <code>string block_hash = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearBlockHash() {
        copyOnWrite();
        instance.clearBlockHash();
        return this;
      }
      /**
       * <pre>
       * Horizen block hash
       * </pre>
       *
       * <code>string block_hash = 10;</code>
       * @param value The bytes for blockHash to set.
       * @return This builder for chaining.
       */
      public Builder setBlockHashBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setBlockHashBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TW.Bitcoin.Proto.TransactionPlan)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new wallet.core.jni.proto.Bitcoin.TransactionPlan();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "amount_",
              "availableAmount_",
              "fee_",
              "change_",
              "utxos_",
              wallet.core.jni.proto.Bitcoin.UnspentTransaction.class,
              "branchId_",
              "error_",
              "outputOpReturn_",
              "blockHeight_",
              "blockHash_",
            };
            java.lang.String info =
                "\u0000\n\u0000\u0000\u0001\n\n\u0000\u0001\u0000\u0001\u0002\u0002\u0002\u0003\u0002" +
                "\u0004\u0002\u0005\u001b\u0006\n\u0007\f\b\n\t\u000b\n\u0208";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<wallet.core.jni.proto.Bitcoin.TransactionPlan> parser = PARSER;
          if (parser == null) {
            synchronized (wallet.core.jni.proto.Bitcoin.TransactionPlan.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<wallet.core.jni.proto.Bitcoin.TransactionPlan>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.TransactionPlan)
    private static final wallet.core.jni.proto.Bitcoin.TransactionPlan DEFAULT_INSTANCE;
    static {
      TransactionPlan defaultInstance = new TransactionPlan();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        TransactionPlan.class, defaultInstance);
    }

    public static wallet.core.jni.proto.Bitcoin.TransactionPlan getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<TransactionPlan> PARSER;

    public static com.google.protobuf.Parser<TransactionPlan> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SigningOutputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TW.Bitcoin.Proto.SigningOutput)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Resulting transaction.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
     * @return Whether the transaction field is set.
     */
    boolean hasTransaction();
    /**
     * <pre>
     * Resulting transaction.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
     * @return The transaction.
     */
    wallet.core.jni.proto.Bitcoin.Transaction getTransaction();

    /**
     * <pre>
     * Signed and encoded transaction bytes.
     * </pre>
     *
     * <code>bytes encoded = 2;</code>
     * @return The encoded.
     */
    com.google.protobuf.ByteString getEncoded();

    /**
     * <pre>
     * Transaction ID (hash)
     * </pre>
     *
     * <code>string transaction_id = 3;</code>
     * @return The transactionId.
     */
    java.lang.String getTransactionId();
    /**
     * <pre>
     * Transaction ID (hash)
     * </pre>
     *
     * <code>string transaction_id = 3;</code>
     * @return The bytes for transactionId.
     */
    com.google.protobuf.ByteString
        getTransactionIdBytes();

    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 4;</code>
     * @return The enum numeric value on the wire for error.
     */
    int getErrorValue();
    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 4;</code>
     * @return The error.
     */
    wallet.core.jni.proto.Common.SigningError getError();

    /**
     * <pre>
     * error description
     * </pre>
     *
     * <code>string error_message = 5;</code>
     * @return The errorMessage.
     */
    java.lang.String getErrorMessage();
    /**
     * <pre>
     * error description
     * </pre>
     *
     * <code>string error_message = 5;</code>
     * @return The bytes for errorMessage.
     */
    com.google.protobuf.ByteString
        getErrorMessageBytes();
  }
  /**
   * <pre>
   * Result containing the signed and encoded transaction.
   * Note that the amount may be different than the requested amount to account for fees and available funds.
   * </pre>
   *
   * Protobuf type {@code TW.Bitcoin.Proto.SigningOutput}
   */
  public  static final class SigningOutput extends
      com.google.protobuf.GeneratedMessageLite<
          SigningOutput, SigningOutput.Builder> implements
      // @@protoc_insertion_point(message_implements:TW.Bitcoin.Proto.SigningOutput)
      SigningOutputOrBuilder {
    private SigningOutput() {
      encoded_ = com.google.protobuf.ByteString.EMPTY;
      transactionId_ = "";
      errorMessage_ = "";
    }
    public static final int TRANSACTION_FIELD_NUMBER = 1;
    private wallet.core.jni.proto.Bitcoin.Transaction transaction_;
    /**
     * <pre>
     * Resulting transaction.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
     */
    @java.lang.Override
    public boolean hasTransaction() {
      return transaction_ != null;
    }
    /**
     * <pre>
     * Resulting transaction.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
     */
    @java.lang.Override
    public wallet.core.jni.proto.Bitcoin.Transaction getTransaction() {
      return transaction_ == null ? wallet.core.jni.proto.Bitcoin.Transaction.getDefaultInstance() : transaction_;
    }
    /**
     * <pre>
     * Resulting transaction.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
     */
    private void setTransaction(wallet.core.jni.proto.Bitcoin.Transaction value) {
      value.getClass();
  transaction_ = value;
      
      }
    /**
     * <pre>
     * Resulting transaction.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
     */
    @java.lang.SuppressWarnings({"ReferenceEquality"})
    private void mergeTransaction(wallet.core.jni.proto.Bitcoin.Transaction value) {
      value.getClass();
  if (transaction_ != null &&
          transaction_ != wallet.core.jni.proto.Bitcoin.Transaction.getDefaultInstance()) {
        transaction_ =
          wallet.core.jni.proto.Bitcoin.Transaction.newBuilder(transaction_).mergeFrom(value).buildPartial();
      } else {
        transaction_ = value;
      }
      
    }
    /**
     * <pre>
     * Resulting transaction.
     * </pre>
     *
     * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
     */
    private void clearTransaction() {  transaction_ = null;
      
    }

    public static final int ENCODED_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString encoded_;
    /**
     * <pre>
     * Signed and encoded transaction bytes.
     * </pre>
     *
     * <code>bytes encoded = 2;</code>
     * @return The encoded.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getEncoded() {
      return encoded_;
    }
    /**
     * <pre>
     * Signed and encoded transaction bytes.
     * </pre>
     *
     * <code>bytes encoded = 2;</code>
     * @param value The encoded to set.
     */
    private void setEncoded(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      encoded_ = value;
    }
    /**
     * <pre>
     * Signed and encoded transaction bytes.
     * </pre>
     *
     * <code>bytes encoded = 2;</code>
     */
    private void clearEncoded() {
      
      encoded_ = getDefaultInstance().getEncoded();
    }

    public static final int TRANSACTION_ID_FIELD_NUMBER = 3;
    private java.lang.String transactionId_;
    /**
     * <pre>
     * Transaction ID (hash)
     * </pre>
     *
     * <code>string transaction_id = 3;</code>
     * @return The transactionId.
     */
    @java.lang.Override
    public java.lang.String getTransactionId() {
      return transactionId_;
    }
    /**
     * <pre>
     * Transaction ID (hash)
     * </pre>
     *
     * <code>string transaction_id = 3;</code>
     * @return The bytes for transactionId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTransactionIdBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(transactionId_);
    }
    /**
     * <pre>
     * Transaction ID (hash)
     * </pre>
     *
     * <code>string transaction_id = 3;</code>
     * @param value The transactionId to set.
     */
    private void setTransactionId(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      transactionId_ = value;
    }
    /**
     * <pre>
     * Transaction ID (hash)
     * </pre>
     *
     * <code>string transaction_id = 3;</code>
     */
    private void clearTransactionId() {
      
      transactionId_ = getDefaultInstance().getTransactionId();
    }
    /**
     * <pre>
     * Transaction ID (hash)
     * </pre>
     *
     * <code>string transaction_id = 3;</code>
     * @param value The bytes for transactionId to set.
     */
    private void setTransactionIdBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      transactionId_ = value.toStringUtf8();
      
    }

    public static final int ERROR_FIELD_NUMBER = 4;
    private int error_;
    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 4;</code>
     * @return The enum numeric value on the wire for error.
     */
    @java.lang.Override
    public int getErrorValue() {
      return error_;
    }
    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 4;</code>
     * @return The error.
     */
    @java.lang.Override
    public wallet.core.jni.proto.Common.SigningError getError() {
      wallet.core.jni.proto.Common.SigningError result = wallet.core.jni.proto.Common.SigningError.forNumber(error_);
      return result == null ? wallet.core.jni.proto.Common.SigningError.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 4;</code>
     * @param value The enum numeric value on the wire for error to set.
     */
    private void setErrorValue(int value) {
        error_ = value;
    }
    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 4;</code>
     * @param value The error to set.
     */
    private void setError(wallet.core.jni.proto.Common.SigningError value) {
      error_ = value.getNumber();
      
    }
    /**
     * <pre>
     * Optional error
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 4;</code>
     */
    private void clearError() {
      
      error_ = 0;
    }

    public static final int ERROR_MESSAGE_FIELD_NUMBER = 5;
    private java.lang.String errorMessage_;
    /**
     * <pre>
     * error description
     * </pre>
     *
     * <code>string error_message = 5;</code>
     * @return The errorMessage.
     */
    @java.lang.Override
    public java.lang.String getErrorMessage() {
      return errorMessage_;
    }
    /**
     * <pre>
     * error description
     * </pre>
     *
     * <code>string error_message = 5;</code>
     * @return The bytes for errorMessage.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getErrorMessageBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(errorMessage_);
    }
    /**
     * <pre>
     * error description
     * </pre>
     *
     * <code>string error_message = 5;</code>
     * @param value The errorMessage to set.
     */
    private void setErrorMessage(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      errorMessage_ = value;
    }
    /**
     * <pre>
     * error description
     * </pre>
     *
     * <code>string error_message = 5;</code>
     */
    private void clearErrorMessage() {
      
      errorMessage_ = getDefaultInstance().getErrorMessage();
    }
    /**
     * <pre>
     * error description
     * </pre>
     *
     * <code>string error_message = 5;</code>
     * @param value The bytes for errorMessage to set.
     */
    private void setErrorMessageBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      errorMessage_ = value.toStringUtf8();
      
    }

    public static wallet.core.jni.proto.Bitcoin.SigningOutput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningOutput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningOutput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningOutput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningOutput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningOutput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningOutput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningOutput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningOutput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningOutput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningOutput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.SigningOutput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(wallet.core.jni.proto.Bitcoin.SigningOutput prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Result containing the signed and encoded transaction.
     * Note that the amount may be different than the requested amount to account for fees and available funds.
     * </pre>
     *
     * Protobuf type {@code TW.Bitcoin.Proto.SigningOutput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          wallet.core.jni.proto.Bitcoin.SigningOutput, Builder> implements
        // @@protoc_insertion_point(builder_implements:TW.Bitcoin.Proto.SigningOutput)
        wallet.core.jni.proto.Bitcoin.SigningOutputOrBuilder {
      // Construct using wallet.core.jni.proto.Bitcoin.SigningOutput.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Resulting transaction.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
       */
      @java.lang.Override
      public boolean hasTransaction() {
        return instance.hasTransaction();
      }
      /**
       * <pre>
       * Resulting transaction.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
       */
      @java.lang.Override
      public wallet.core.jni.proto.Bitcoin.Transaction getTransaction() {
        return instance.getTransaction();
      }
      /**
       * <pre>
       * Resulting transaction.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
       */
      public Builder setTransaction(wallet.core.jni.proto.Bitcoin.Transaction value) {
        copyOnWrite();
        instance.setTransaction(value);
        return this;
        }
      /**
       * <pre>
       * Resulting transaction.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
       */
      public Builder setTransaction(
          wallet.core.jni.proto.Bitcoin.Transaction.Builder builderForValue) {
        copyOnWrite();
        instance.setTransaction(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       * Resulting transaction.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
       */
      public Builder mergeTransaction(wallet.core.jni.proto.Bitcoin.Transaction value) {
        copyOnWrite();
        instance.mergeTransaction(value);
        return this;
      }
      /**
       * <pre>
       * Resulting transaction.
       * </pre>
       *
       * <code>.TW.Bitcoin.Proto.Transaction transaction = 1;</code>
       */
      public Builder clearTransaction() {  copyOnWrite();
        instance.clearTransaction();
        return this;
      }

      /**
       * <pre>
       * Signed and encoded transaction bytes.
       * </pre>
       *
       * <code>bytes encoded = 2;</code>
       * @return The encoded.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getEncoded() {
        return instance.getEncoded();
      }
      /**
       * <pre>
       * Signed and encoded transaction bytes.
       * </pre>
       *
       * <code>bytes encoded = 2;</code>
       * @param value The encoded to set.
       * @return This builder for chaining.
       */
      public Builder setEncoded(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setEncoded(value);
        return this;
      }
      /**
       * <pre>
       * Signed and encoded transaction bytes.
       * </pre>
       *
       * <code>bytes encoded = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearEncoded() {
        copyOnWrite();
        instance.clearEncoded();
        return this;
      }

      /**
       * <pre>
       * Transaction ID (hash)
       * </pre>
       *
       * <code>string transaction_id = 3;</code>
       * @return The transactionId.
       */
      @java.lang.Override
      public java.lang.String getTransactionId() {
        return instance.getTransactionId();
      }
      /**
       * <pre>
       * Transaction ID (hash)
       * </pre>
       *
       * <code>string transaction_id = 3;</code>
       * @return The bytes for transactionId.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getTransactionIdBytes() {
        return instance.getTransactionIdBytes();
      }
      /**
       * <pre>
       * Transaction ID (hash)
       * </pre>
       *
       * <code>string transaction_id = 3;</code>
       * @param value The transactionId to set.
       * @return This builder for chaining.
       */
      public Builder setTransactionId(
          java.lang.String value) {
        copyOnWrite();
        instance.setTransactionId(value);
        return this;
      }
      /**
       * <pre>
       * Transaction ID (hash)
       * </pre>
       *
       * <code>string transaction_id = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTransactionId() {
        copyOnWrite();
        instance.clearTransactionId();
        return this;
      }
      /**
       * <pre>
       * Transaction ID (hash)
       * </pre>
       *
       * <code>string transaction_id = 3;</code>
       * @param value The bytes for transactionId to set.
       * @return This builder for chaining.
       */
      public Builder setTransactionIdBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setTransactionIdBytes(value);
        return this;
      }

      /**
       * <pre>
       * Optional error
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 4;</code>
       * @return The enum numeric value on the wire for error.
       */
      @java.lang.Override
      public int getErrorValue() {
        return instance.getErrorValue();
      }
      /**
       * <pre>
       * Optional error
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 4;</code>
       * @param value The error to set.
       * @return This builder for chaining.
       */
      public Builder setErrorValue(int value) {
        copyOnWrite();
        instance.setErrorValue(value);
        return this;
      }
      /**
       * <pre>
       * Optional error
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 4;</code>
       * @return The error.
       */
      @java.lang.Override
      public wallet.core.jni.proto.Common.SigningError getError() {
        return instance.getError();
      }
      /**
       * <pre>
       * Optional error
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 4;</code>
       * @param value The enum numeric value on the wire for error to set.
       * @return This builder for chaining.
       */
      public Builder setError(wallet.core.jni.proto.Common.SigningError value) {
        copyOnWrite();
        instance.setError(value);
        return this;
      }
      /**
       * <pre>
       * Optional error
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearError() {
        copyOnWrite();
        instance.clearError();
        return this;
      }

      /**
       * <pre>
       * error description
       * </pre>
       *
       * <code>string error_message = 5;</code>
       * @return The errorMessage.
       */
      @java.lang.Override
      public java.lang.String getErrorMessage() {
        return instance.getErrorMessage();
      }
      /**
       * <pre>
       * error description
       * </pre>
       *
       * <code>string error_message = 5;</code>
       * @return The bytes for errorMessage.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getErrorMessageBytes() {
        return instance.getErrorMessageBytes();
      }
      /**
       * <pre>
       * error description
       * </pre>
       *
       * <code>string error_message = 5;</code>
       * @param value The errorMessage to set.
       * @return This builder for chaining.
       */
      public Builder setErrorMessage(
          java.lang.String value) {
        copyOnWrite();
        instance.setErrorMessage(value);
        return this;
      }
      /**
       * <pre>
       * error description
       * </pre>
       *
       * <code>string error_message = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearErrorMessage() {
        copyOnWrite();
        instance.clearErrorMessage();
        return this;
      }
      /**
       * <pre>
       * error description
       * </pre>
       *
       * <code>string error_message = 5;</code>
       * @param value The bytes for errorMessage to set.
       * @return This builder for chaining.
       */
      public Builder setErrorMessageBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setErrorMessageBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TW.Bitcoin.Proto.SigningOutput)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new wallet.core.jni.proto.Bitcoin.SigningOutput();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "transaction_",
              "encoded_",
              "transactionId_",
              "error_",
              "errorMessage_",
            };
            java.lang.String info =
                "\u0000\u0005\u0000\u0000\u0001\u0005\u0005\u0000\u0000\u0000\u0001\t\u0002\n\u0003" +
                "\u0208\u0004\f\u0005\u0208";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<wallet.core.jni.proto.Bitcoin.SigningOutput> parser = PARSER;
          if (parser == null) {
            synchronized (wallet.core.jni.proto.Bitcoin.SigningOutput.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<wallet.core.jni.proto.Bitcoin.SigningOutput>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.SigningOutput)
    private static final wallet.core.jni.proto.Bitcoin.SigningOutput DEFAULT_INSTANCE;
    static {
      SigningOutput defaultInstance = new SigningOutput();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        SigningOutput.class, defaultInstance);
    }

    public static wallet.core.jni.proto.Bitcoin.SigningOutput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SigningOutput> PARSER;

    public static com.google.protobuf.Parser<SigningOutput> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface HashPublicKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TW.Bitcoin.Proto.HashPublicKey)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; Pre-image data hash that will be used for signing
     * </pre>
     *
     * <code>bytes data_hash = 1;</code>
     * @return The dataHash.
     */
    com.google.protobuf.ByteString getDataHash();

    /**
     * <pre>
     *&#47; public key hash used for signing
     * </pre>
     *
     * <code>bytes public_key_hash = 2;</code>
     * @return The publicKeyHash.
     */
    com.google.protobuf.ByteString getPublicKeyHash();
  }
  /**
   * <pre>
   *&#47; Pre-image hash to be used for signing
   * </pre>
   *
   * Protobuf type {@code TW.Bitcoin.Proto.HashPublicKey}
   */
  public  static final class HashPublicKey extends
      com.google.protobuf.GeneratedMessageLite<
          HashPublicKey, HashPublicKey.Builder> implements
      // @@protoc_insertion_point(message_implements:TW.Bitcoin.Proto.HashPublicKey)
      HashPublicKeyOrBuilder {
    private HashPublicKey() {
      dataHash_ = com.google.protobuf.ByteString.EMPTY;
      publicKeyHash_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int DATA_HASH_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString dataHash_;
    /**
     * <pre>
     *&#47; Pre-image data hash that will be used for signing
     * </pre>
     *
     * <code>bytes data_hash = 1;</code>
     * @return The dataHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getDataHash() {
      return dataHash_;
    }
    /**
     * <pre>
     *&#47; Pre-image data hash that will be used for signing
     * </pre>
     *
     * <code>bytes data_hash = 1;</code>
     * @param value The dataHash to set.
     */
    private void setDataHash(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      dataHash_ = value;
    }
    /**
     * <pre>
     *&#47; Pre-image data hash that will be used for signing
     * </pre>
     *
     * <code>bytes data_hash = 1;</code>
     */
    private void clearDataHash() {
      
      dataHash_ = getDefaultInstance().getDataHash();
    }

    public static final int PUBLIC_KEY_HASH_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString publicKeyHash_;
    /**
     * <pre>
     *&#47; public key hash used for signing
     * </pre>
     *
     * <code>bytes public_key_hash = 2;</code>
     * @return The publicKeyHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPublicKeyHash() {
      return publicKeyHash_;
    }
    /**
     * <pre>
     *&#47; public key hash used for signing
     * </pre>
     *
     * <code>bytes public_key_hash = 2;</code>
     * @param value The publicKeyHash to set.
     */
    private void setPublicKeyHash(com.google.protobuf.ByteString value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      publicKeyHash_ = value;
    }
    /**
     * <pre>
     *&#47; public key hash used for signing
     * </pre>
     *
     * <code>bytes public_key_hash = 2;</code>
     */
    private void clearPublicKeyHash() {
      
      publicKeyHash_ = getDefaultInstance().getPublicKeyHash();
    }

    public static wallet.core.jni.proto.Bitcoin.HashPublicKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.HashPublicKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.HashPublicKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.HashPublicKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.HashPublicKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.HashPublicKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.HashPublicKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.HashPublicKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.HashPublicKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.HashPublicKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.HashPublicKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.HashPublicKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(wallet.core.jni.proto.Bitcoin.HashPublicKey prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     *&#47; Pre-image hash to be used for signing
     * </pre>
     *
     * Protobuf type {@code TW.Bitcoin.Proto.HashPublicKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          wallet.core.jni.proto.Bitcoin.HashPublicKey, Builder> implements
        // @@protoc_insertion_point(builder_implements:TW.Bitcoin.Proto.HashPublicKey)
        wallet.core.jni.proto.Bitcoin.HashPublicKeyOrBuilder {
      // Construct using wallet.core.jni.proto.Bitcoin.HashPublicKey.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; Pre-image data hash that will be used for signing
       * </pre>
       *
       * <code>bytes data_hash = 1;</code>
       * @return The dataHash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getDataHash() {
        return instance.getDataHash();
      }
      /**
       * <pre>
       *&#47; Pre-image data hash that will be used for signing
       * </pre>
       *
       * <code>bytes data_hash = 1;</code>
       * @param value The dataHash to set.
       * @return This builder for chaining.
       */
      public Builder setDataHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setDataHash(value);
        return this;
      }
      /**
       * <pre>
       *&#47; Pre-image data hash that will be used for signing
       * </pre>
       *
       * <code>bytes data_hash = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDataHash() {
        copyOnWrite();
        instance.clearDataHash();
        return this;
      }

      /**
       * <pre>
       *&#47; public key hash used for signing
       * </pre>
       *
       * <code>bytes public_key_hash = 2;</code>
       * @return The publicKeyHash.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPublicKeyHash() {
        return instance.getPublicKeyHash();
      }
      /**
       * <pre>
       *&#47; public key hash used for signing
       * </pre>
       *
       * <code>bytes public_key_hash = 2;</code>
       * @param value The publicKeyHash to set.
       * @return This builder for chaining.
       */
      public Builder setPublicKeyHash(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPublicKeyHash(value);
        return this;
      }
      /**
       * <pre>
       *&#47; public key hash used for signing
       * </pre>
       *
       * <code>bytes public_key_hash = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPublicKeyHash() {
        copyOnWrite();
        instance.clearPublicKeyHash();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TW.Bitcoin.Proto.HashPublicKey)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new wallet.core.jni.proto.Bitcoin.HashPublicKey();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "dataHash_",
              "publicKeyHash_",
            };
            java.lang.String info =
                "\u0000\u0002\u0000\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001\n\u0002\n";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<wallet.core.jni.proto.Bitcoin.HashPublicKey> parser = PARSER;
          if (parser == null) {
            synchronized (wallet.core.jni.proto.Bitcoin.HashPublicKey.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<wallet.core.jni.proto.Bitcoin.HashPublicKey>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.HashPublicKey)
    private static final wallet.core.jni.proto.Bitcoin.HashPublicKey DEFAULT_INSTANCE;
    static {
      HashPublicKey defaultInstance = new HashPublicKey();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        HashPublicKey.class, defaultInstance);
    }

    public static wallet.core.jni.proto.Bitcoin.HashPublicKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<HashPublicKey> PARSER;

    public static com.google.protobuf.Parser<HashPublicKey> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface PreSigningOutputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TW.Bitcoin.Proto.PreSigningOutput)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    java.util.List<wallet.core.jni.proto.Bitcoin.HashPublicKey> 
        getHashPublicKeysList();
    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    wallet.core.jni.proto.Bitcoin.HashPublicKey getHashPublicKeys(int index);
    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    int getHashPublicKeysCount();

    /**
     * <pre>
     *&#47; error code, 0 is ok, other codes will be treated as errors
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 2;</code>
     * @return The enum numeric value on the wire for error.
     */
    int getErrorValue();
    /**
     * <pre>
     *&#47; error code, 0 is ok, other codes will be treated as errors
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 2;</code>
     * @return The error.
     */
    wallet.core.jni.proto.Common.SigningError getError();

    /**
     * <pre>
     *&#47; error description
     * </pre>
     *
     * <code>string error_message = 3;</code>
     * @return The errorMessage.
     */
    java.lang.String getErrorMessage();
    /**
     * <pre>
     *&#47; error description
     * </pre>
     *
     * <code>string error_message = 3;</code>
     * @return The bytes for errorMessage.
     */
    com.google.protobuf.ByteString
        getErrorMessageBytes();
  }
  /**
   * <pre>
   *&#47; Transaction pre-signing output
   * </pre>
   *
   * Protobuf type {@code TW.Bitcoin.Proto.PreSigningOutput}
   */
  public  static final class PreSigningOutput extends
      com.google.protobuf.GeneratedMessageLite<
          PreSigningOutput, PreSigningOutput.Builder> implements
      // @@protoc_insertion_point(message_implements:TW.Bitcoin.Proto.PreSigningOutput)
      PreSigningOutputOrBuilder {
    private PreSigningOutput() {
      hashPublicKeys_ = emptyProtobufList();
      errorMessage_ = "";
    }
    public static final int HASH_PUBLIC_KEYS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<wallet.core.jni.proto.Bitcoin.HashPublicKey> hashPublicKeys_;
    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    @java.lang.Override
    public java.util.List<wallet.core.jni.proto.Bitcoin.HashPublicKey> getHashPublicKeysList() {
      return hashPublicKeys_;
    }
    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    public java.util.List<? extends wallet.core.jni.proto.Bitcoin.HashPublicKeyOrBuilder> 
        getHashPublicKeysOrBuilderList() {
      return hashPublicKeys_;
    }
    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    @java.lang.Override
    public int getHashPublicKeysCount() {
      return hashPublicKeys_.size();
    }
    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    @java.lang.Override
    public wallet.core.jni.proto.Bitcoin.HashPublicKey getHashPublicKeys(int index) {
      return hashPublicKeys_.get(index);
    }
    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    public wallet.core.jni.proto.Bitcoin.HashPublicKeyOrBuilder getHashPublicKeysOrBuilder(
        int index) {
      return hashPublicKeys_.get(index);
    }
    private void ensureHashPublicKeysIsMutable() {
      com.google.protobuf.Internal.ProtobufList<wallet.core.jni.proto.Bitcoin.HashPublicKey> tmp = hashPublicKeys_;
      if (!tmp.isModifiable()) {
        hashPublicKeys_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
       }
    }

    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    private void setHashPublicKeys(
        int index, wallet.core.jni.proto.Bitcoin.HashPublicKey value) {
      value.getClass();
  ensureHashPublicKeysIsMutable();
      hashPublicKeys_.set(index, value);
    }
    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    private void addHashPublicKeys(wallet.core.jni.proto.Bitcoin.HashPublicKey value) {
      value.getClass();
  ensureHashPublicKeysIsMutable();
      hashPublicKeys_.add(value);
    }
    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    private void addHashPublicKeys(
        int index, wallet.core.jni.proto.Bitcoin.HashPublicKey value) {
      value.getClass();
  ensureHashPublicKeysIsMutable();
      hashPublicKeys_.add(index, value);
    }
    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    private void addAllHashPublicKeys(
        java.lang.Iterable<? extends wallet.core.jni.proto.Bitcoin.HashPublicKey> values) {
      ensureHashPublicKeysIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, hashPublicKeys_);
    }
    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    private void clearHashPublicKeys() {
      hashPublicKeys_ = emptyProtobufList();
    }
    /**
     * <pre>
     *&#47; hash, public key list
     * </pre>
     *
     * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
     */
    private void removeHashPublicKeys(int index) {
      ensureHashPublicKeysIsMutable();
      hashPublicKeys_.remove(index);
    }

    public static final int ERROR_FIELD_NUMBER = 2;
    private int error_;
    /**
     * <pre>
     *&#47; error code, 0 is ok, other codes will be treated as errors
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 2;</code>
     * @return The enum numeric value on the wire for error.
     */
    @java.lang.Override
    public int getErrorValue() {
      return error_;
    }
    /**
     * <pre>
     *&#47; error code, 0 is ok, other codes will be treated as errors
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 2;</code>
     * @return The error.
     */
    @java.lang.Override
    public wallet.core.jni.proto.Common.SigningError getError() {
      wallet.core.jni.proto.Common.SigningError result = wallet.core.jni.proto.Common.SigningError.forNumber(error_);
      return result == null ? wallet.core.jni.proto.Common.SigningError.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     *&#47; error code, 0 is ok, other codes will be treated as errors
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 2;</code>
     * @param value The enum numeric value on the wire for error to set.
     */
    private void setErrorValue(int value) {
        error_ = value;
    }
    /**
     * <pre>
     *&#47; error code, 0 is ok, other codes will be treated as errors
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 2;</code>
     * @param value The error to set.
     */
    private void setError(wallet.core.jni.proto.Common.SigningError value) {
      error_ = value.getNumber();
      
    }
    /**
     * <pre>
     *&#47; error code, 0 is ok, other codes will be treated as errors
     * </pre>
     *
     * <code>.TW.Common.Proto.SigningError error = 2;</code>
     */
    private void clearError() {
      
      error_ = 0;
    }

    public static final int ERROR_MESSAGE_FIELD_NUMBER = 3;
    private java.lang.String errorMessage_;
    /**
     * <pre>
     *&#47; error description
     * </pre>
     *
     * <code>string error_message = 3;</code>
     * @return The errorMessage.
     */
    @java.lang.Override
    public java.lang.String getErrorMessage() {
      return errorMessage_;
    }
    /**
     * <pre>
     *&#47; error description
     * </pre>
     *
     * <code>string error_message = 3;</code>
     * @return The bytes for errorMessage.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getErrorMessageBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(errorMessage_);
    }
    /**
     * <pre>
     *&#47; error description
     * </pre>
     *
     * <code>string error_message = 3;</code>
     * @param value The errorMessage to set.
     */
    private void setErrorMessage(
        java.lang.String value) {
      java.lang.Class<?> valueClass = value.getClass();
  
      errorMessage_ = value;
    }
    /**
     * <pre>
     *&#47; error description
     * </pre>
     *
     * <code>string error_message = 3;</code>
     */
    private void clearErrorMessage() {
      
      errorMessage_ = getDefaultInstance().getErrorMessage();
    }
    /**
     * <pre>
     *&#47; error description
     * </pre>
     *
     * <code>string error_message = 3;</code>
     * @param value The bytes for errorMessage to set.
     */
    private void setErrorMessageBytes(
        com.google.protobuf.ByteString value) {
      checkByteStringIsUtf8(value);
      errorMessage_ = value.toStringUtf8();
      
    }

    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return (Builder) DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(wallet.core.jni.proto.Bitcoin.PreSigningOutput prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     *&#47; Transaction pre-signing output
     * </pre>
     *
     * Protobuf type {@code TW.Bitcoin.Proto.PreSigningOutput}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          wallet.core.jni.proto.Bitcoin.PreSigningOutput, Builder> implements
        // @@protoc_insertion_point(builder_implements:TW.Bitcoin.Proto.PreSigningOutput)
        wallet.core.jni.proto.Bitcoin.PreSigningOutputOrBuilder {
      // Construct using wallet.core.jni.proto.Bitcoin.PreSigningOutput.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       *&#47; hash, public key list
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
       */
      @java.lang.Override
      public java.util.List<wallet.core.jni.proto.Bitcoin.HashPublicKey> getHashPublicKeysList() {
        return java.util.Collections.unmodifiableList(
            instance.getHashPublicKeysList());
      }
      /**
       * <pre>
       *&#47; hash, public key list
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
       */
      @java.lang.Override
      public int getHashPublicKeysCount() {
        return instance.getHashPublicKeysCount();
      }/**
       * <pre>
       *&#47; hash, public key list
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
       */
      @java.lang.Override
      public wallet.core.jni.proto.Bitcoin.HashPublicKey getHashPublicKeys(int index) {
        return instance.getHashPublicKeys(index);
      }
      /**
       * <pre>
       *&#47; hash, public key list
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
       */
      public Builder setHashPublicKeys(
          int index, wallet.core.jni.proto.Bitcoin.HashPublicKey value) {
        copyOnWrite();
        instance.setHashPublicKeys(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; hash, public key list
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
       */
      public Builder setHashPublicKeys(
          int index, wallet.core.jni.proto.Bitcoin.HashPublicKey.Builder builderForValue) {
        copyOnWrite();
        instance.setHashPublicKeys(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       *&#47; hash, public key list
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
       */
      public Builder addHashPublicKeys(wallet.core.jni.proto.Bitcoin.HashPublicKey value) {
        copyOnWrite();
        instance.addHashPublicKeys(value);
        return this;
      }
      /**
       * <pre>
       *&#47; hash, public key list
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
       */
      public Builder addHashPublicKeys(
          int index, wallet.core.jni.proto.Bitcoin.HashPublicKey value) {
        copyOnWrite();
        instance.addHashPublicKeys(index, value);
        return this;
      }
      /**
       * <pre>
       *&#47; hash, public key list
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
       */
      public Builder addHashPublicKeys(
          wallet.core.jni.proto.Bitcoin.HashPublicKey.Builder builderForValue) {
        copyOnWrite();
        instance.addHashPublicKeys(builderForValue.build());
        return this;
      }
      /**
       * <pre>
       *&#47; hash, public key list
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
       */
      public Builder addHashPublicKeys(
          int index, wallet.core.jni.proto.Bitcoin.HashPublicKey.Builder builderForValue) {
        copyOnWrite();
        instance.addHashPublicKeys(index,
            builderForValue.build());
        return this;
      }
      /**
       * <pre>
       *&#47; hash, public key list
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
       */
      public Builder addAllHashPublicKeys(
          java.lang.Iterable<? extends wallet.core.jni.proto.Bitcoin.HashPublicKey> values) {
        copyOnWrite();
        instance.addAllHashPublicKeys(values);
        return this;
      }
      /**
       * <pre>
       *&#47; hash, public key list
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
       */
      public Builder clearHashPublicKeys() {
        copyOnWrite();
        instance.clearHashPublicKeys();
        return this;
      }
      /**
       * <pre>
       *&#47; hash, public key list
       * </pre>
       *
       * <code>repeated .TW.Bitcoin.Proto.HashPublicKey hash_public_keys = 1;</code>
       */
      public Builder removeHashPublicKeys(int index) {
        copyOnWrite();
        instance.removeHashPublicKeys(index);
        return this;
      }

      /**
       * <pre>
       *&#47; error code, 0 is ok, other codes will be treated as errors
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 2;</code>
       * @return The enum numeric value on the wire for error.
       */
      @java.lang.Override
      public int getErrorValue() {
        return instance.getErrorValue();
      }
      /**
       * <pre>
       *&#47; error code, 0 is ok, other codes will be treated as errors
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 2;</code>
       * @param value The error to set.
       * @return This builder for chaining.
       */
      public Builder setErrorValue(int value) {
        copyOnWrite();
        instance.setErrorValue(value);
        return this;
      }
      /**
       * <pre>
       *&#47; error code, 0 is ok, other codes will be treated as errors
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 2;</code>
       * @return The error.
       */
      @java.lang.Override
      public wallet.core.jni.proto.Common.SigningError getError() {
        return instance.getError();
      }
      /**
       * <pre>
       *&#47; error code, 0 is ok, other codes will be treated as errors
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 2;</code>
       * @param value The enum numeric value on the wire for error to set.
       * @return This builder for chaining.
       */
      public Builder setError(wallet.core.jni.proto.Common.SigningError value) {
        copyOnWrite();
        instance.setError(value);
        return this;
      }
      /**
       * <pre>
       *&#47; error code, 0 is ok, other codes will be treated as errors
       * </pre>
       *
       * <code>.TW.Common.Proto.SigningError error = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearError() {
        copyOnWrite();
        instance.clearError();
        return this;
      }

      /**
       * <pre>
       *&#47; error description
       * </pre>
       *
       * <code>string error_message = 3;</code>
       * @return The errorMessage.
       */
      @java.lang.Override
      public java.lang.String getErrorMessage() {
        return instance.getErrorMessage();
      }
      /**
       * <pre>
       *&#47; error description
       * </pre>
       *
       * <code>string error_message = 3;</code>
       * @return The bytes for errorMessage.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getErrorMessageBytes() {
        return instance.getErrorMessageBytes();
      }
      /**
       * <pre>
       *&#47; error description
       * </pre>
       *
       * <code>string error_message = 3;</code>
       * @param value The errorMessage to set.
       * @return This builder for chaining.
       */
      public Builder setErrorMessage(
          java.lang.String value) {
        copyOnWrite();
        instance.setErrorMessage(value);
        return this;
      }
      /**
       * <pre>
       *&#47; error description
       * </pre>
       *
       * <code>string error_message = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearErrorMessage() {
        copyOnWrite();
        instance.clearErrorMessage();
        return this;
      }
      /**
       * <pre>
       *&#47; error description
       * </pre>
       *
       * <code>string error_message = 3;</code>
       * @param value The bytes for errorMessage to set.
       * @return This builder for chaining.
       */
      public Builder setErrorMessageBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setErrorMessageBytes(value);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TW.Bitcoin.Proto.PreSigningOutput)
    }
    @java.lang.Override
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new wallet.core.jni.proto.Bitcoin.PreSigningOutput();
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case BUILD_MESSAGE_INFO: {
            java.lang.Object[] objects = new java.lang.Object[] {
              "hashPublicKeys_",
              wallet.core.jni.proto.Bitcoin.HashPublicKey.class,
              "error_",
              "errorMessage_",
            };
            java.lang.String info =
                "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0001\u0000\u0001\u001b\u0002\f" +
                "\u0003\u0208";
            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          com.google.protobuf.Parser<wallet.core.jni.proto.Bitcoin.PreSigningOutput> parser = PARSER;
          if (parser == null) {
            synchronized (wallet.core.jni.proto.Bitcoin.PreSigningOutput.class) {
              parser = PARSER;
              if (parser == null) {
                parser =
                    new DefaultInstanceBasedParser<wallet.core.jni.proto.Bitcoin.PreSigningOutput>(
                        DEFAULT_INSTANCE);
                PARSER = parser;
              }
            }
          }
          return parser;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:TW.Bitcoin.Proto.PreSigningOutput)
    private static final wallet.core.jni.proto.Bitcoin.PreSigningOutput DEFAULT_INSTANCE;
    static {
      PreSigningOutput defaultInstance = new PreSigningOutput();
      // New instances are implicitly immutable so no need to make
      // immutable.
      DEFAULT_INSTANCE = defaultInstance;
      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
        PreSigningOutput.class, defaultInstance);
    }

    public static wallet.core.jni.proto.Bitcoin.PreSigningOutput getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<PreSigningOutput> PARSER;

    public static com.google.protobuf.Parser<PreSigningOutput> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
