// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

package wallet.core.jni.proto;

public final class Common {
  private Common() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   * Error codes, used in multiple blockchains.
   * </pre>
   *
   * Protobuf enum {@code TW.Common.Proto.SigningError}
   */
  public enum SigningError
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * This is the OK case, with value=0
     * </pre>
     *
     * <code>OK = 0;</code>
     */
    OK(0),
    /**
     * <pre>
     * Chain-generic codes:
     * Generic error (used if there is no suitable specific error is adequate)
     * </pre>
     *
     * <code>Error_general = 1;</code>
     */
    Error_general(1),
    /**
     * <pre>
     * Internal error, indicates some very unusual, unexpected case
     * </pre>
     *
     * <code>Error_internal = 2;</code>
     */
    Error_internal(2),
    /**
     * <pre>
     * Chain-generic codes, input related:
     * Low balance: the sender balance is not enough to cover the send and other auxiliary amount such as fee, deposit, or minimal balance.
     * </pre>
     *
     * <code>Error_low_balance = 3;</code>
     */
    Error_low_balance(3),
    /**
     * <pre>
     * Requested amount is zero, send of 0 makes no sense
     * </pre>
     *
     * <code>Error_zero_amount_requested = 4;</code>
     */
    Error_zero_amount_requested(4),
    /**
     * <pre>
     * One required key is missing (too few or wrong keys are provided)
     * </pre>
     *
     * <code>Error_missing_private_key = 5;</code>
     */
    Error_missing_private_key(5),
    /**
     * <pre>
     * A private key provided is invalid (e.g. wrong size, usually should be 32 bytes)
     * </pre>
     *
     * <code>Error_invalid_private_key = 15;</code>
     */
    Error_invalid_private_key(15),
    /**
     * <pre>
     * A provided address (e.g. destination address) is invalid
     * </pre>
     *
     * <code>Error_invalid_address = 16;</code>
     */
    Error_invalid_address(16),
    /**
     * <pre>
     * A provided input UTXO is invalid
     * </pre>
     *
     * <code>Error_invalid_utxo = 17;</code>
     */
    Error_invalid_utxo(17),
    /**
     * <pre>
     * The amount of an input UTXO is invalid
     * </pre>
     *
     * <code>Error_invalid_utxo_amount = 18;</code>
     */
    Error_invalid_utxo_amount(18),
    /**
     * <pre>
     * Chain-generic, fee related:
     * Wrong fee is given, probably it is too low to cover minimal fee for the transaction
     * </pre>
     *
     * <code>Error_wrong_fee = 6;</code>
     */
    Error_wrong_fee(6),
    /**
     * <pre>
     * Chain-generic, signing related:
     * General signing error
     * </pre>
     *
     * <code>Error_signing = 7;</code>
     */
    Error_signing(7),
    /**
     * <pre>
     * Resulting transaction is too large
     * [NEO] Transaction too big, fee in GAS needed or try send by parts
     * </pre>
     *
     * <code>Error_tx_too_big = 8;</code>
     */
    Error_tx_too_big(8),
    /**
     * <pre>
     * UTXO-chain specific, input related:
     * No input UTXOs provided [BTC]
     * </pre>
     *
     * <code>Error_missing_input_utxos = 9;</code>
     */
    Error_missing_input_utxos(9),
    /**
     * <pre>
     * Not enough non-dust input UTXOs to cover requested amount (dust UTXOs are filtered out) [BTC]
     * </pre>
     *
     * <code>Error_not_enough_utxos = 10;</code>
     */
    Error_not_enough_utxos(10),
    /**
     * <pre>
     * UTXO-chain specific, script related:
     * [BTC] Missing required redeem script
     * </pre>
     *
     * <code>Error_script_redeem = 11;</code>
     */
    Error_script_redeem(11),
    /**
     * <pre>
     * [BTC] Invalid required output script 
     * </pre>
     *
     * <code>Error_script_output = 12;</code>
     */
    Error_script_output(12),
    /**
     * <pre>
     * [BTC] Unrecognized witness program
     * </pre>
     *
     * <code>Error_script_witness_program = 13;</code>
     */
    Error_script_witness_program(13),
    /**
     * <pre>
     * Invalid memo, e.g. [XRP] Invalid tag
     * </pre>
     *
     * <code>Error_invalid_memo = 14;</code>
     */
    Error_invalid_memo(14),
    /**
     * <pre>
     * Some input field cannot be parsed
     * </pre>
     *
     * <code>Error_input_parse = 19;</code>
     */
    Error_input_parse(19),
    /**
     * <pre>
     * Multi-input and multi-output transaction not supported
     * </pre>
     *
     * <code>Error_no_support_n2n = 20;</code>
     */
    Error_no_support_n2n(20),
    /**
     * <pre>
     * Incorrect count of signatures passed to compile
     * </pre>
     *
     * <code>Error_signatures_count = 21;</code>
     */
    Error_signatures_count(21),
    /**
     * <pre>
     * Incorrect input parameter
     * </pre>
     *
     * <code>Error_invalid_params = 22;</code>
     */
    Error_invalid_params(22),
    /**
     * <pre>
     * Invalid input token amount
     * </pre>
     *
     * <code>Error_invalid_requested_token_amount = 23;</code>
     */
    Error_invalid_requested_token_amount(23),
    /**
     * <pre>
     * dust output utxo
     * </pre>
     *
     * <code>Error_dust_utxo_output = 24;</code>
     */
    Error_dust_utxo_output(24),
    /**
     * <pre>
     * dust change utxo
     * </pre>
     *
     * <code>Error_dust_utxo_change = 25;</code>
     */
    Error_dust_utxo_change(25),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * This is the OK case, with value=0
     * </pre>
     *
     * <code>OK = 0;</code>
     */
    public static final int OK_VALUE = 0;
    /**
     * <pre>
     * Chain-generic codes:
     * Generic error (used if there is no suitable specific error is adequate)
     * </pre>
     *
     * <code>Error_general = 1;</code>
     */
    public static final int Error_general_VALUE = 1;
    /**
     * <pre>
     * Internal error, indicates some very unusual, unexpected case
     * </pre>
     *
     * <code>Error_internal = 2;</code>
     */
    public static final int Error_internal_VALUE = 2;
    /**
     * <pre>
     * Chain-generic codes, input related:
     * Low balance: the sender balance is not enough to cover the send and other auxiliary amount such as fee, deposit, or minimal balance.
     * </pre>
     *
     * <code>Error_low_balance = 3;</code>
     */
    public static final int Error_low_balance_VALUE = 3;
    /**
     * <pre>
     * Requested amount is zero, send of 0 makes no sense
     * </pre>
     *
     * <code>Error_zero_amount_requested = 4;</code>
     */
    public static final int Error_zero_amount_requested_VALUE = 4;
    /**
     * <pre>
     * One required key is missing (too few or wrong keys are provided)
     * </pre>
     *
     * <code>Error_missing_private_key = 5;</code>
     */
    public static final int Error_missing_private_key_VALUE = 5;
    /**
     * <pre>
     * A private key provided is invalid (e.g. wrong size, usually should be 32 bytes)
     * </pre>
     *
     * <code>Error_invalid_private_key = 15;</code>
     */
    public static final int Error_invalid_private_key_VALUE = 15;
    /**
     * <pre>
     * A provided address (e.g. destination address) is invalid
     * </pre>
     *
     * <code>Error_invalid_address = 16;</code>
     */
    public static final int Error_invalid_address_VALUE = 16;
    /**
     * <pre>
     * A provided input UTXO is invalid
     * </pre>
     *
     * <code>Error_invalid_utxo = 17;</code>
     */
    public static final int Error_invalid_utxo_VALUE = 17;
    /**
     * <pre>
     * The amount of an input UTXO is invalid
     * </pre>
     *
     * <code>Error_invalid_utxo_amount = 18;</code>
     */
    public static final int Error_invalid_utxo_amount_VALUE = 18;
    /**
     * <pre>
     * Chain-generic, fee related:
     * Wrong fee is given, probably it is too low to cover minimal fee for the transaction
     * </pre>
     *
     * <code>Error_wrong_fee = 6;</code>
     */
    public static final int Error_wrong_fee_VALUE = 6;
    /**
     * <pre>
     * Chain-generic, signing related:
     * General signing error
     * </pre>
     *
     * <code>Error_signing = 7;</code>
     */
    public static final int Error_signing_VALUE = 7;
    /**
     * <pre>
     * Resulting transaction is too large
     * [NEO] Transaction too big, fee in GAS needed or try send by parts
     * </pre>
     *
     * <code>Error_tx_too_big = 8;</code>
     */
    public static final int Error_tx_too_big_VALUE = 8;
    /**
     * <pre>
     * UTXO-chain specific, input related:
     * No input UTXOs provided [BTC]
     * </pre>
     *
     * <code>Error_missing_input_utxos = 9;</code>
     */
    public static final int Error_missing_input_utxos_VALUE = 9;
    /**
     * <pre>
     * Not enough non-dust input UTXOs to cover requested amount (dust UTXOs are filtered out) [BTC]
     * </pre>
     *
     * <code>Error_not_enough_utxos = 10;</code>
     */
    public static final int Error_not_enough_utxos_VALUE = 10;
    /**
     * <pre>
     * UTXO-chain specific, script related:
     * [BTC] Missing required redeem script
     * </pre>
     *
     * <code>Error_script_redeem = 11;</code>
     */
    public static final int Error_script_redeem_VALUE = 11;
    /**
     * <pre>
     * [BTC] Invalid required output script 
     * </pre>
     *
     * <code>Error_script_output = 12;</code>
     */
    public static final int Error_script_output_VALUE = 12;
    /**
     * <pre>
     * [BTC] Unrecognized witness program
     * </pre>
     *
     * <code>Error_script_witness_program = 13;</code>
     */
    public static final int Error_script_witness_program_VALUE = 13;
    /**
     * <pre>
     * Invalid memo, e.g. [XRP] Invalid tag
     * </pre>
     *
     * <code>Error_invalid_memo = 14;</code>
     */
    public static final int Error_invalid_memo_VALUE = 14;
    /**
     * <pre>
     * Some input field cannot be parsed
     * </pre>
     *
     * <code>Error_input_parse = 19;</code>
     */
    public static final int Error_input_parse_VALUE = 19;
    /**
     * <pre>
     * Multi-input and multi-output transaction not supported
     * </pre>
     *
     * <code>Error_no_support_n2n = 20;</code>
     */
    public static final int Error_no_support_n2n_VALUE = 20;
    /**
     * <pre>
     * Incorrect count of signatures passed to compile
     * </pre>
     *
     * <code>Error_signatures_count = 21;</code>
     */
    public static final int Error_signatures_count_VALUE = 21;
    /**
     * <pre>
     * Incorrect input parameter
     * </pre>
     *
     * <code>Error_invalid_params = 22;</code>
     */
    public static final int Error_invalid_params_VALUE = 22;
    /**
     * <pre>
     * Invalid input token amount
     * </pre>
     *
     * <code>Error_invalid_requested_token_amount = 23;</code>
     */
    public static final int Error_invalid_requested_token_amount_VALUE = 23;
    /**
     * <pre>
     * dust output utxo
     * </pre>
     *
     * <code>Error_dust_utxo_output = 24;</code>
     */
    public static final int Error_dust_utxo_output_VALUE = 24;
    /**
     * <pre>
     * dust change utxo
     * </pre>
     *
     * <code>Error_dust_utxo_change = 25;</code>
     */
    public static final int Error_dust_utxo_change_VALUE = 25;


    @java.lang.Override
    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SigningError valueOf(int value) {
      return forNumber(value);
    }

    public static SigningError forNumber(int value) {
      switch (value) {
        case 0: return OK;
        case 1: return Error_general;
        case 2: return Error_internal;
        case 3: return Error_low_balance;
        case 4: return Error_zero_amount_requested;
        case 5: return Error_missing_private_key;
        case 15: return Error_invalid_private_key;
        case 16: return Error_invalid_address;
        case 17: return Error_invalid_utxo;
        case 18: return Error_invalid_utxo_amount;
        case 6: return Error_wrong_fee;
        case 7: return Error_signing;
        case 8: return Error_tx_too_big;
        case 9: return Error_missing_input_utxos;
        case 10: return Error_not_enough_utxos;
        case 11: return Error_script_redeem;
        case 12: return Error_script_output;
        case 13: return Error_script_witness_program;
        case 14: return Error_invalid_memo;
        case 19: return Error_input_parse;
        case 20: return Error_no_support_n2n;
        case 21: return Error_signatures_count;
        case 22: return Error_invalid_params;
        case 23: return Error_invalid_requested_token_amount;
        case 24: return Error_dust_utxo_output;
        case 25: return Error_dust_utxo_change;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SigningError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SigningError> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SigningError>() {
            @java.lang.Override
            public SigningError findValueByNumber(int number) {
              return SigningError.forNumber(number);
            }
          };

    public static com.google.protobuf.Internal.EnumVerifier 
        internalGetVerifier() {
      return SigningErrorVerifier.INSTANCE;
    }

    private static final class SigningErrorVerifier implements 
         com.google.protobuf.Internal.EnumVerifier { 
            static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new SigningErrorVerifier();
            @java.lang.Override
            public boolean isInRange(int number) {
              return SigningError.forNumber(number) != null;
            }
          };

    private final int value;

    private SigningError(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:TW.Common.Proto.SigningError)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
