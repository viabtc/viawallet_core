syntax = "proto3";

package TW.Tron.Proto;
option java_package = "wallet.core.jni.proto";

// A transfer transaction
message TransferContract {
    // Sender address.
    string owner_address = 1;

    // Recipient address.
    string to_address = 2;

    // Amount to send.
    int64 amount = 3;
}

// Asset transfer
message TransferAssetContract {
    // Asset name.
    string asset_name = 1;

    // Sender address.
    string owner_address = 2;

    // Recipient address.
    string to_address = 3;

    // Amount to send.
    int64 amount = 4;
}

// TRC20 token transfer
message TransferTRC20Contract {
    // Contract name.
    string contract_address = 1;

    // Sender address.
    string owner_address = 2;

    // Recipient address.
    string to_address = 3;

    // Amount to send, (uint256, serialized big endian)
    bytes amount = 4;
}

// Freeze balance
message FreezeBalanceContract {
    // Sender address.
    string owner_address = 1;

    // Frozen balance. Minimum 1
    int64 frozen_balance = 2;

    // Frozen duration
    int64 frozen_duration = 3;

    // Resource type: BANDWIDTH | ENERGY
    string resource = 10;

    // Receiver address
    string receiver_address = 15;
}

// Unfreeze balance
message UnfreezeBalanceContract {
    // Sender address
    string owner_address = 1;

    // Resource type: BANDWIDTH | ENERGY
    string resource = 10;

    // Receiver address
    string receiver_address = 15;
}

// Unfreeze asset
message UnfreezeAssetContract {
    // Sender address
    string owner_address = 1;
}

// Vote asset
message VoteAssetContract {
    // Sender address
    string owner_address = 1;

    // Vote addresses
    repeated string vote_address = 2;

    bool support = 3;

    int32 count = 5;
}

// Vote witness
message VoteWitnessContract {
    // A vote
    message Vote {
        // address
        string vote_address = 1;

        // vote count
        int64 vote_count = 2;
    }

    // Owner
    string owner_address = 1;

    // The votes
    repeated Vote votes = 2;

    bool support = 3;
}

// Withdraw balance
message WithdrawBalanceContract {
    // Sender address
    string owner_address = 1;
}

// Smart contract call
message TriggerSmartContract {
    // Owner
    string owner_address = 1;

    // Contract address
    string contract_address = 2;

    // amount
    int64 call_value = 3;

    // call data
    bytes data = 4;

    // token value
    int64 call_token_value = 5;

    // ID of the token
    int64 token_id = 6;
}

// Info from block header
message BlockHeader {
    // creation timestamp
    int64 timestamp = 1;

    // root
    bytes tx_trie_root = 2;

    // hash of the parent
    bytes parent_hash = 3;

    int64 number = 7;

    bytes witness_address = 9;

    int32 version = 10;
}

// Transaction
message Transaction {
    // Transaction timestamp in milliseconds.
    int64 timestamp = 1;

    // Transaction expiration time in milliseconds.
    int64 expiration = 2;

    // Transaction block header.
    BlockHeader block_header = 3;

    // Transaction fee limit
    int64 fee_limit = 4;

    // Contract.
    oneof contract_oneof {
        TransferContract transfer = 10;
        TransferAssetContract transfer_asset = 11;
        FreezeBalanceContract freeze_balance = 12;
        UnfreezeBalanceContract unfreeze_balance = 13;
        UnfreezeAssetContract unfreeze_asset = 14;
        WithdrawBalanceContract withdraw_balance = 15;
        VoteAssetContract vote_asset = 16;
        VoteWitnessContract vote_witness = 17;
        TriggerSmartContract trigger_smart_contract = 18;
        TransferTRC20Contract transfer_trc20_contract = 19;
    }
}

// Input data necessary to create a signed transaction.
message SigningInput {
    // Transaction.
    Transaction transaction = 1;

    // The secret private key used for signing (32 bytes).
    bytes private_key = 2;
}

// Result containing the signed and encoded transaction.
message SigningOutput {
    // Transaction identifier.
    bytes id = 1;

    // Signature.
    bytes signature = 2;

    bytes ref_block_bytes = 3;
    bytes ref_block_hash = 4;

    // Result in JSON
    string json = 5;
    bytes encoded = 6;
}
