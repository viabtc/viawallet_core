// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Cosmos.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Transaction broadcast mode
public enum TW_Cosmos_Proto_BroadcastMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Wait for the tx to pass/fail CheckTx, DeliverTx, and be committed in a block
  case block // = 0

  /// Wait for the tx to pass/fail CheckTx
  case sync // = 1

  /// Don't wait for pass/fail CheckTx; send and return tx immediately
  case async // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .block
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .block
    case 1: self = .sync
    case 2: self = .async
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .block: return 0
    case .sync: return 1
    case .async: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Cosmos_Proto_BroadcastMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Cosmos_Proto_BroadcastMode] = [
    .block,
    .sync,
    .async,
  ]
}

#endif  // swift(>=4.2)

/// Options for transaction encoding: JSON (Amino, older) or Protobuf.
public enum TW_Cosmos_Proto_SigningMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// JSON format, Pre-Stargate
  case json // = 0

  /// Protobuf-serialized (binary), Stargate
  case protobuf // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .json
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .json
    case 1: self = .protobuf
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .json: return 0
    case .protobuf: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Cosmos_Proto_SigningMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Cosmos_Proto_SigningMode] = [
    .json,
    .protobuf,
  ]
}

#endif  // swift(>=4.2)

/// A denomination and an amount
public struct TW_Cosmos_Proto_Amount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// name of the denomination
  public var denom: String = String()

  /// amount, number as string
  public var amount: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Fee incl. gas
public struct TW_Cosmos_Proto_Fee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Fee amount(s)
  public var amounts: [TW_Cosmos_Proto_Amount] = []

  /// Gas price
  public var gas: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Block height, a revision and block height tuple.
/// A height can be compared against another Height for the purposes of updating and freezing clients
public struct TW_Cosmos_Proto_Height {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the revision that the client is currently on
  public var revisionNumber: UInt64 = 0

  /// the height within the given revision
  public var revisionHeight: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A transaction payload message
public struct TW_Cosmos_Proto_Message {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The payload message
  public var messageOneof: TW_Cosmos_Proto_Message.OneOf_MessageOneof? = nil

  public var sendCoinsMessage: TW_Cosmos_Proto_Message.Send {
    get {
      if case .sendCoinsMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.Send()
    }
    set {messageOneof = .sendCoinsMessage(newValue)}
  }

  public var transferTokensMessage: TW_Cosmos_Proto_Message.Transfer {
    get {
      if case .transferTokensMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.Transfer()
    }
    set {messageOneof = .transferTokensMessage(newValue)}
  }

  public var stakeMessage: TW_Cosmos_Proto_Message.Delegate {
    get {
      if case .stakeMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.Delegate()
    }
    set {messageOneof = .stakeMessage(newValue)}
  }

  public var unstakeMessage: TW_Cosmos_Proto_Message.Undelegate {
    get {
      if case .unstakeMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.Undelegate()
    }
    set {messageOneof = .unstakeMessage(newValue)}
  }

  public var restakeMessage: TW_Cosmos_Proto_Message.BeginRedelegate {
    get {
      if case .restakeMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.BeginRedelegate()
    }
    set {messageOneof = .restakeMessage(newValue)}
  }

  public var withdrawStakeRewardMessage: TW_Cosmos_Proto_Message.WithdrawDelegationReward {
    get {
      if case .withdrawStakeRewardMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.WithdrawDelegationReward()
    }
    set {messageOneof = .withdrawStakeRewardMessage(newValue)}
  }

  public var rawJsonMessage: TW_Cosmos_Proto_Message.RawJSON {
    get {
      if case .rawJsonMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.RawJSON()
    }
    set {messageOneof = .rawJsonMessage(newValue)}
  }

  public var wasmTerraExecuteContractTransferMessage: TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer {
    get {
      if case .wasmTerraExecuteContractTransferMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer()
    }
    set {messageOneof = .wasmTerraExecuteContractTransferMessage(newValue)}
  }

  public var wasmTerraExecuteContractSendMessage: TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend {
    get {
      if case .wasmTerraExecuteContractSendMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend()
    }
    set {messageOneof = .wasmTerraExecuteContractSendMessage(newValue)}
  }

  public var thorchainSendMessage: TW_Cosmos_Proto_Message.THORChainSend {
    get {
      if case .thorchainSendMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.THORChainSend()
    }
    set {messageOneof = .thorchainSendMessage(newValue)}
  }

  public var wasmTerraExecuteContractGeneric: TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric {
    get {
      if case .wasmTerraExecuteContractGeneric(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric()
    }
    set {messageOneof = .wasmTerraExecuteContractGeneric(newValue)}
  }

  public var wasmExecuteContractTransferMessage: TW_Cosmos_Proto_Message.WasmExecuteContractTransfer {
    get {
      if case .wasmExecuteContractTransferMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.WasmExecuteContractTransfer()
    }
    set {messageOneof = .wasmExecuteContractTransferMessage(newValue)}
  }

  public var wasmExecuteContractSendMessage: TW_Cosmos_Proto_Message.WasmExecuteContractSend {
    get {
      if case .wasmExecuteContractSendMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.WasmExecuteContractSend()
    }
    set {messageOneof = .wasmExecuteContractSendMessage(newValue)}
  }

  public var wasmExecuteContractGeneric: TW_Cosmos_Proto_Message.WasmExecuteContractGeneric {
    get {
      if case .wasmExecuteContractGeneric(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.WasmExecuteContractGeneric()
    }
    set {messageOneof = .wasmExecuteContractGeneric(newValue)}
  }

  public var signDirectMessage: TW_Cosmos_Proto_Message.SignDirect {
    get {
      if case .signDirectMessage(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.SignDirect()
    }
    set {messageOneof = .signDirectMessage(newValue)}
  }

  public var authGrant: TW_Cosmos_Proto_Message.AuthGrant {
    get {
      if case .authGrant(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.AuthGrant()
    }
    set {messageOneof = .authGrant(newValue)}
  }

  public var authRevoke: TW_Cosmos_Proto_Message.AuthRevoke {
    get {
      if case .authRevoke(let v)? = messageOneof {return v}
      return TW_Cosmos_Proto_Message.AuthRevoke()
    }
    set {messageOneof = .authRevoke(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The payload message
  public enum OneOf_MessageOneof: Equatable {
    case sendCoinsMessage(TW_Cosmos_Proto_Message.Send)
    case transferTokensMessage(TW_Cosmos_Proto_Message.Transfer)
    case stakeMessage(TW_Cosmos_Proto_Message.Delegate)
    case unstakeMessage(TW_Cosmos_Proto_Message.Undelegate)
    case restakeMessage(TW_Cosmos_Proto_Message.BeginRedelegate)
    case withdrawStakeRewardMessage(TW_Cosmos_Proto_Message.WithdrawDelegationReward)
    case rawJsonMessage(TW_Cosmos_Proto_Message.RawJSON)
    case wasmTerraExecuteContractTransferMessage(TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer)
    case wasmTerraExecuteContractSendMessage(TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend)
    case thorchainSendMessage(TW_Cosmos_Proto_Message.THORChainSend)
    case wasmTerraExecuteContractGeneric(TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric)
    case wasmExecuteContractTransferMessage(TW_Cosmos_Proto_Message.WasmExecuteContractTransfer)
    case wasmExecuteContractSendMessage(TW_Cosmos_Proto_Message.WasmExecuteContractSend)
    case wasmExecuteContractGeneric(TW_Cosmos_Proto_Message.WasmExecuteContractGeneric)
    case signDirectMessage(TW_Cosmos_Proto_Message.SignDirect)
    case authGrant(TW_Cosmos_Proto_Message.AuthGrant)
    case authRevoke(TW_Cosmos_Proto_Message.AuthRevoke)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Cosmos_Proto_Message.OneOf_MessageOneof, rhs: TW_Cosmos_Proto_Message.OneOf_MessageOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.sendCoinsMessage, .sendCoinsMessage): return {
        guard case .sendCoinsMessage(let l) = lhs, case .sendCoinsMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.transferTokensMessage, .transferTokensMessage): return {
        guard case .transferTokensMessage(let l) = lhs, case .transferTokensMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.stakeMessage, .stakeMessage): return {
        guard case .stakeMessage(let l) = lhs, case .stakeMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.unstakeMessage, .unstakeMessage): return {
        guard case .unstakeMessage(let l) = lhs, case .unstakeMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.restakeMessage, .restakeMessage): return {
        guard case .restakeMessage(let l) = lhs, case .restakeMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.withdrawStakeRewardMessage, .withdrawStakeRewardMessage): return {
        guard case .withdrawStakeRewardMessage(let l) = lhs, case .withdrawStakeRewardMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.rawJsonMessage, .rawJsonMessage): return {
        guard case .rawJsonMessage(let l) = lhs, case .rawJsonMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.wasmTerraExecuteContractTransferMessage, .wasmTerraExecuteContractTransferMessage): return {
        guard case .wasmTerraExecuteContractTransferMessage(let l) = lhs, case .wasmTerraExecuteContractTransferMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.wasmTerraExecuteContractSendMessage, .wasmTerraExecuteContractSendMessage): return {
        guard case .wasmTerraExecuteContractSendMessage(let l) = lhs, case .wasmTerraExecuteContractSendMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.thorchainSendMessage, .thorchainSendMessage): return {
        guard case .thorchainSendMessage(let l) = lhs, case .thorchainSendMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.wasmTerraExecuteContractGeneric, .wasmTerraExecuteContractGeneric): return {
        guard case .wasmTerraExecuteContractGeneric(let l) = lhs, case .wasmTerraExecuteContractGeneric(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.wasmExecuteContractTransferMessage, .wasmExecuteContractTransferMessage): return {
        guard case .wasmExecuteContractTransferMessage(let l) = lhs, case .wasmExecuteContractTransferMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.wasmExecuteContractSendMessage, .wasmExecuteContractSendMessage): return {
        guard case .wasmExecuteContractSendMessage(let l) = lhs, case .wasmExecuteContractSendMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.wasmExecuteContractGeneric, .wasmExecuteContractGeneric): return {
        guard case .wasmExecuteContractGeneric(let l) = lhs, case .wasmExecuteContractGeneric(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.signDirectMessage, .signDirectMessage): return {
        guard case .signDirectMessage(let l) = lhs, case .signDirectMessage(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.authGrant, .authGrant): return {
        guard case .authGrant(let l) = lhs, case .authGrant(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.authRevoke, .authRevoke): return {
        guard case .authRevoke(let l) = lhs, case .authRevoke(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  /// AuthorizationType defines the type of staking module authorization type
  ///
  /// Since: cosmos-sdk 0.43
  public enum AuthorizationType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// AUTHORIZATION_TYPE_UNSPECIFIED specifies an unknown authorization type
    case unspecified // = 0

    /// AUTHORIZATION_TYPE_DELEGATE defines an authorization type for Msg/Delegate
    case delegate // = 1

    /// AUTHORIZATION_TYPE_UNDELEGATE defines an authorization type for Msg/Undelegate
    case undelegate // = 2

    /// AUTHORIZATION_TYPE_REDELEGATE defines an authorization type for Msg/BeginRedelegate
    case redelegate // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .delegate
      case 2: self = .undelegate
      case 3: self = .redelegate
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .delegate: return 1
      case .undelegate: return 2
      case .redelegate: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// cosmos-sdk/MsgSend
  public struct Send {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var fromAddress: String = String()

    public var toAddress: String = String()

    public var amounts: [TW_Cosmos_Proto_Amount] = []

    public var typePrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// cosmos-sdk/MsgTransfer, IBC transfer
  public struct Transfer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// IBC port, e.g. "transfer"
    public var sourcePort: String = String()

    /// IBC connection channel, e.g. "channel-141", see apis /ibc/applications/transfer/v1beta1/denom_traces (connections) or /node_info (own channel)
    public var sourceChannel: String = String()

    public var token: TW_Cosmos_Proto_Amount {
      get {return _token ?? TW_Cosmos_Proto_Amount()}
      set {_token = newValue}
    }
    /// Returns true if `token` has been explicitly set.
    public var hasToken: Bool {return self._token != nil}
    /// Clears the value of `token`. Subsequent reads from it will return its default value.
    public mutating func clearToken() {self._token = nil}

    public var sender: String = String()

    public var receiver: String = String()

    /// Timeout block height. Either timeout height or timestamp should be set.
    /// Recommendation is to set height, to rev. 1 and block current + 1000 (see api /blocks/latest)
    public var timeoutHeight: TW_Cosmos_Proto_Height {
      get {return _timeoutHeight ?? TW_Cosmos_Proto_Height()}
      set {_timeoutHeight = newValue}
    }
    /// Returns true if `timeoutHeight` has been explicitly set.
    public var hasTimeoutHeight: Bool {return self._timeoutHeight != nil}
    /// Clears the value of `timeoutHeight`. Subsequent reads from it will return its default value.
    public mutating func clearTimeoutHeight() {self._timeoutHeight = nil}

    /// Timeout timestamp (in nanoseconds) relative to the current block timestamp.  Either timeout height or timestamp should be set.
    public var timeoutTimestamp: UInt64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _token: TW_Cosmos_Proto_Amount? = nil
    fileprivate var _timeoutHeight: TW_Cosmos_Proto_Height? = nil
  }

  /// cosmos-sdk/MsgDelegate to stake
  public struct Delegate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var delegatorAddress: String = String()

    public var validatorAddress: String = String()

    public var amount: TW_Cosmos_Proto_Amount {
      get {return _amount ?? TW_Cosmos_Proto_Amount()}
      set {_amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    public var hasAmount: Bool {return self._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    public mutating func clearAmount() {self._amount = nil}

    public var typePrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _amount: TW_Cosmos_Proto_Amount? = nil
  }

  /// cosmos-sdk/MsgUndelegate to unstake
  public struct Undelegate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var delegatorAddress: String = String()

    public var validatorAddress: String = String()

    public var amount: TW_Cosmos_Proto_Amount {
      get {return _amount ?? TW_Cosmos_Proto_Amount()}
      set {_amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    public var hasAmount: Bool {return self._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    public mutating func clearAmount() {self._amount = nil}

    public var typePrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _amount: TW_Cosmos_Proto_Amount? = nil
  }

  /// cosmos-sdk/MsgBeginRedelegate
  public struct BeginRedelegate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var delegatorAddress: String = String()

    public var validatorSrcAddress: String = String()

    public var validatorDstAddress: String = String()

    public var amount: TW_Cosmos_Proto_Amount {
      get {return _amount ?? TW_Cosmos_Proto_Amount()}
      set {_amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    public var hasAmount: Bool {return self._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    public mutating func clearAmount() {self._amount = nil}

    public var typePrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _amount: TW_Cosmos_Proto_Amount? = nil
  }

  /// cosmos-sdk/MsgWithdrawDelegationReward
  public struct WithdrawDelegationReward {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var delegatorAddress: String = String()

    public var validatorAddress: String = String()

    public var typePrefix: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// transfer within wasm/MsgExecuteContract, used by Terra Classic
  public struct WasmTerraExecuteContractTransfer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// sender address
    public var senderAddress: String = String()

    /// token contract address
    public var contractAddress: String = String()

    /// size is uint128, as bigint
    public var amount: Data = Data()

    public var recipientAddress: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// send within wasm/MsgExecuteContract, used by Terra Classic
  public struct WasmTerraExecuteContractSend {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// sender address
    public var senderAddress: String = String()

    /// token contract address
    public var contractAddress: String = String()

    /// size is uint128, as bigint
    public var amount: Data = Data()

    public var recipientContractAddress: String = String()

    /// execute_msg to be executed in the context of recipient contract
    public var msg: String = String()

    /// used in case you are sending native tokens along with this message
    public var coin: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// thorchain/MsgSend
  public struct THORChainSend {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var fromAddress: Data = Data()

    public var toAddress: Data = Data()

    public var amounts: [TW_Cosmos_Proto_Amount] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// execute within wasm/MsgExecuteContract, used by Terra Classic
  public struct WasmTerraExecuteContractGeneric {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// sender address
    public var senderAddress: String = String()

    /// token contract address
    public var contractAddress: String = String()

    /// execute_msg to be executed in the context of recipient contract
    public var executeMsg: String = String()

    /// used in case you are sending native tokens along with this message
    /// Gap in field numbering is intentional
    public var coins: [TW_Cosmos_Proto_Amount] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// transfer within wasm/MsgExecuteContract
  public struct WasmExecuteContractTransfer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// sender address
    public var senderAddress: String = String()

    /// token contract address
    public var contractAddress: String = String()

    /// size is uint128, as bigint
    public var amount: Data = Data()

    public var recipientAddress: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// send within wasm/MsgExecuteContract
  public struct WasmExecuteContractSend {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// sender address
    public var senderAddress: String = String()

    /// token contract address
    public var contractAddress: String = String()

    /// size is uint128, as bigint
    public var amount: Data = Data()

    public var recipientContractAddress: String = String()

    /// execute_msg to be executed in the context of recipient contract
    public var msg: String = String()

    /// used in case you are sending native tokens along with this message
    public var coin: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// execute within wasm/MsgExecuteContract
  public struct WasmExecuteContractGeneric {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// sender address
    public var senderAddress: String = String()

    /// token contract address
    public var contractAddress: String = String()

    /// execute_msg to be executed in the context of recipient contract
    public var executeMsg: String = String()

    /// used in case you are sending native tokens along with this message
    /// Gap in field numbering is intentional
    public var coins: [TW_Cosmos_Proto_Amount] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct RawJSON {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: String = String()

    public var value: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// For signing an already serialized transaction. Account number and chain ID must be set outside.
  public struct SignDirect {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The prepared serialized TxBody
    public var bodyBytes: Data = Data()

    /// The prepared serialized AuthInfo
    public var authInfoBytes: Data = Data()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// StakeAuthorization defines authorization for delegate/undelegate/redelegate.
  ///
  /// Since: cosmos-sdk 0.43
  public struct StakeAuthorization {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
    /// empty, there is no spend limit and any amount of coins can be delegated.
    public var maxTokens: TW_Cosmos_Proto_Amount {
      get {return _maxTokens ?? TW_Cosmos_Proto_Amount()}
      set {_maxTokens = newValue}
    }
    /// Returns true if `maxTokens` has been explicitly set.
    public var hasMaxTokens: Bool {return self._maxTokens != nil}
    /// Clears the value of `maxTokens`. Subsequent reads from it will return its default value.
    public mutating func clearMaxTokens() {self._maxTokens = nil}

    /// validators is the oneof that represents either allow_list or deny_list
    public var validators: TW_Cosmos_Proto_Message.StakeAuthorization.OneOf_Validators? = nil

    /// allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
    /// account.
    public var allowList: TW_Cosmos_Proto_Message.StakeAuthorization.Validators {
      get {
        if case .allowList(let v)? = validators {return v}
        return TW_Cosmos_Proto_Message.StakeAuthorization.Validators()
      }
      set {validators = .allowList(newValue)}
    }

    /// deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
    public var denyList: TW_Cosmos_Proto_Message.StakeAuthorization.Validators {
      get {
        if case .denyList(let v)? = validators {return v}
        return TW_Cosmos_Proto_Message.StakeAuthorization.Validators()
      }
      set {validators = .denyList(newValue)}
    }

    /// authorization_type defines one of AuthorizationType.
    public var authorizationType: TW_Cosmos_Proto_Message.AuthorizationType = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// validators is the oneof that represents either allow_list or deny_list
    public enum OneOf_Validators: Equatable {
      /// allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
      /// account.
      case allowList(TW_Cosmos_Proto_Message.StakeAuthorization.Validators)
      /// deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
      case denyList(TW_Cosmos_Proto_Message.StakeAuthorization.Validators)

    #if !swift(>=4.1)
      public static func ==(lhs: TW_Cosmos_Proto_Message.StakeAuthorization.OneOf_Validators, rhs: TW_Cosmos_Proto_Message.StakeAuthorization.OneOf_Validators) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.allowList, .allowList): return {
          guard case .allowList(let l) = lhs, case .allowList(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        case (.denyList, .denyList): return {
          guard case .denyList(let l) = lhs, case .denyList(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        default: return false
        }
      }
    #endif
    }

    /// Validators defines list of validator addresses.
    public struct Validators {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var address: [String] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _maxTokens: TW_Cosmos_Proto_Amount? = nil
  }

  /// cosmos-sdk/MsgGrant
  public struct AuthGrant {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var granter: String = String()

    public var grantee: String = String()

    public var grantType: TW_Cosmos_Proto_Message.AuthGrant.OneOf_GrantType? = nil

    public var grantStake: TW_Cosmos_Proto_Message.StakeAuthorization {
      get {
        if case .grantStake(let v)? = grantType {return v}
        return TW_Cosmos_Proto_Message.StakeAuthorization()
      }
      set {grantType = .grantStake(newValue)}
    }

    public var expiration: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_GrantType: Equatable {
      case grantStake(TW_Cosmos_Proto_Message.StakeAuthorization)

    #if !swift(>=4.1)
      public static func ==(lhs: TW_Cosmos_Proto_Message.AuthGrant.OneOf_GrantType, rhs: TW_Cosmos_Proto_Message.AuthGrant.OneOf_GrantType) -> Bool {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch (lhs, rhs) {
        case (.grantStake, .grantStake): return {
          guard case .grantStake(let l) = lhs, case .grantStake(let r) = rhs else { preconditionFailure() }
          return l == r
        }()
        }
      }
    #endif
    }

    public init() {}
  }

  /// cosmos-sdk/MsgRevoke
  public struct AuthRevoke {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var granter: String = String()

    public var grantee: String = String()

    public var msgTypeURL: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

#if swift(>=4.2)

extension TW_Cosmos_Proto_Message.AuthorizationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Cosmos_Proto_Message.AuthorizationType] = [
    .unspecified,
    .delegate,
    .undelegate,
    .redelegate,
  ]
}

#endif  // swift(>=4.2)

/// Input data necessary to create a signed transaction.
public struct TW_Cosmos_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specify if protobuf (a.k.a. Stargate) or earlier JSON serialization is used
  public var signingMode: TW_Cosmos_Proto_SigningMode = .json

  /// Source account number
  public var accountNumber: UInt64 = 0

  /// Chain ID (string)
  public var chainID: String = String()

  /// Transaction fee
  public var fee: TW_Cosmos_Proto_Fee {
    get {return _fee ?? TW_Cosmos_Proto_Fee()}
    set {_fee = newValue}
  }
  /// Returns true if `fee` has been explicitly set.
  public var hasFee: Bool {return self._fee != nil}
  /// Clears the value of `fee`. Subsequent reads from it will return its default value.
  public mutating func clearFee() {self._fee = nil}

  /// Optional memo
  public var memo: String = String()

  /// Sequence number (account specific)
  public var sequence: UInt64 = 0

  /// The secret private key used for signing (32 bytes).
  public var privateKey: Data = Data()

  /// Payload message(s)
  public var messages: [TW_Cosmos_Proto_Message] = []

  /// Broadcast mode (included in output, relevant when broadcasting)
  public var mode: TW_Cosmos_Proto_BroadcastMode = .block

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _fee: TW_Cosmos_Proto_Fee? = nil
}

/// Result containing the signed and encoded transaction.
public struct TW_Cosmos_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signature
  public var signature: Data = Data()

  /// Signed transaction in JSON (pre-Stargate case)
  public var json: String = String()

  /// Signed transaction containing protobuf encoded, Base64-encoded form (Stargate case),
  /// wrapped in a ready-to-broadcast json.
  public var serialized: String = String()

  /// Set in case of error
  public var error: String = String()

  /// signatures array json string
  public var signatureJson: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Cosmos.Proto"

extension TW_Cosmos_Proto_BroadcastMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BLOCK"),
    1: .same(proto: "SYNC"),
    2: .same(proto: "ASYNC"),
  ]
}

extension TW_Cosmos_Proto_SigningMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JSON"),
    1: .same(proto: "Protobuf"),
  ]
}

extension TW_Cosmos_Proto_Amount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Amount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "denom"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.denom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.denom.isEmpty {
      try visitor.visitSingularStringField(value: self.denom, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Amount, rhs: TW_Cosmos_Proto_Amount) -> Bool {
    if lhs.denom != rhs.denom {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Fee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Fee"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "amounts"),
    2: .same(proto: "gas"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.amounts) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.gas) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.amounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amounts, fieldNumber: 1)
    }
    if self.gas != 0 {
      try visitor.visitSingularUInt64Field(value: self.gas, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Fee, rhs: TW_Cosmos_Proto_Fee) -> Bool {
    if lhs.amounts != rhs.amounts {return false}
    if lhs.gas != rhs.gas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Height: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Height"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "revision_number"),
    2: .standard(proto: "revision_height"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.revisionNumber) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.revisionHeight) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.revisionNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.revisionNumber, fieldNumber: 1)
    }
    if self.revisionHeight != 0 {
      try visitor.visitSingularUInt64Field(value: self.revisionHeight, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Height, rhs: TW_Cosmos_Proto_Height) -> Bool {
    if lhs.revisionNumber != rhs.revisionNumber {return false}
    if lhs.revisionHeight != rhs.revisionHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Message"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "send_coins_message"),
    2: .standard(proto: "transfer_tokens_message"),
    3: .standard(proto: "stake_message"),
    4: .standard(proto: "unstake_message"),
    5: .standard(proto: "restake_message"),
    6: .standard(proto: "withdraw_stake_reward_message"),
    7: .standard(proto: "raw_json_message"),
    8: .standard(proto: "wasm_terra_execute_contract_transfer_message"),
    9: .standard(proto: "wasm_terra_execute_contract_send_message"),
    10: .standard(proto: "thorchain_send_message"),
    11: .standard(proto: "wasm_terra_execute_contract_generic"),
    12: .standard(proto: "wasm_execute_contract_transfer_message"),
    13: .standard(proto: "wasm_execute_contract_send_message"),
    14: .standard(proto: "wasm_execute_contract_generic"),
    15: .standard(proto: "sign_direct_message"),
    16: .standard(proto: "auth_grant"),
    17: .standard(proto: "auth_revoke"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: TW_Cosmos_Proto_Message.Send?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .sendCoinsMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .sendCoinsMessage(v)
        }
      }()
      case 2: try {
        var v: TW_Cosmos_Proto_Message.Transfer?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .transferTokensMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .transferTokensMessage(v)
        }
      }()
      case 3: try {
        var v: TW_Cosmos_Proto_Message.Delegate?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .stakeMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .stakeMessage(v)
        }
      }()
      case 4: try {
        var v: TW_Cosmos_Proto_Message.Undelegate?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .unstakeMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .unstakeMessage(v)
        }
      }()
      case 5: try {
        var v: TW_Cosmos_Proto_Message.BeginRedelegate?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .restakeMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .restakeMessage(v)
        }
      }()
      case 6: try {
        var v: TW_Cosmos_Proto_Message.WithdrawDelegationReward?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .withdrawStakeRewardMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .withdrawStakeRewardMessage(v)
        }
      }()
      case 7: try {
        var v: TW_Cosmos_Proto_Message.RawJSON?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .rawJsonMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .rawJsonMessage(v)
        }
      }()
      case 8: try {
        var v: TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .wasmTerraExecuteContractTransferMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .wasmTerraExecuteContractTransferMessage(v)
        }
      }()
      case 9: try {
        var v: TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .wasmTerraExecuteContractSendMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .wasmTerraExecuteContractSendMessage(v)
        }
      }()
      case 10: try {
        var v: TW_Cosmos_Proto_Message.THORChainSend?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .thorchainSendMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .thorchainSendMessage(v)
        }
      }()
      case 11: try {
        var v: TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .wasmTerraExecuteContractGeneric(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .wasmTerraExecuteContractGeneric(v)
        }
      }()
      case 12: try {
        var v: TW_Cosmos_Proto_Message.WasmExecuteContractTransfer?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .wasmExecuteContractTransferMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .wasmExecuteContractTransferMessage(v)
        }
      }()
      case 13: try {
        var v: TW_Cosmos_Proto_Message.WasmExecuteContractSend?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .wasmExecuteContractSendMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .wasmExecuteContractSendMessage(v)
        }
      }()
      case 14: try {
        var v: TW_Cosmos_Proto_Message.WasmExecuteContractGeneric?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .wasmExecuteContractGeneric(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .wasmExecuteContractGeneric(v)
        }
      }()
      case 15: try {
        var v: TW_Cosmos_Proto_Message.SignDirect?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .signDirectMessage(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .signDirectMessage(v)
        }
      }()
      case 16: try {
        var v: TW_Cosmos_Proto_Message.AuthGrant?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .authGrant(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .authGrant(v)
        }
      }()
      case 17: try {
        var v: TW_Cosmos_Proto_Message.AuthRevoke?
        var hadOneofValue = false
        if let current = self.messageOneof {
          hadOneofValue = true
          if case .authRevoke(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.messageOneof = .authRevoke(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.messageOneof {
    case .sendCoinsMessage?: try {
      guard case .sendCoinsMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .transferTokensMessage?: try {
      guard case .transferTokensMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .stakeMessage?: try {
      guard case .stakeMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .unstakeMessage?: try {
      guard case .unstakeMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .restakeMessage?: try {
      guard case .restakeMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .withdrawStakeRewardMessage?: try {
      guard case .withdrawStakeRewardMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .rawJsonMessage?: try {
      guard case .rawJsonMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .wasmTerraExecuteContractTransferMessage?: try {
      guard case .wasmTerraExecuteContractTransferMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case .wasmTerraExecuteContractSendMessage?: try {
      guard case .wasmTerraExecuteContractSendMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    }()
    case .thorchainSendMessage?: try {
      guard case .thorchainSendMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .wasmTerraExecuteContractGeneric?: try {
      guard case .wasmTerraExecuteContractGeneric(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .wasmExecuteContractTransferMessage?: try {
      guard case .wasmExecuteContractTransferMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .wasmExecuteContractSendMessage?: try {
      guard case .wasmExecuteContractSendMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .wasmExecuteContractGeneric?: try {
      guard case .wasmExecuteContractGeneric(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .signDirectMessage?: try {
      guard case .signDirectMessage(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .authGrant?: try {
      guard case .authGrant(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .authRevoke?: try {
      guard case .authRevoke(let v)? = self.messageOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message, rhs: TW_Cosmos_Proto_Message) -> Bool {
    if lhs.messageOneof != rhs.messageOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.AuthorizationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "DELEGATE"),
    2: .same(proto: "UNDELEGATE"),
    3: .same(proto: "REDELEGATE"),
  ]
}

extension TW_Cosmos_Proto_Message.Send: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".Send"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .standard(proto: "to_address"),
    3: .same(proto: "amounts"),
    4: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fromAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.amounts) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.typePrefix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAddress, fieldNumber: 1)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 2)
    }
    if !self.amounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amounts, fieldNumber: 3)
    }
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.Send, rhs: TW_Cosmos_Proto_Message.Send) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.amounts != rhs.amounts {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.Transfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".Transfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_port"),
    2: .standard(proto: "source_channel"),
    3: .same(proto: "token"),
    4: .same(proto: "sender"),
    5: .same(proto: "receiver"),
    6: .standard(proto: "timeout_height"),
    7: .standard(proto: "timeout_timestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.sourcePort) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.sourceChannel) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._token) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.receiver) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._timeoutHeight) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.timeoutTimestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sourcePort.isEmpty {
      try visitor.visitSingularStringField(value: self.sourcePort, fieldNumber: 1)
    }
    if !self.sourceChannel.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceChannel, fieldNumber: 2)
    }
    try { if let v = self._token {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 4)
    }
    if !self.receiver.isEmpty {
      try visitor.visitSingularStringField(value: self.receiver, fieldNumber: 5)
    }
    try { if let v = self._timeoutHeight {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if self.timeoutTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timeoutTimestamp, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.Transfer, rhs: TW_Cosmos_Proto_Message.Transfer) -> Bool {
    if lhs.sourcePort != rhs.sourcePort {return false}
    if lhs.sourceChannel != rhs.sourceChannel {return false}
    if lhs._token != rhs._token {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.receiver != rhs.receiver {return false}
    if lhs._timeoutHeight != rhs._timeoutHeight {return false}
    if lhs.timeoutTimestamp != rhs.timeoutTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.Delegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".Delegate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "amount"),
    4: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.typePrefix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.Delegate, rhs: TW_Cosmos_Proto_Message.Delegate) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.Undelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".Undelegate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "amount"),
    4: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.typePrefix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.Undelegate, rhs: TW_Cosmos_Proto_Message.Undelegate) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.BeginRedelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".BeginRedelegate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_src_address"),
    3: .standard(proto: "validator_dst_address"),
    4: .same(proto: "amount"),
    5: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorSrcAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.validatorDstAddress) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.typePrefix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorSrcAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorSrcAddress, fieldNumber: 2)
    }
    if !self.validatorDstAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorDstAddress, fieldNumber: 3)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.BeginRedelegate, rhs: TW_Cosmos_Proto_Message.BeginRedelegate) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorSrcAddress != rhs.validatorSrcAddress {return false}
    if lhs.validatorDstAddress != rhs.validatorDstAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.WithdrawDelegationReward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".WithdrawDelegationReward"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .standard(proto: "type_prefix"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.typePrefix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    if !self.typePrefix.isEmpty {
      try visitor.visitSingularStringField(value: self.typePrefix, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.WithdrawDelegationReward, rhs: TW_Cosmos_Proto_Message.WithdrawDelegationReward) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.typePrefix != rhs.typePrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".WasmTerraExecuteContractTransfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_address"),
    2: .standard(proto: "contract_address"),
    3: .same(proto: "amount"),
    4: .standard(proto: "recipient_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.senderAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.recipientAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.senderAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAddress, fieldNumber: 1)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 3)
    }
    if !self.recipientAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientAddress, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer, rhs: TW_Cosmos_Proto_Message.WasmTerraExecuteContractTransfer) -> Bool {
    if lhs.senderAddress != rhs.senderAddress {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.recipientAddress != rhs.recipientAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".WasmTerraExecuteContractSend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_address"),
    2: .standard(proto: "contract_address"),
    3: .same(proto: "amount"),
    4: .standard(proto: "recipient_contract_address"),
    5: .same(proto: "msg"),
    6: .same(proto: "coin"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.senderAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.recipientContractAddress) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.msg) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.coin) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.senderAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAddress, fieldNumber: 1)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 3)
    }
    if !self.recipientContractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientContractAddress, fieldNumber: 4)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 5)
    }
    if !self.coin.isEmpty {
      try visitor.visitRepeatedStringField(value: self.coin, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend, rhs: TW_Cosmos_Proto_Message.WasmTerraExecuteContractSend) -> Bool {
    if lhs.senderAddress != rhs.senderAddress {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.recipientContractAddress != rhs.recipientContractAddress {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.coin != rhs.coin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.THORChainSend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".THORChainSend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
    2: .standard(proto: "to_address"),
    3: .same(proto: "amounts"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.fromAddress) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.toAddress) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.amounts) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.fromAddress, fieldNumber: 1)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.toAddress, fieldNumber: 2)
    }
    if !self.amounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amounts, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.THORChainSend, rhs: TW_Cosmos_Proto_Message.THORChainSend) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.amounts != rhs.amounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".WasmTerraExecuteContractGeneric"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_address"),
    2: .standard(proto: "contract_address"),
    3: .standard(proto: "execute_msg"),
    5: .same(proto: "coins"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.senderAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.executeMsg) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.coins) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.senderAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAddress, fieldNumber: 1)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 2)
    }
    if !self.executeMsg.isEmpty {
      try visitor.visitSingularStringField(value: self.executeMsg, fieldNumber: 3)
    }
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric, rhs: TW_Cosmos_Proto_Message.WasmTerraExecuteContractGeneric) -> Bool {
    if lhs.senderAddress != rhs.senderAddress {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.executeMsg != rhs.executeMsg {return false}
    if lhs.coins != rhs.coins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.WasmExecuteContractTransfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".WasmExecuteContractTransfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_address"),
    2: .standard(proto: "contract_address"),
    3: .same(proto: "amount"),
    4: .standard(proto: "recipient_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.senderAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.recipientAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.senderAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAddress, fieldNumber: 1)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 3)
    }
    if !self.recipientAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientAddress, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.WasmExecuteContractTransfer, rhs: TW_Cosmos_Proto_Message.WasmExecuteContractTransfer) -> Bool {
    if lhs.senderAddress != rhs.senderAddress {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.recipientAddress != rhs.recipientAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.WasmExecuteContractSend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".WasmExecuteContractSend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_address"),
    2: .standard(proto: "contract_address"),
    3: .same(proto: "amount"),
    4: .standard(proto: "recipient_contract_address"),
    5: .same(proto: "msg"),
    6: .same(proto: "coin"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.senderAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.recipientContractAddress) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.msg) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.coin) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.senderAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAddress, fieldNumber: 1)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 2)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 3)
    }
    if !self.recipientContractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientContractAddress, fieldNumber: 4)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularStringField(value: self.msg, fieldNumber: 5)
    }
    if !self.coin.isEmpty {
      try visitor.visitRepeatedStringField(value: self.coin, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.WasmExecuteContractSend, rhs: TW_Cosmos_Proto_Message.WasmExecuteContractSend) -> Bool {
    if lhs.senderAddress != rhs.senderAddress {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.recipientContractAddress != rhs.recipientContractAddress {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.coin != rhs.coin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.WasmExecuteContractGeneric: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".WasmExecuteContractGeneric"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_address"),
    2: .standard(proto: "contract_address"),
    3: .standard(proto: "execute_msg"),
    5: .same(proto: "coins"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.senderAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.executeMsg) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.coins) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.senderAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.senderAddress, fieldNumber: 1)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 2)
    }
    if !self.executeMsg.isEmpty {
      try visitor.visitSingularStringField(value: self.executeMsg, fieldNumber: 3)
    }
    if !self.coins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coins, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.WasmExecuteContractGeneric, rhs: TW_Cosmos_Proto_Message.WasmExecuteContractGeneric) -> Bool {
    if lhs.senderAddress != rhs.senderAddress {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.executeMsg != rhs.executeMsg {return false}
    if lhs.coins != rhs.coins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.RawJSON: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".RawJSON"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.RawJSON, rhs: TW_Cosmos_Proto_Message.RawJSON) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.SignDirect: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".SignDirect"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "body_bytes"),
    2: .standard(proto: "auth_info_bytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.bodyBytes) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.authInfoBytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bodyBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.bodyBytes, fieldNumber: 1)
    }
    if !self.authInfoBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.authInfoBytes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.SignDirect, rhs: TW_Cosmos_Proto_Message.SignDirect) -> Bool {
    if lhs.bodyBytes != rhs.bodyBytes {return false}
    if lhs.authInfoBytes != rhs.authInfoBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.StakeAuthorization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".StakeAuthorization"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_tokens"),
    2: .standard(proto: "allow_list"),
    3: .standard(proto: "deny_list"),
    4: .standard(proto: "authorization_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._maxTokens) }()
      case 2: try {
        var v: TW_Cosmos_Proto_Message.StakeAuthorization.Validators?
        var hadOneofValue = false
        if let current = self.validators {
          hadOneofValue = true
          if case .allowList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.validators = .allowList(v)
        }
      }()
      case 3: try {
        var v: TW_Cosmos_Proto_Message.StakeAuthorization.Validators?
        var hadOneofValue = false
        if let current = self.validators {
          hadOneofValue = true
          if case .denyList(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.validators = .denyList(v)
        }
      }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.authorizationType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._maxTokens {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    switch self.validators {
    case .allowList?: try {
      guard case .allowList(let v)? = self.validators else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .denyList?: try {
      guard case .denyList(let v)? = self.validators else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if self.authorizationType != .unspecified {
      try visitor.visitSingularEnumField(value: self.authorizationType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.StakeAuthorization, rhs: TW_Cosmos_Proto_Message.StakeAuthorization) -> Bool {
    if lhs._maxTokens != rhs._maxTokens {return false}
    if lhs.validators != rhs.validators {return false}
    if lhs.authorizationType != rhs.authorizationType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.StakeAuthorization.Validators: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.StakeAuthorization.protoMessageName + ".Validators"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.address) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitRepeatedStringField(value: self.address, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.StakeAuthorization.Validators, rhs: TW_Cosmos_Proto_Message.StakeAuthorization.Validators) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.AuthGrant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".AuthGrant"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "granter"),
    2: .same(proto: "grantee"),
    3: .standard(proto: "grant_stake"),
    4: .same(proto: "expiration"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.granter) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.grantee) }()
      case 3: try {
        var v: TW_Cosmos_Proto_Message.StakeAuthorization?
        var hadOneofValue = false
        if let current = self.grantType {
          hadOneofValue = true
          if case .grantStake(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.grantType = .grantStake(v)
        }
      }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.expiration) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.granter.isEmpty {
      try visitor.visitSingularStringField(value: self.granter, fieldNumber: 1)
    }
    if !self.grantee.isEmpty {
      try visitor.visitSingularStringField(value: self.grantee, fieldNumber: 2)
    }
    try { if case .grantStake(let v)? = self.grantType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.expiration != 0 {
      try visitor.visitSingularInt64Field(value: self.expiration, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.AuthGrant, rhs: TW_Cosmos_Proto_Message.AuthGrant) -> Bool {
    if lhs.granter != rhs.granter {return false}
    if lhs.grantee != rhs.grantee {return false}
    if lhs.grantType != rhs.grantType {return false}
    if lhs.expiration != rhs.expiration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_Message.AuthRevoke: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Cosmos_Proto_Message.protoMessageName + ".AuthRevoke"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "granter"),
    2: .same(proto: "grantee"),
    3: .standard(proto: "msg_type_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.granter) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.grantee) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.msgTypeURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.granter.isEmpty {
      try visitor.visitSingularStringField(value: self.granter, fieldNumber: 1)
    }
    if !self.grantee.isEmpty {
      try visitor.visitSingularStringField(value: self.grantee, fieldNumber: 2)
    }
    if !self.msgTypeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.msgTypeURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_Message.AuthRevoke, rhs: TW_Cosmos_Proto_Message.AuthRevoke) -> Bool {
    if lhs.granter != rhs.granter {return false}
    if lhs.grantee != rhs.grantee {return false}
    if lhs.msgTypeURL != rhs.msgTypeURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signing_mode"),
    2: .standard(proto: "account_number"),
    3: .standard(proto: "chain_id"),
    4: .same(proto: "fee"),
    5: .same(proto: "memo"),
    6: .same(proto: "sequence"),
    7: .standard(proto: "private_key"),
    8: .same(proto: "messages"),
    9: .same(proto: "mode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.signingMode) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.accountNumber) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._fee) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.memo) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self.sequence) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.privateKey) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.messages) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.signingMode != .json {
      try visitor.visitSingularEnumField(value: self.signingMode, fieldNumber: 1)
    }
    if self.accountNumber != 0 {
      try visitor.visitSingularUInt64Field(value: self.accountNumber, fieldNumber: 2)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 3)
    }
    try { if let v = self._fee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.memo.isEmpty {
      try visitor.visitSingularStringField(value: self.memo, fieldNumber: 5)
    }
    if self.sequence != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequence, fieldNumber: 6)
    }
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 7)
    }
    if !self.messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.messages, fieldNumber: 8)
    }
    if self.mode != .block {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_SigningInput, rhs: TW_Cosmos_Proto_SigningInput) -> Bool {
    if lhs.signingMode != rhs.signingMode {return false}
    if lhs.accountNumber != rhs.accountNumber {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs._fee != rhs._fee {return false}
    if lhs.memo != rhs.memo {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.messages != rhs.messages {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Cosmos_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signature"),
    2: .same(proto: "json"),
    3: .same(proto: "serialized"),
    4: .same(proto: "error"),
    5: .standard(proto: "signature_json"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.json) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.serialized) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.error) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.signatureJson) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 1)
    }
    if !self.json.isEmpty {
      try visitor.visitSingularStringField(value: self.json, fieldNumber: 2)
    }
    if !self.serialized.isEmpty {
      try visitor.visitSingularStringField(value: self.serialized, fieldNumber: 3)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 4)
    }
    if !self.signatureJson.isEmpty {
      try visitor.visitSingularStringField(value: self.signatureJson, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Cosmos_Proto_SigningOutput, rhs: TW_Cosmos_Proto_SigningOutput) -> Bool {
    if lhs.signature != rhs.signature {return false}
    if lhs.json != rhs.json {return false}
    if lhs.serialized != rhs.serialized {return false}
    if lhs.error != rhs.error {return false}
    if lhs.signatureJson != rhs.signatureJson {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
