// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Ergo.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright Â© 2017-2020 Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct TW_Ergo_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Private keys
  public var privateKey: [Data] = []

  /// Creation height
  public var creationHeight: UInt32 = 0

  /// Fee amount
  public var fee: UInt64 = 0

  /// Fee address.
  public var feeAddress: String = String()

  /// Amount to send.
  public var value: UInt64 = 0

  /// Recipient's address.
  public var toAddress: String = String()

  /// Change address.
  public var changeAddress: String = String()

  /// Available unspent ergoBox.
  public var unspentOutput: [TW_Ergo_Proto_ErgoBox] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Ergo_Proto_ErgoBox {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Box id
  public var boxID: String = String()

  /// Box amount
  public var value: UInt64 = 0

  /// Box creationHeight
  public var creationHeight: UInt32 = 0

  /// Box address
  public var address: String = String()

  /// Box ergoTree
  public var ergoTree: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Ergo_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signing output json
  public var json: String = String()

  /// Base64 of json
  public var encode: String = String()

  /// Optional error message
  public var error: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Ergo_Proto_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Inputs
  public var inputs: [TW_Ergo_Proto_Input] = []

  /// DataInputs
  public var dataInputs: [TW_Ergo_Proto_Input] = []

  /// Outputs ErgoBox
  public var outputs: [TW_Ergo_Proto_ErgoBox] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct TW_Ergo_Proto_Input {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Box id
  public var boxID: String = String()

  /// SpendingProof
  public var spendingProof: TW_Ergo_Proto_SpendingProof {
    get {return _spendingProof ?? TW_Ergo_Proto_SpendingProof()}
    set {_spendingProof = newValue}
  }
  /// Returns true if `spendingProof` has been explicitly set.
  public var hasSpendingProof: Bool {return self._spendingProof != nil}
  /// Clears the value of `spendingProof`. Subsequent reads from it will return its default value.
  public mutating func clearSpendingProof() {self._spendingProof = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _spendingProof: TW_Ergo_Proto_SpendingProof? = nil
}

public struct TW_Ergo_Proto_SpendingProof {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ProofBytes
  public var proofBytes: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Ergo.Proto"

extension TW_Ergo_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "private_key"),
    2: .standard(proto: "creation_height"),
    3: .same(proto: "fee"),
    4: .standard(proto: "fee_address"),
    5: .same(proto: "value"),
    6: .standard(proto: "to_address"),
    7: .standard(proto: "change_address"),
    8: .same(proto: "unspentOutput"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedBytesField(value: &self.privateKey) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.creationHeight) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.fee) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.feeAddress) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.value) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.changeAddress) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.unspentOutput) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.privateKey.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.privateKey, fieldNumber: 1)
    }
    if self.creationHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.creationHeight, fieldNumber: 2)
    }
    if self.fee != 0 {
      try visitor.visitSingularUInt64Field(value: self.fee, fieldNumber: 3)
    }
    if !self.feeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.feeAddress, fieldNumber: 4)
    }
    if self.value != 0 {
      try visitor.visitSingularUInt64Field(value: self.value, fieldNumber: 5)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 6)
    }
    if !self.changeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.changeAddress, fieldNumber: 7)
    }
    if !self.unspentOutput.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unspentOutput, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ergo_Proto_SigningInput, rhs: TW_Ergo_Proto_SigningInput) -> Bool {
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.creationHeight != rhs.creationHeight {return false}
    if lhs.fee != rhs.fee {return false}
    if lhs.feeAddress != rhs.feeAddress {return false}
    if lhs.value != rhs.value {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.changeAddress != rhs.changeAddress {return false}
    if lhs.unspentOutput != rhs.unspentOutput {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ergo_Proto_ErgoBox: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErgoBox"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "boxId"),
    2: .same(proto: "value"),
    3: .same(proto: "creationHeight"),
    4: .same(proto: "address"),
    5: .same(proto: "ergoTree"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.boxID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.value) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.creationHeight) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.ergoTree) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.boxID.isEmpty {
      try visitor.visitSingularStringField(value: self.boxID, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularUInt64Field(value: self.value, fieldNumber: 2)
    }
    if self.creationHeight != 0 {
      try visitor.visitSingularUInt32Field(value: self.creationHeight, fieldNumber: 3)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 4)
    }
    if !self.ergoTree.isEmpty {
      try visitor.visitSingularStringField(value: self.ergoTree, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ergo_Proto_ErgoBox, rhs: TW_Ergo_Proto_ErgoBox) -> Bool {
    if lhs.boxID != rhs.boxID {return false}
    if lhs.value != rhs.value {return false}
    if lhs.creationHeight != rhs.creationHeight {return false}
    if lhs.address != rhs.address {return false}
    if lhs.ergoTree != rhs.ergoTree {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ergo_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "json"),
    2: .same(proto: "encode"),
    3: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.json) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.encode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.json.isEmpty {
      try visitor.visitSingularStringField(value: self.json, fieldNumber: 1)
    }
    if !self.encode.isEmpty {
      try visitor.visitSingularStringField(value: self.encode, fieldNumber: 2)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ergo_Proto_SigningOutput, rhs: TW_Ergo_Proto_SigningOutput) -> Bool {
    if lhs.json != rhs.json {return false}
    if lhs.encode != rhs.encode {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ergo_Proto_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inputs"),
    2: .same(proto: "dataInputs"),
    3: .same(proto: "outputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.dataInputs) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 1)
    }
    if !self.dataInputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataInputs, fieldNumber: 2)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ergo_Proto_Transaction, rhs: TW_Ergo_Proto_Transaction) -> Bool {
    if lhs.inputs != rhs.inputs {return false}
    if lhs.dataInputs != rhs.dataInputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ergo_Proto_Input: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Input"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "boxId"),
    2: .same(proto: "spendingProof"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.boxID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._spendingProof) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.boxID.isEmpty {
      try visitor.visitSingularStringField(value: self.boxID, fieldNumber: 1)
    }
    try { if let v = self._spendingProof {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ergo_Proto_Input, rhs: TW_Ergo_Proto_Input) -> Bool {
    if lhs.boxID != rhs.boxID {return false}
    if lhs._spendingProof != rhs._spendingProof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Ergo_Proto_SpendingProof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SpendingProof"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "proofBytes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.proofBytes) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.proofBytes.isEmpty {
      try visitor.visitSingularStringField(value: self.proofBytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Ergo_Proto_SpendingProof, rhs: TW_Ergo_Proto_SpendingProof) -> Bool {
    if lhs.proofBytes != rhs.proofBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
