// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Everscale.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright Â© 2017-2022 Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Message option
public enum TW_Everscale_Proto_MessageBehavior: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Sends a message with the specified amount. The sender pays a fee from the account balance
  case simpleTransfer // = 0

  /// Sends the entire account balance along with the message
  case sendAllBalance // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .simpleTransfer
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .simpleTransfer
    case 1: self = .sendAllBalance
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .simpleTransfer: return 0
    case .sendAllBalance: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TW_Everscale_Proto_MessageBehavior: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [TW_Everscale_Proto_MessageBehavior] = [
    .simpleTransfer,
    .sendAllBalance,
  ]
}

#endif  // swift(>=4.2)

/// Transfer message
public struct TW_Everscale_Proto_Transfer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If set to true, then the message will be returned if there is an error on the recipient's side.
  public var bounce: Bool = false

  /// Affect the attached amount and fees
  public var behavior: TW_Everscale_Proto_MessageBehavior = .simpleTransfer

  /// Amount to send in nano EVER
  public var amount: UInt64 = 0

  /// Expiration UNIX timestamp
  public var expiredAt: UInt32 = 0

  /// Recipient address
  public var to: String = String()

  /// Account state if there is any
  public var accountStateOneof: TW_Everscale_Proto_Transfer.OneOf_AccountStateOneof? = nil

  /// Just contract data
  public var encodedContractData: String {
    get {
      if case .encodedContractData(let v)? = accountStateOneof {return v}
      return String()
    }
    set {accountStateOneof = .encodedContractData(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Account state if there is any
  public enum OneOf_AccountStateOneof: Equatable {
    /// Just contract data
    case encodedContractData(String)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Everscale_Proto_Transfer.OneOf_AccountStateOneof, rhs: TW_Everscale_Proto_Transfer.OneOf_AccountStateOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.encodedContractData, .encodedContractData): return {
        guard case .encodedContractData(let l) = lhs, case .encodedContractData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// Input data necessary to create a signed transaction.
public struct TW_Everscale_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The payload transfer
  public var actionOneof: TW_Everscale_Proto_SigningInput.OneOf_ActionOneof? = nil

  public var transfer: TW_Everscale_Proto_Transfer {
    get {
      if case .transfer(let v)? = actionOneof {return v}
      return TW_Everscale_Proto_Transfer()
    }
    set {actionOneof = .transfer(newValue)}
  }

  /// The secret private key used for signing (32 bytes).
  public var privateKey: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The payload transfer
  public enum OneOf_ActionOneof: Equatable {
    case transfer(TW_Everscale_Proto_Transfer)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Everscale_Proto_SigningInput.OneOf_ActionOneof, rhs: TW_Everscale_Proto_SigningInput.OneOf_ActionOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.transfer, .transfer): return {
        guard case .transfer(let l) = lhs, case .transfer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

/// Result containing the signed and encoded transaction.
public struct TW_Everscale_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var encoded: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Everscale.Proto"

extension TW_Everscale_Proto_MessageBehavior: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SimpleTransfer"),
    1: .same(proto: "SendAllBalance"),
  ]
}

extension TW_Everscale_Proto_Transfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounce"),
    2: .same(proto: "behavior"),
    3: .same(proto: "amount"),
    4: .standard(proto: "expired_at"),
    5: .same(proto: "to"),
    6: .standard(proto: "encoded_contract_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.bounce) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.behavior) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.amount) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.expiredAt) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.to) }()
      case 6: try {
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {
          if self.accountStateOneof != nil {try decoder.handleConflictingOneOf()}
          self.accountStateOneof = .encodedContractData(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.bounce != false {
      try visitor.visitSingularBoolField(value: self.bounce, fieldNumber: 1)
    }
    if self.behavior != .simpleTransfer {
      try visitor.visitSingularEnumField(value: self.behavior, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt64Field(value: self.amount, fieldNumber: 3)
    }
    if self.expiredAt != 0 {
      try visitor.visitSingularUInt32Field(value: self.expiredAt, fieldNumber: 4)
    }
    if !self.to.isEmpty {
      try visitor.visitSingularStringField(value: self.to, fieldNumber: 5)
    }
    try { if case .encodedContractData(let v)? = self.accountStateOneof {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Everscale_Proto_Transfer, rhs: TW_Everscale_Proto_Transfer) -> Bool {
    if lhs.bounce != rhs.bounce {return false}
    if lhs.behavior != rhs.behavior {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.expiredAt != rhs.expiredAt {return false}
    if lhs.to != rhs.to {return false}
    if lhs.accountStateOneof != rhs.accountStateOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Everscale_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transfer"),
    2: .standard(proto: "private_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: TW_Everscale_Proto_Transfer?
        var hadOneofValue = false
        if let current = self.actionOneof {
          hadOneofValue = true
          if case .transfer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.actionOneof = .transfer(v)
        }
      }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.privateKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .transfer(let v)? = self.actionOneof {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Everscale_Proto_SigningInput, rhs: TW_Everscale_Proto_SigningInput) -> Bool {
    if lhs.actionOneof != rhs.actionOneof {return false}
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Everscale_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.encoded) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.encoded.isEmpty {
      try visitor.visitSingularStringField(value: self.encoded, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Everscale_Proto_SigningOutput, rhs: TW_Everscale_Proto_SigningOutput) -> Bool {
    if lhs.encoded != rhs.encoded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
