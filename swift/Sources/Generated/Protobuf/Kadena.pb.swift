// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Kadena.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright Â© 2017-2020 Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Transaction signing input.
public struct TW_Kadena_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Private key.
  public var privateKey: Data = Data()

  /// Network Id.
  public var networkID: String = String()

  /// Sender.
  public var sender: String = String()

  /// Receiver.
  public var receiver: String = String()

  /// Amount to send.
  public var amount: String = String()

  /// Gas price.
  public var gasPrice: String = String()

  /// Gas limit.
  public var gasLimit: UInt64 = 0

  ///Nonce.
  public var nonce: String = String()

  /// Creation time.
  public var creationTime: UInt64 = 0

  /// TTL.
  public var ttl: UInt64 = 0

  ///Sender chain identifier.
  public var chainID: String = String()

  ///Receiver chain identifier.
  public var targetChainID: String = String()

  ///Receiver's publicKeys.
  public var receiverPubKeys: [String] = []

  /// Receiver account predicate.
  public var pred: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Transaction signing output.
public struct TW_Kadena_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signing output json.
  public var json: String = String()

  /// Transaction hash.
  public var hash: String = String()

  /// Optional error message.
  public var error: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Kadena.Proto"

extension TW_Kadena_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "privateKey"),
    2: .same(proto: "networkId"),
    3: .same(proto: "sender"),
    4: .same(proto: "receiver"),
    5: .same(proto: "amount"),
    6: .same(proto: "gasPrice"),
    7: .same(proto: "gasLimit"),
    8: .same(proto: "nonce"),
    9: .same(proto: "creationTime"),
    10: .same(proto: "ttl"),
    11: .same(proto: "chainId"),
    12: .same(proto: "targetChainId"),
    13: .same(proto: "receiverPubKeys"),
    14: .same(proto: "pred"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.privateKey) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.networkID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.sender) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.receiver) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.amount) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.gasPrice) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.gasLimit) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.nonce) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.creationTime) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self.ttl) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.targetChainID) }()
      case 13: try { try decoder.decodeRepeatedStringField(value: &self.receiverPubKeys) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.pred) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.privateKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.privateKey, fieldNumber: 1)
    }
    if !self.networkID.isEmpty {
      try visitor.visitSingularStringField(value: self.networkID, fieldNumber: 2)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 3)
    }
    if !self.receiver.isEmpty {
      try visitor.visitSingularStringField(value: self.receiver, fieldNumber: 4)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 5)
    }
    if !self.gasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.gasPrice, fieldNumber: 6)
    }
    if self.gasLimit != 0 {
      try visitor.visitSingularUInt64Field(value: self.gasLimit, fieldNumber: 7)
    }
    if !self.nonce.isEmpty {
      try visitor.visitSingularStringField(value: self.nonce, fieldNumber: 8)
    }
    if self.creationTime != 0 {
      try visitor.visitSingularUInt64Field(value: self.creationTime, fieldNumber: 9)
    }
    if self.ttl != 0 {
      try visitor.visitSingularUInt64Field(value: self.ttl, fieldNumber: 10)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 11)
    }
    if !self.targetChainID.isEmpty {
      try visitor.visitSingularStringField(value: self.targetChainID, fieldNumber: 12)
    }
    if !self.receiverPubKeys.isEmpty {
      try visitor.visitRepeatedStringField(value: self.receiverPubKeys, fieldNumber: 13)
    }
    if !self.pred.isEmpty {
      try visitor.visitSingularStringField(value: self.pred, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Kadena_Proto_SigningInput, rhs: TW_Kadena_Proto_SigningInput) -> Bool {
    if lhs.privateKey != rhs.privateKey {return false}
    if lhs.networkID != rhs.networkID {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.receiver != rhs.receiver {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.gasPrice != rhs.gasPrice {return false}
    if lhs.gasLimit != rhs.gasLimit {return false}
    if lhs.nonce != rhs.nonce {return false}
    if lhs.creationTime != rhs.creationTime {return false}
    if lhs.ttl != rhs.ttl {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.targetChainID != rhs.targetChainID {return false}
    if lhs.receiverPubKeys != rhs.receiverPubKeys {return false}
    if lhs.pred != rhs.pred {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Kadena_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "json"),
    2: .same(proto: "hash"),
    3: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.json) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.json.isEmpty {
      try visitor.visitSingularStringField(value: self.json, fieldNumber: 1)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 2)
    }
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Kadena_Proto_SigningOutput, rhs: TW_Kadena_Proto_SigningOutput) -> Bool {
    if lhs.json != rhs.json {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
