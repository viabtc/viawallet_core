// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Tron.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A transfer transaction
public struct TW_Tron_Proto_TransferContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender address.
  public var ownerAddress: String = String()

  /// Recipient address.
  public var toAddress: String = String()

  /// Amount to send.
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Asset transfer
public struct TW_Tron_Proto_TransferAssetContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Asset name.
  public var assetName: String = String()

  /// Sender address.
  public var ownerAddress: String = String()

  /// Recipient address.
  public var toAddress: String = String()

  /// Amount to send.
  public var amount: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// TRC20 token transfer
public struct TW_Tron_Proto_TransferTRC20Contract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Contract name.
  public var contractAddress: String = String()

  /// Sender address.
  public var ownerAddress: String = String()

  /// Recipient address.
  public var toAddress: String = String()

  /// Amount to send, (uint256, serialized big endian)
  public var amount: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Freeze balance
public struct TW_Tron_Proto_FreezeBalanceContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender address.
  public var ownerAddress: String = String()

  /// Frozen balance. Minimum 1
  public var frozenBalance: Int64 = 0

  /// Frozen duration
  public var frozenDuration: Int64 = 0

  /// Resource type: BANDWIDTH | ENERGY
  public var resource: String = String()

  /// Receiver address
  public var receiverAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// stake TRX to obtain TRON Power (voting rights) and bandwidth or energy.
public struct TW_Tron_Proto_FreezeBalanceV2Contract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Address of transaction initiator, data type is string
  public var ownerAddress: String = String()

  /// Amount of TRX to be staked, unit is sun, data type is uint256
  public var frozenBalance: Int64 = 0

  /// Resource type, "BANDWIDTH" or "ENERGY", data type is string
  public var resource: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Unstake TRX to release bandwidth and energy and at the same time TRON Power will be reduced and all corresponding votes will be canceled.
public struct TW_Tron_Proto_UnfreezeBalanceV2Contract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Address of transaction initiator, data type is string
  public var ownerAddress: String = String()

  /// Amount of TRX to be unstaked, unit is sun, data type is uint256
  public var unfreezeBalance: Int64 = 0

  /// Resource type, "BANDWIDTH" or "ENERGY", data type is string
  public var resource: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// withdraw unfrozen balance
public struct TW_Tron_Proto_WithdrawExpireUnfreezeContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Address of transaction initiator, data type is string
  public var ownerAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// delegate resource
public struct TW_Tron_Proto_DelegateResourceContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Address of transaction initiator, data type is string
  public var ownerAddress: String = String()

  /// Resource type, "BANDWIDTH" or "ENERGY", data type is string
  public var resource: String = String()

  /// Amount of TRX staked for resource to be delegated, unit is sun, data type is uint256
  public var balance: Int64 = 0

  /// Receiver address of resource to be delegated to
  public var receiverAddress: String = String()

  /// Whether it is locked, if it is set to true, the delegated resources cannot be undelegated within 3 days.
  /// When the lock time is not over, if the owner delegates the same resources using the lock to the same address,
  /// the lock time will be reset to 3 days
  public var lock: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// undelegate resource
public struct TW_Tron_Proto_UnDelegateResourceContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Address of transaction initiator, data type is string
  public var ownerAddress: String = String()

  /// Resource type, "BANDWIDTH" or "ENERGY", data type is string
  public var resource: String = String()

  /// Amount of TRX staked for resource to be undelegated, unit is sun, data type is uint256
  public var balance: Int64 = 0

  /// Receiver address of resource to be delegated to, data type is string
  public var receiverAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Unfreeze balance
public struct TW_Tron_Proto_UnfreezeBalanceContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender address
  public var ownerAddress: String = String()

  /// Resource type: BANDWIDTH | ENERGY
  public var resource: String = String()

  /// Receiver address
  public var receiverAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Unfreeze asset
public struct TW_Tron_Proto_UnfreezeAssetContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender address
  public var ownerAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Vote asset
public struct TW_Tron_Proto_VoteAssetContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender address
  public var ownerAddress: String = String()

  /// Vote addresses
  public var voteAddress: [String] = []

  public var support: Bool = false

  public var count: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Vote witness
public struct TW_Tron_Proto_VoteWitnessContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Owner
  public var ownerAddress: String = String()

  /// The votes
  public var votes: [TW_Tron_Proto_VoteWitnessContract.Vote] = []

  public var support: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A vote
  public struct Vote {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// address
    public var voteAddress: String = String()

    /// vote count
    public var voteCount: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Withdraw balance
public struct TW_Tron_Proto_WithdrawBalanceContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender address
  public var ownerAddress: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Smart contract call
public struct TW_Tron_Proto_TriggerSmartContract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Owner
  public var ownerAddress: String = String()

  /// Contract address
  public var contractAddress: String = String()

  /// amount
  public var callValue: Int64 = 0

  /// call data
  public var data: Data = Data()

  /// token value
  public var callTokenValue: Int64 = 0

  /// ID of the token
  public var tokenID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Info from block header
public struct TW_Tron_Proto_BlockHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// creation timestamp
  public var timestamp: Int64 = 0

  /// root
  public var txTrieRoot: Data = Data()

  /// hash of the parent
  public var parentHash: Data = Data()

  public var number: Int64 = 0

  public var witnessAddress: Data = Data()

  public var version: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Transaction
public struct TW_Tron_Proto_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transaction timestamp in milliseconds.
  public var timestamp: Int64 = 0

  /// Transaction expiration time in milliseconds.
  public var expiration: Int64 = 0

  /// Transaction block header.
  public var blockHeader: TW_Tron_Proto_BlockHeader {
    get {return _blockHeader ?? TW_Tron_Proto_BlockHeader()}
    set {_blockHeader = newValue}
  }
  /// Returns true if `blockHeader` has been explicitly set.
  public var hasBlockHeader: Bool {return self._blockHeader != nil}
  /// Clears the value of `blockHeader`. Subsequent reads from it will return its default value.
  public mutating func clearBlockHeader() {self._blockHeader = nil}

  /// Transaction fee limit
  public var feeLimit: Int64 = 0

  /// Contract.
  public var contractOneof: TW_Tron_Proto_Transaction.OneOf_ContractOneof? = nil

  public var transfer: TW_Tron_Proto_TransferContract {
    get {
      if case .transfer(let v)? = contractOneof {return v}
      return TW_Tron_Proto_TransferContract()
    }
    set {contractOneof = .transfer(newValue)}
  }

  public var transferAsset: TW_Tron_Proto_TransferAssetContract {
    get {
      if case .transferAsset(let v)? = contractOneof {return v}
      return TW_Tron_Proto_TransferAssetContract()
    }
    set {contractOneof = .transferAsset(newValue)}
  }

  public var freezeBalance: TW_Tron_Proto_FreezeBalanceContract {
    get {
      if case .freezeBalance(let v)? = contractOneof {return v}
      return TW_Tron_Proto_FreezeBalanceContract()
    }
    set {contractOneof = .freezeBalance(newValue)}
  }

  public var unfreezeBalance: TW_Tron_Proto_UnfreezeBalanceContract {
    get {
      if case .unfreezeBalance(let v)? = contractOneof {return v}
      return TW_Tron_Proto_UnfreezeBalanceContract()
    }
    set {contractOneof = .unfreezeBalance(newValue)}
  }

  public var unfreezeAsset: TW_Tron_Proto_UnfreezeAssetContract {
    get {
      if case .unfreezeAsset(let v)? = contractOneof {return v}
      return TW_Tron_Proto_UnfreezeAssetContract()
    }
    set {contractOneof = .unfreezeAsset(newValue)}
  }

  public var withdrawBalance: TW_Tron_Proto_WithdrawBalanceContract {
    get {
      if case .withdrawBalance(let v)? = contractOneof {return v}
      return TW_Tron_Proto_WithdrawBalanceContract()
    }
    set {contractOneof = .withdrawBalance(newValue)}
  }

  public var voteAsset: TW_Tron_Proto_VoteAssetContract {
    get {
      if case .voteAsset(let v)? = contractOneof {return v}
      return TW_Tron_Proto_VoteAssetContract()
    }
    set {contractOneof = .voteAsset(newValue)}
  }

  public var voteWitness: TW_Tron_Proto_VoteWitnessContract {
    get {
      if case .voteWitness(let v)? = contractOneof {return v}
      return TW_Tron_Proto_VoteWitnessContract()
    }
    set {contractOneof = .voteWitness(newValue)}
  }

  public var triggerSmartContract: TW_Tron_Proto_TriggerSmartContract {
    get {
      if case .triggerSmartContract(let v)? = contractOneof {return v}
      return TW_Tron_Proto_TriggerSmartContract()
    }
    set {contractOneof = .triggerSmartContract(newValue)}
  }

  public var transferTrc20Contract: TW_Tron_Proto_TransferTRC20Contract {
    get {
      if case .transferTrc20Contract(let v)? = contractOneof {return v}
      return TW_Tron_Proto_TransferTRC20Contract()
    }
    set {contractOneof = .transferTrc20Contract(newValue)}
  }

  public var freezeBalanceV2: TW_Tron_Proto_FreezeBalanceV2Contract {
    get {
      if case .freezeBalanceV2(let v)? = contractOneof {return v}
      return TW_Tron_Proto_FreezeBalanceV2Contract()
    }
    set {contractOneof = .freezeBalanceV2(newValue)}
  }

  public var unfreezeBalanceV2: TW_Tron_Proto_UnfreezeBalanceV2Contract {
    get {
      if case .unfreezeBalanceV2(let v)? = contractOneof {return v}
      return TW_Tron_Proto_UnfreezeBalanceV2Contract()
    }
    set {contractOneof = .unfreezeBalanceV2(newValue)}
  }

  public var withdrawExpireUnfreeze: TW_Tron_Proto_WithdrawExpireUnfreezeContract {
    get {
      if case .withdrawExpireUnfreeze(let v)? = contractOneof {return v}
      return TW_Tron_Proto_WithdrawExpireUnfreezeContract()
    }
    set {contractOneof = .withdrawExpireUnfreeze(newValue)}
  }

  public var delegateResource: TW_Tron_Proto_DelegateResourceContract {
    get {
      if case .delegateResource(let v)? = contractOneof {return v}
      return TW_Tron_Proto_DelegateResourceContract()
    }
    set {contractOneof = .delegateResource(newValue)}
  }

  public var undelegateResource: TW_Tron_Proto_UnDelegateResourceContract {
    get {
      if case .undelegateResource(let v)? = contractOneof {return v}
      return TW_Tron_Proto_UnDelegateResourceContract()
    }
    set {contractOneof = .undelegateResource(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Contract.
  public enum OneOf_ContractOneof: Equatable {
    case transfer(TW_Tron_Proto_TransferContract)
    case transferAsset(TW_Tron_Proto_TransferAssetContract)
    case freezeBalance(TW_Tron_Proto_FreezeBalanceContract)
    case unfreezeBalance(TW_Tron_Proto_UnfreezeBalanceContract)
    case unfreezeAsset(TW_Tron_Proto_UnfreezeAssetContract)
    case withdrawBalance(TW_Tron_Proto_WithdrawBalanceContract)
    case voteAsset(TW_Tron_Proto_VoteAssetContract)
    case voteWitness(TW_Tron_Proto_VoteWitnessContract)
    case triggerSmartContract(TW_Tron_Proto_TriggerSmartContract)
    case transferTrc20Contract(TW_Tron_Proto_TransferTRC20Contract)
    case freezeBalanceV2(TW_Tron_Proto_FreezeBalanceV2Contract)
    case unfreezeBalanceV2(TW_Tron_Proto_UnfreezeBalanceV2Contract)
    case withdrawExpireUnfreeze(TW_Tron_Proto_WithdrawExpireUnfreezeContract)
    case delegateResource(TW_Tron_Proto_DelegateResourceContract)
    case undelegateResource(TW_Tron_Proto_UnDelegateResourceContract)

  #if !swift(>=4.1)
    public static func ==(lhs: TW_Tron_Proto_Transaction.OneOf_ContractOneof, rhs: TW_Tron_Proto_Transaction.OneOf_ContractOneof) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.transfer, .transfer): return {
        guard case .transfer(let l) = lhs, case .transfer(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.transferAsset, .transferAsset): return {
        guard case .transferAsset(let l) = lhs, case .transferAsset(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.freezeBalance, .freezeBalance): return {
        guard case .freezeBalance(let l) = lhs, case .freezeBalance(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.unfreezeBalance, .unfreezeBalance): return {
        guard case .unfreezeBalance(let l) = lhs, case .unfreezeBalance(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.unfreezeAsset, .unfreezeAsset): return {
        guard case .unfreezeAsset(let l) = lhs, case .unfreezeAsset(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.withdrawBalance, .withdrawBalance): return {
        guard case .withdrawBalance(let l) = lhs, case .withdrawBalance(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.voteAsset, .voteAsset): return {
        guard case .voteAsset(let l) = lhs, case .voteAsset(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.voteWitness, .voteWitness): return {
        guard case .voteWitness(let l) = lhs, case .voteWitness(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.triggerSmartContract, .triggerSmartContract): return {
        guard case .triggerSmartContract(let l) = lhs, case .triggerSmartContract(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.transferTrc20Contract, .transferTrc20Contract): return {
        guard case .transferTrc20Contract(let l) = lhs, case .transferTrc20Contract(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.freezeBalanceV2, .freezeBalanceV2): return {
        guard case .freezeBalanceV2(let l) = lhs, case .freezeBalanceV2(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.unfreezeBalanceV2, .unfreezeBalanceV2): return {
        guard case .unfreezeBalanceV2(let l) = lhs, case .unfreezeBalanceV2(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.withdrawExpireUnfreeze, .withdrawExpireUnfreeze): return {
        guard case .withdrawExpireUnfreeze(let l) = lhs, case .withdrawExpireUnfreeze(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.delegateResource, .delegateResource): return {
        guard case .delegateResource(let l) = lhs, case .delegateResource(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.undelegateResource, .undelegateResource): return {
        guard case .undelegateResource(let l) = lhs, case .undelegateResource(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _blockHeader: TW_Tron_Proto_BlockHeader? = nil
}

/// Input data necessary to create a signed transaction.
public struct TW_Tron_Proto_SigningInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transaction.
  public var transaction: TW_Tron_Proto_Transaction {
    get {return _storage._transaction ?? TW_Tron_Proto_Transaction()}
    set {_uniqueStorage()._transaction = newValue}
  }
  /// Returns true if `transaction` has been explicitly set.
  public var hasTransaction: Bool {return _storage._transaction != nil}
  /// Clears the value of `transaction`. Subsequent reads from it will return its default value.
  public mutating func clearTransaction() {_uniqueStorage()._transaction = nil}

  /// The secret private key used for signing (32 bytes).
  public var privateKey: Data {
    get {return _storage._privateKey}
    set {_uniqueStorage()._privateKey = newValue}
  }

  /// For direct sign in Tron, we just have to sign the txId returned by the DApp json payload.
  public var txID: String {
    get {return _storage._txID}
    set {_uniqueStorage()._txID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Result containing the signed and encoded transaction.
public struct TW_Tron_Proto_SigningOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transaction identifier.
  public var id: Data = Data()

  /// Signature.
  public var signature: Data = Data()

  public var refBlockBytes: Data = Data()

  public var refBlockHash: Data = Data()

  /// Result in JSON
  public var json: String = String()

  public var encoded: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TW.Tron.Proto"

extension TW_Tron_Proto_TransferContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .standard(proto: "to_address"),
    3: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 2)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_TransferContract, rhs: TW_Tron_Proto_TransferContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_TransferAssetContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferAssetContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "asset_name"),
    2: .standard(proto: "owner_address"),
    3: .standard(proto: "to_address"),
    4: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.assetName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.assetName.isEmpty {
      try visitor.visitSingularStringField(value: self.assetName, fieldNumber: 1)
    }
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 2)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 3)
    }
    if self.amount != 0 {
      try visitor.visitSingularInt64Field(value: self.amount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_TransferAssetContract, rhs: TW_Tron_Proto_TransferAssetContract) -> Bool {
    if lhs.assetName != rhs.assetName {return false}
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_TransferTRC20Contract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransferTRC20Contract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "contract_address"),
    2: .standard(proto: "owner_address"),
    3: .standard(proto: "to_address"),
    4: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.amount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 1)
    }
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 2)
    }
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 3)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularBytesField(value: self.amount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_TransferTRC20Contract, rhs: TW_Tron_Proto_TransferTRC20Contract) -> Bool {
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_FreezeBalanceContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FreezeBalanceContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .standard(proto: "frozen_balance"),
    3: .standard(proto: "frozen_duration"),
    10: .same(proto: "resource"),
    15: .standard(proto: "receiver_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.frozenBalance) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.frozenDuration) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.resource) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.receiverAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if self.frozenBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.frozenBalance, fieldNumber: 2)
    }
    if self.frozenDuration != 0 {
      try visitor.visitSingularInt64Field(value: self.frozenDuration, fieldNumber: 3)
    }
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 10)
    }
    if !self.receiverAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.receiverAddress, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_FreezeBalanceContract, rhs: TW_Tron_Proto_FreezeBalanceContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.frozenBalance != rhs.frozenBalance {return false}
    if lhs.frozenDuration != rhs.frozenDuration {return false}
    if lhs.resource != rhs.resource {return false}
    if lhs.receiverAddress != rhs.receiverAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_FreezeBalanceV2Contract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FreezeBalanceV2Contract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .standard(proto: "frozen_balance"),
    3: .same(proto: "resource"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.frozenBalance) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.resource) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if self.frozenBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.frozenBalance, fieldNumber: 2)
    }
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_FreezeBalanceV2Contract, rhs: TW_Tron_Proto_FreezeBalanceV2Contract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.frozenBalance != rhs.frozenBalance {return false}
    if lhs.resource != rhs.resource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_UnfreezeBalanceV2Contract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnfreezeBalanceV2Contract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .standard(proto: "unfreeze_balance"),
    3: .same(proto: "resource"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.unfreezeBalance) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.resource) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if self.unfreezeBalance != 0 {
      try visitor.visitSingularInt64Field(value: self.unfreezeBalance, fieldNumber: 2)
    }
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_UnfreezeBalanceV2Contract, rhs: TW_Tron_Proto_UnfreezeBalanceV2Contract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.unfreezeBalance != rhs.unfreezeBalance {return false}
    if lhs.resource != rhs.resource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_WithdrawExpireUnfreezeContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WithdrawExpireUnfreezeContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_WithdrawExpireUnfreezeContract, rhs: TW_Tron_Proto_WithdrawExpireUnfreezeContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_DelegateResourceContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DelegateResourceContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .same(proto: "resource"),
    3: .same(proto: "balance"),
    4: .standard(proto: "receiver_address"),
    5: .same(proto: "lock"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resource) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.balance) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.receiverAddress) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.lock) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 2)
    }
    if self.balance != 0 {
      try visitor.visitSingularInt64Field(value: self.balance, fieldNumber: 3)
    }
    if !self.receiverAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.receiverAddress, fieldNumber: 4)
    }
    if self.lock != false {
      try visitor.visitSingularBoolField(value: self.lock, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_DelegateResourceContract, rhs: TW_Tron_Proto_DelegateResourceContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.resource != rhs.resource {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.receiverAddress != rhs.receiverAddress {return false}
    if lhs.lock != rhs.lock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_UnDelegateResourceContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnDelegateResourceContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .same(proto: "resource"),
    3: .same(proto: "balance"),
    4: .standard(proto: "receiver_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.resource) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.balance) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.receiverAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 2)
    }
    if self.balance != 0 {
      try visitor.visitSingularInt64Field(value: self.balance, fieldNumber: 3)
    }
    if !self.receiverAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.receiverAddress, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_UnDelegateResourceContract, rhs: TW_Tron_Proto_UnDelegateResourceContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.resource != rhs.resource {return false}
    if lhs.balance != rhs.balance {return false}
    if lhs.receiverAddress != rhs.receiverAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_UnfreezeBalanceContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnfreezeBalanceContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    10: .same(proto: "resource"),
    15: .standard(proto: "receiver_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.resource) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.receiverAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.resource.isEmpty {
      try visitor.visitSingularStringField(value: self.resource, fieldNumber: 10)
    }
    if !self.receiverAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.receiverAddress, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_UnfreezeBalanceContract, rhs: TW_Tron_Proto_UnfreezeBalanceContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.resource != rhs.resource {return false}
    if lhs.receiverAddress != rhs.receiverAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_UnfreezeAssetContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnfreezeAssetContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_UnfreezeAssetContract, rhs: TW_Tron_Proto_UnfreezeAssetContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_VoteAssetContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VoteAssetContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .standard(proto: "vote_address"),
    3: .same(proto: "support"),
    5: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.voteAddress) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.support) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.count) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.voteAddress.isEmpty {
      try visitor.visitRepeatedStringField(value: self.voteAddress, fieldNumber: 2)
    }
    if self.support != false {
      try visitor.visitSingularBoolField(value: self.support, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularInt32Field(value: self.count, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_VoteAssetContract, rhs: TW_Tron_Proto_VoteAssetContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.voteAddress != rhs.voteAddress {return false}
    if lhs.support != rhs.support {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_VoteWitnessContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VoteWitnessContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .same(proto: "votes"),
    3: .same(proto: "support"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.votes) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.support) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.votes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.votes, fieldNumber: 2)
    }
    if self.support != false {
      try visitor.visitSingularBoolField(value: self.support, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_VoteWitnessContract, rhs: TW_Tron_Proto_VoteWitnessContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.votes != rhs.votes {return false}
    if lhs.support != rhs.support {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_VoteWitnessContract.Vote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = TW_Tron_Proto_VoteWitnessContract.protoMessageName + ".Vote"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vote_address"),
    2: .standard(proto: "vote_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.voteAddress) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.voteCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.voteAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.voteAddress, fieldNumber: 1)
    }
    if self.voteCount != 0 {
      try visitor.visitSingularInt64Field(value: self.voteCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_VoteWitnessContract.Vote, rhs: TW_Tron_Proto_VoteWitnessContract.Vote) -> Bool {
    if lhs.voteAddress != rhs.voteAddress {return false}
    if lhs.voteCount != rhs.voteCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_WithdrawBalanceContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WithdrawBalanceContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_WithdrawBalanceContract, rhs: TW_Tron_Proto_WithdrawBalanceContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_TriggerSmartContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TriggerSmartContract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "owner_address"),
    2: .standard(proto: "contract_address"),
    3: .standard(proto: "call_value"),
    4: .same(proto: "data"),
    5: .standard(proto: "call_token_value"),
    6: .standard(proto: "token_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ownerAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contractAddress) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.callValue) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.callTokenValue) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.tokenID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ownerAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ownerAddress, fieldNumber: 1)
    }
    if !self.contractAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.contractAddress, fieldNumber: 2)
    }
    if self.callValue != 0 {
      try visitor.visitSingularInt64Field(value: self.callValue, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 4)
    }
    if self.callTokenValue != 0 {
      try visitor.visitSingularInt64Field(value: self.callTokenValue, fieldNumber: 5)
    }
    if self.tokenID != 0 {
      try visitor.visitSingularInt64Field(value: self.tokenID, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_TriggerSmartContract, rhs: TW_Tron_Proto_TriggerSmartContract) -> Bool {
    if lhs.ownerAddress != rhs.ownerAddress {return false}
    if lhs.contractAddress != rhs.contractAddress {return false}
    if lhs.callValue != rhs.callValue {return false}
    if lhs.data != rhs.data {return false}
    if lhs.callTokenValue != rhs.callTokenValue {return false}
    if lhs.tokenID != rhs.tokenID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_BlockHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BlockHeader"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "tx_trie_root"),
    3: .standard(proto: "parent_hash"),
    7: .same(proto: "number"),
    9: .standard(proto: "witness_address"),
    10: .same(proto: "version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.txTrieRoot) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.parentHash) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.number) }()
      case 9: try { try decoder.decodeSingularBytesField(value: &self.witnessAddress) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    if !self.txTrieRoot.isEmpty {
      try visitor.visitSingularBytesField(value: self.txTrieRoot, fieldNumber: 2)
    }
    if !self.parentHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.parentHash, fieldNumber: 3)
    }
    if self.number != 0 {
      try visitor.visitSingularInt64Field(value: self.number, fieldNumber: 7)
    }
    if !self.witnessAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.witnessAddress, fieldNumber: 9)
    }
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_BlockHeader, rhs: TW_Tron_Proto_BlockHeader) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.txTrieRoot != rhs.txTrieRoot {return false}
    if lhs.parentHash != rhs.parentHash {return false}
    if lhs.number != rhs.number {return false}
    if lhs.witnessAddress != rhs.witnessAddress {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Transaction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "expiration"),
    3: .standard(proto: "block_header"),
    4: .standard(proto: "fee_limit"),
    10: .same(proto: "transfer"),
    11: .standard(proto: "transfer_asset"),
    12: .standard(proto: "freeze_balance"),
    13: .standard(proto: "unfreeze_balance"),
    14: .standard(proto: "unfreeze_asset"),
    15: .standard(proto: "withdraw_balance"),
    16: .standard(proto: "vote_asset"),
    17: .standard(proto: "vote_witness"),
    18: .standard(proto: "trigger_smart_contract"),
    19: .standard(proto: "transfer_trc20_contract"),
    20: .standard(proto: "freeze_balance_v2"),
    21: .standard(proto: "unfreeze_balance_v2"),
    23: .standard(proto: "withdraw_expire_unfreeze"),
    24: .standard(proto: "delegate_resource"),
    25: .standard(proto: "undelegate_resource"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.timestamp) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.expiration) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._blockHeader) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.feeLimit) }()
      case 10: try {
        var v: TW_Tron_Proto_TransferContract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .transfer(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .transfer(v)
        }
      }()
      case 11: try {
        var v: TW_Tron_Proto_TransferAssetContract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .transferAsset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .transferAsset(v)
        }
      }()
      case 12: try {
        var v: TW_Tron_Proto_FreezeBalanceContract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .freezeBalance(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .freezeBalance(v)
        }
      }()
      case 13: try {
        var v: TW_Tron_Proto_UnfreezeBalanceContract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .unfreezeBalance(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .unfreezeBalance(v)
        }
      }()
      case 14: try {
        var v: TW_Tron_Proto_UnfreezeAssetContract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .unfreezeAsset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .unfreezeAsset(v)
        }
      }()
      case 15: try {
        var v: TW_Tron_Proto_WithdrawBalanceContract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .withdrawBalance(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .withdrawBalance(v)
        }
      }()
      case 16: try {
        var v: TW_Tron_Proto_VoteAssetContract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .voteAsset(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .voteAsset(v)
        }
      }()
      case 17: try {
        var v: TW_Tron_Proto_VoteWitnessContract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .voteWitness(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .voteWitness(v)
        }
      }()
      case 18: try {
        var v: TW_Tron_Proto_TriggerSmartContract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .triggerSmartContract(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .triggerSmartContract(v)
        }
      }()
      case 19: try {
        var v: TW_Tron_Proto_TransferTRC20Contract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .transferTrc20Contract(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .transferTrc20Contract(v)
        }
      }()
      case 20: try {
        var v: TW_Tron_Proto_FreezeBalanceV2Contract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .freezeBalanceV2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .freezeBalanceV2(v)
        }
      }()
      case 21: try {
        var v: TW_Tron_Proto_UnfreezeBalanceV2Contract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .unfreezeBalanceV2(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .unfreezeBalanceV2(v)
        }
      }()
      case 23: try {
        var v: TW_Tron_Proto_WithdrawExpireUnfreezeContract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .withdrawExpireUnfreeze(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .withdrawExpireUnfreeze(v)
        }
      }()
      case 24: try {
        var v: TW_Tron_Proto_DelegateResourceContract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .delegateResource(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .delegateResource(v)
        }
      }()
      case 25: try {
        var v: TW_Tron_Proto_UnDelegateResourceContract?
        var hadOneofValue = false
        if let current = self.contractOneof {
          hadOneofValue = true
          if case .undelegateResource(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.contractOneof = .undelegateResource(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 1)
    }
    if self.expiration != 0 {
      try visitor.visitSingularInt64Field(value: self.expiration, fieldNumber: 2)
    }
    try { if let v = self._blockHeader {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.feeLimit != 0 {
      try visitor.visitSingularInt64Field(value: self.feeLimit, fieldNumber: 4)
    }
    switch self.contractOneof {
    case .transfer?: try {
      guard case .transfer(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }()
    case .transferAsset?: try {
      guard case .transferAsset(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    }()
    case .freezeBalance?: try {
      guard case .freezeBalance(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    }()
    case .unfreezeBalance?: try {
      guard case .unfreezeBalance(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    }()
    case .unfreezeAsset?: try {
      guard case .unfreezeAsset(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    }()
    case .withdrawBalance?: try {
      guard case .withdrawBalance(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
    }()
    case .voteAsset?: try {
      guard case .voteAsset(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
    }()
    case .voteWitness?: try {
      guard case .voteWitness(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
    }()
    case .triggerSmartContract?: try {
      guard case .triggerSmartContract(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    }()
    case .transferTrc20Contract?: try {
      guard case .transferTrc20Contract(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
    }()
    case .freezeBalanceV2?: try {
      guard case .freezeBalanceV2(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
    }()
    case .unfreezeBalanceV2?: try {
      guard case .unfreezeBalanceV2(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
    }()
    case .withdrawExpireUnfreeze?: try {
      guard case .withdrawExpireUnfreeze(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
    }()
    case .delegateResource?: try {
      guard case .delegateResource(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
    }()
    case .undelegateResource?: try {
      guard case .undelegateResource(let v)? = self.contractOneof else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_Transaction, rhs: TW_Tron_Proto_Transaction) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.expiration != rhs.expiration {return false}
    if lhs._blockHeader != rhs._blockHeader {return false}
    if lhs.feeLimit != rhs.feeLimit {return false}
    if lhs.contractOneof != rhs.contractOneof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_SigningInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningInput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
    2: .standard(proto: "private_key"),
    3: .same(proto: "txId"),
  ]

  fileprivate class _StorageClass {
    var _transaction: TW_Tron_Proto_Transaction? = nil
    var _privateKey: Data = Data()
    var _txID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transaction = source._transaction
      _privateKey = source._privateKey
      _txID = source._txID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._transaction) }()
        case 2: try { try decoder.decodeSingularBytesField(value: &_storage._privateKey) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._txID) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._transaction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._privateKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._privateKey, fieldNumber: 2)
      }
      if !_storage._txID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._txID, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_SigningInput, rhs: TW_Tron_Proto_SigningInput) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transaction != rhs_storage._transaction {return false}
        if _storage._privateKey != rhs_storage._privateKey {return false}
        if _storage._txID != rhs_storage._txID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TW_Tron_Proto_SigningOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningOutput"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "signature"),
    3: .standard(proto: "ref_block_bytes"),
    4: .standard(proto: "ref_block_hash"),
    5: .same(proto: "json"),
    6: .same(proto: "encoded"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.refBlockBytes) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.refBlockHash) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.json) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.encoded) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    if !self.refBlockBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.refBlockBytes, fieldNumber: 3)
    }
    if !self.refBlockHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.refBlockHash, fieldNumber: 4)
    }
    if !self.json.isEmpty {
      try visitor.visitSingularStringField(value: self.json, fieldNumber: 5)
    }
    if !self.encoded.isEmpty {
      try visitor.visitSingularBytesField(value: self.encoded, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TW_Tron_Proto_SigningOutput, rhs: TW_Tron_Proto_SigningOutput) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.refBlockBytes != rhs.refBlockBytes {return false}
    if lhs.refBlockHash != rhs.refBlockHash {return false}
    if lhs.json != rhs.json {return false}
    if lhs.encoded != rhs.encoded {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
